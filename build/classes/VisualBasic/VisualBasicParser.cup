package VisualBasic;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Stack;

action code {:
	public boolean hay_error = false;
	public boolean hay_retorno = false;
	public String nombre_archivo;

	public ArrayList<Tipo> retorno = new ArrayList();
	public ArrayList<Integer> retorno_izq = new ArrayList();
	public ArrayList<Integer> retorno_der = new ArrayList();
:};

parser code {:

:};

/*Declaracion de terminales y no terminales*/
/*Terminales*/
/*Comandos de consola*/
terminal WRITE, READ;

/*Tipos de datos*/
terminal ENTERO, REAL, BOOLEAN, CARACTER, CADENA, TYPE;

/*Declaracion de variables, visibilidad*/
terminal DIM, AS, PUBLIC, PRIVATE;

/*Comandos de funcion*/
terminal SUB, FUNCTION, EXIT, CALL, BYREF, BYVAL;

/*Operadores logicos*/
terminal OP_MAYOR_QUE, OP_MENOR_QUE, OP_MAYOR_IGUAL_QUE, OP_MENOR_IGUAL_QUE, OP_AND, OP_OR, OP_NOT;

/*Operadores aritmeticos*/
terminal OP_SUMA, OP_RESTA, OP_MULTIPLICACION, OP_DIVISION, OP_IGUAL;

/*Estructuras de control*/
terminal IF, THEN, ELSE, ELSE_IF, END, FOR, TO, STEP, NEXT, LOOP, DO, WHILE, UNTIL;

/*Otros*/
terminal COMA, PUNTO, FIN_LINEA, PAR_IZQ, PAR_DER;

/*Literales*/
terminal Integer ENTERO_LITERAL;
terminal Double REAL_LITERAL;
terminal Character CARACTER_LITERAL;
terminal String CADENA_LITERAL;
terminal String IDENTIFICADOR;
terminal Boolean BOOLEAN_LITERAL;
// terminal Object TYPE_LITERAL;

/*No terminales*/
non terminal 	inicio_programa, raiz, sentencias_principales, sentencia_principal, declaracion_variables, declaracion_sub, declaracion_funcion,
				declaracion_type, cuerpo_funcion, sentencias_cuerpo_funcion, sentencia_cuerpo_funcion, sentencia_for, sentencia_do_while, sentencia_if,
				sentencia_else_if, sentencia_else, sentencia_consola, cuerpo_nuevo_tipo, sentencias_cuerpo_nuevo_tipo, declaracion_variables_nuevo_tipo,
				parametros, lista_parametros, forma_de_paso, sentencia_asignacion, receptor_asignacion, sentencia_llamado_funcion, llamado_funcion,
				argumentos, lista_argumentos, expresion, operador_aritmetico, operador_aritmetico_suma, operador_aritmetico_multiplicacion, operador_logico,
				operador_relacional, operador_negacion, operador_distinto, propiedad, cadena_propiedades, fin_linea, termino, tipo_dato;

precedence left OP_OR;
precedence left OP_AND;
precedence left OP_SUMA, OP_RESTA;
precedence left OP_MULTIPLICACION, OP_DIVISION;
precedence left OP_MENOR_QUE, OP_MENOR_IGUAL_QUE, OP_MAYOR_QUE, OP_MAYOR_IGUAL_QUE, OP_IGUAL;

inicio_programa						::=	raiz;

raiz								::=	fin_linea sentencias_principales
										| sentencias_principales
										| ;

sentencias_principales				::=	sentencia_principal
										| sentencias_principales sentencia_principal;

sentencia_principal 				::=	declaracion_variables fin_linea
										| declaracion_sub fin_linea
										| declaracion_funcion fin_linea
										| declaracion_type fin_linea;

/*TODO: Gramatica para Dim a, b, c As Integer*/
declaracion_variables				::=	DIM IDENTIFICADOR AS tipo_dato;

declaracion_sub						::=	SUB IDENTIFICADOR parametros fin_linea cuerpo_funcion END SUB;

declaracion_funcion					::=	FUNCTION IDENTIFICADOR parametros AS tipo_dato fin_linea cuerpo_funcion END FUNCTION;

declaracion_type					::=	TYPE IDENTIFICADOR fin_linea cuerpo_nuevo_tipo END TYPE;

cuerpo_funcion						::=	sentencias_cuerpo_funcion
										| ;

sentencias_cuerpo_funcion			::=	sentencia_cuerpo_funcion 
										| sentencias_cuerpo_funcion sentencia_cuerpo_funcion;

sentencia_cuerpo_funcion 			::=	declaracion_variables fin_linea
										| sentencia_for fin_linea
										| sentencia_do_while fin_linea
										| sentencia_if fin_linea
										| sentencia_consola fin_linea
										| sentencia_llamado_funcion fin_linea
										| sentencia_asignacion fin_linea;

sentencia_for						::=	FOR IDENTIFICADOR OP_IGUAL expresion TO expresion fin_linea cuerpo_funcion NEXT IDENTIFICADOR;

sentencia_do_while					::=	DO WHILE expresion fin_linea cuerpo_funcion LOOP;

sentencia_if 						::=	IF expresion THEN fin_linea cuerpo_funcion sentencia_else_if sentencia_else END IF;

sentencia_else_if					::=	ELSE_IF expresion THEN fin_linea cuerpo_funcion sentencia_else_if
										| ;

sentencia_else 						::=	ELSE fin_linea cuerpo_funcion
										| ;

sentencia_consola					::=	WRITE PAR_IZQ termino PAR_DER
										| READ PAR_IZQ termino PAR_DER;

cuerpo_nuevo_tipo					::=	sentencias_cuerpo_nuevo_tipo
										| ;

sentencias_cuerpo_nuevo_tipo		::=	declaracion_variables_nuevo_tipo fin_linea
										| sentencias_cuerpo_nuevo_tipo declaracion_variables_nuevo_tipo;

declaracion_variables_nuevo_tipo	::=	IDENTIFICADOR AS tipo_dato;

parametros							::=	PAR_IZQ PAR_DER
										| PAR_IZQ lista_parametros PAR_DER;

lista_parametros					::=	forma_de_paso IDENTIFICADOR AS tipo_dato
										| lista_parametros COMA forma_de_paso IDENTIFICADOR AS tipo_dato;

forma_de_paso 						::=	BYVAL
										| BYREF;
/*
sentencia_asignacion				::=	receptor_asignacion OP_IGUAL expresion
										| receptor_asignacion OP_IGUAL receptor_asignacion;
*/
receptor_asignacion					::=	IDENTIFICADOR
										| propiedad;

sentencia_llamado_funcion			::=	CALL llamado_funcion;

llamado_funcion 					::=	IDENTIFICADOR argumentos;

argumentos							::=	PAR_IZQ PAR_DER
										| PAR_IZQ lista_argumentos PAR_DER;

lista_argumentos					::=	expresion
										| lista_argumentos COMA expresion;

expresion							::=	expresion operador_aritmetico expresion
										| expresion operador_relacional expresion
										| expresion operador_logico expresion
										| PAR_IZQ expresion PAR_DER
										| OP_NOT expresion
										| operador_negacion expresion
										| termino;

operador_aritmetico					::=	operador_aritmetico_suma
										| operador_aritmetico_multiplicacion;

operador_aritmetico_suma			::=	OP_SUMA
										| OP_RESTA;

operador_aritmetico_multiplicacion	::=	OP_MULTIPLICACION
										| OP_DIVISION;

operador_relacional					::=	OP_MAYOR_QUE
										| OP_MENOR_QUE
										| OP_MAYOR_IGUAL_QUE
										| OP_MENOR_IGUAL_QUE
										| operador_distinto;

operador_logico						::=	OP_AND
										| OP_OR;

operador_negacion					::=	OP_RESTA;

operador_distinto					::=	OP_MENOR_QUE OP_MAYOR_QUE;

propiedad							::=	IDENTIFICADOR cadena_propiedades;

cadena_propiedades					::=	PUNTO IDENTIFICADOR
										| PUNTO IDENTIFICADOR cadena_propiedades;

fin_linea 							::=	FIN_LINEA fin_linea
										| FIN_LINEA;

termino								::=	receptor_asignacion
										| ENTERO_LITERAL
										| REAL_LITERAL
										| CARACTER_LITERAL
										| CADENA_LITERAL
										| BOOLEAN_LITERAL
										| llamado_funcion;

tipo_dato							::=	ENTERO
										| REAL
										| CADENA
										| CARACTER
										| BOOLEAN;