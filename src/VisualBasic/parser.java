
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 13 20:58:36 CST 2016
//----------------------------------------------------

package VisualBasic;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 13 20:58:36 CST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\002\000\002\004\003" +
    "\000\002\004\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\006\006\000\002" +
    "\007\011\000\002\010\013\000\002\011\010\000\002\012" +
    "\003\000\002\012\002\000\002\013\003\000\002\013\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\015\014\000\002\016\010\000\002\017" +
    "\013\000\002\020\010\000\002\020\002\000\002\021\005" +
    "\000\002\021\002\000\002\022\006\000\002\022\006\000" +
    "\002\023\003\000\002\023\002\000\002\024\004\000\002" +
    "\024\004\000\002\025\005\000\002\026\004\000\002\026" +
    "\005\000\002\027\006\000\002\027\010\000\002\030\003" +
    "\000\002\030\003\000\002\032\003\000\002\032\003\000" +
    "\002\033\004\000\002\034\004\000\002\035\004\000\002" +
    "\035\005\000\002\036\003\000\002\036\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\004\000\002\037\004\000\002\037\003\000" +
    "\002\040\003\000\002\040\003\000\002\041\003\000\002" +
    "\041\003\000\002\042\003\000\002\042\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\043\003\000\002\043\003\000" +
    "\002\045\003\000\002\046\004\000\002\047\004\000\002" +
    "\050\004\000\002\050\005\000\002\051\004\000\002\051" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\016\002\ufffd\013\015\014\004\020\014\021" +
    "\016\061\021\001\002\000\004\070\270\001\002\000\004" +
    "\002\267\001\002\000\004\061\021\001\002\000\004\061" +
    "\021\001\002\000\014\002\ufffc\013\ufffc\014\ufffc\020\ufffc" +
    "\021\ufffc\001\002\000\004\061\021\001\002\000\004\002" +
    "\001\001\002\000\004\061\021\001\002\000\004\070\255" +
    "\001\002\000\004\070\241\001\002\000\004\070\025\001" +
    "\002\000\012\013\015\014\004\020\014\021\016\001\002" +
    "\000\014\002\ufffe\013\015\014\004\020\014\021\016\001" +
    "\002\000\046\002\uffb1\004\uffb1\005\uffb1\013\uffb1\014\uffb1" +
    "\020\uffb1\021\uffb1\023\uffb1\042\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\052\uffb1\053\uffb1\054\uffb1\061\021\070\uffb1" +
    "\001\002\000\044\002\uffb2\004\uffb2\005\uffb2\013\uffb2\014" +
    "\uffb2\020\uffb2\021\uffb2\023\uffb2\042\uffb2\044\uffb2\045\uffb2" +
    "\046\uffb2\047\uffb2\052\uffb2\053\uffb2\054\uffb2\070\uffb2\001" +
    "\002\000\014\002\ufffb\013\ufffb\014\ufffb\020\ufffb\021\ufffb" +
    "\001\002\000\014\002\uffff\013\015\014\004\020\014\021" +
    "\016\001\002\000\004\062\027\001\002\000\004\015\053" +
    "\001\002\000\010\024\030\025\031\063\034\001\002\000" +
    "\004\070\uffd4\001\002\000\004\070\uffd5\001\002\000\006" +
    "\057\045\063\046\001\002\000\004\070\035\001\002\000" +
    "\006\015\uffd9\061\uffd9\001\002\000\004\015\036\001\002" +
    "\000\014\006\043\007\040\010\042\011\041\012\044\001" +
    "\002\000\006\057\uffd7\063\uffd7\001\002\000\014\046\uffa8" +
    "\057\uffa8\061\uffa8\063\uffa8\070\uffa8\001\002\000\014\046" +
    "\uffa6\057\uffa6\061\uffa6\063\uffa6\070\uffa6\001\002\000\014" +
    "\046\uffa5\057\uffa5\061\uffa5\063\uffa5\070\uffa5\001\002\000" +
    "\014\046\uffa9\057\uffa9\061\uffa9\063\uffa9\070\uffa9\001\002" +
    "\000\014\046\uffa7\057\uffa7\061\uffa7\063\uffa7\070\uffa7\001" +
    "\002\000\006\024\030\025\031\001\002\000\006\015\uffd8" +
    "\061\uffd8\001\002\000\004\070\050\001\002\000\004\015" +
    "\051\001\002\000\014\006\043\007\040\010\042\011\041" +
    "\012\044\001\002\000\006\057\uffd6\063\uffd6\001\002\000" +
    "\014\006\043\007\040\010\042\011\041\012\044\001\002" +
    "\000\004\061\021\001\002\000\022\004\070\005\056\014" +
    "\004\023\074\042\065\046\ufff1\047\057\054\071\001\002" +
    "\000\004\062\236\001\002\000\004\070\225\001\002\000" +
    "\004\061\021\001\002\000\032\004\070\005\056\014\004" +
    "\023\074\042\065\044\ufff2\045\ufff2\046\ufff2\047\057\052" +
    "\ufff2\053\ufff2\054\071\001\002\000\004\061\021\001\002" +
    "\000\004\061\021\001\002\000\004\061\021\001\002\000" +
    "\024\034\111\036\105\062\107\064\112\065\104\066\123" +
    "\067\115\070\122\071\106\001\002\000\032\004\ufff0\005" +
    "\ufff0\014\ufff0\023\ufff0\042\ufff0\044\ufff0\045\ufff0\046\ufff0" +
    "\047\ufff0\052\ufff0\053\ufff0\054\ufff0\001\002\000\004\061" +
    "\021\001\002\000\004\062\173\001\002\000\004\055\166" +
    "\001\002\000\004\061\021\001\002\000\004\061\021\001" +
    "\002\000\004\070\100\001\002\000\004\046\076\001\002" +
    "\000\004\021\077\001\002\000\004\061\ufff4\001\002\000" +
    "\004\062\103\001\002\000\004\061\uffd1\001\002\000\040" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\043\uffd0\050\uffd0\057\uffd0" +
    "\061\uffd0\063\uffd0\001\002\000\026\034\111\036\105\062" +
    "\107\063\113\064\112\065\104\066\123\067\115\070\122" +
    "\071\106\001\002\000\040\026\uffae\027\uffae\030\uffae\031" +
    "\uffae\032\uffae\033\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\043\uffae\050\uffae\057\uffae\061\uffae\063\uffae\001\002\000" +
    "\024\034\uffb7\036\uffb7\062\uffb7\064\uffb7\065\uffb7\066\uffb7" +
    "\067\uffb7\070\uffb7\071\uffb7\001\002\000\040\026\uffab\027" +
    "\uffab\030\uffab\031\uffab\032\uffab\033\uffab\035\uffab\036\uffab" +
    "\037\uffab\040\uffab\043\uffab\050\uffab\057\uffab\061\uffab\063" +
    "\uffab\001\002\000\024\034\111\036\105\062\107\064\112" +
    "\065\104\066\123\067\115\070\122\071\106\001\002\000" +
    "\040\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\043\uffc5\050\uffc5\057" +
    "\uffc5\061\uffc5\063\uffc5\001\002\000\024\034\111\036\105" +
    "\062\107\064\112\065\104\066\123\067\115\070\122\071" +
    "\106\001\002\000\040\026\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\043" +
    "\uffaf\050\uffaf\057\uffaf\061\uffaf\063\uffaf\001\002\000\040" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\043\uffcf\050\uffcf\057\uffcf" +
    "\061\uffcf\063\uffcf\001\002\000\024\034\111\036\105\062" +
    "\107\064\112\065\104\066\123\067\115\070\122\071\106" +
    "\001\002\000\040\026\uffac\027\uffac\030\uffac\031\uffac\032" +
    "\uffac\033\uffac\035\uffac\036\uffac\037\uffac\040\uffac\043\uffac" +
    "\050\uffac\057\uffac\061\uffac\063\uffac\001\002\000\032\026" +
    "\133\027\142\030\130\031\147\032\143\033\146\035\136" +
    "\036\134\037\135\040\132\057\uffcd\063\uffcd\001\002\000" +
    "\040\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\040\uffd2\043\uffd2\050\uffd2\057" +
    "\uffd2\061\uffd2\063\uffd2\001\002\000\040\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\033\uffaa\035\uffaa\036\uffaa\037" +
    "\uffaa\040\uffaa\043\uffaa\050\uffaa\057\uffaa\061\uffaa\063\uffaa" +
    "\001\002\000\040\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\043\uffb0" +
    "\050\uffb0\057\uffb0\061\uffb0\063\uffb0\001\002\000\044\026" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\043\uffd3\050\uffd3\057\uffd3\060" +
    "\154\061\uffd3\062\103\063\uffd3\001\002\000\040\026\uffad" +
    "\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\043\uffad\050\uffad\057\uffad\061\uffad" +
    "\063\uffad\001\002\000\006\057\125\063\126\001\002\000" +
    "\024\034\111\036\105\062\107\064\112\065\104\066\123" +
    "\067\115\070\122\071\106\001\002\000\040\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\043\uffce\050\uffce\057\uffce\061\uffce\063" +
    "\uffce\001\002\000\032\026\133\027\142\030\130\031\147" +
    "\032\143\033\146\035\136\036\134\037\135\040\132\057" +
    "\uffcc\063\uffcc\001\002\000\024\034\uffbc\036\uffbc\062\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\001" +
    "\002\000\024\034\111\036\105\062\107\064\112\065\104" +
    "\066\123\067\115\070\122\071\106\001\002\000\024\034" +
    "\uffbf\036\uffbf\062\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf" +
    "\070\uffbf\071\uffbf\001\002\000\024\034\uffbe\036\uffbe\062" +
    "\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe" +
    "\001\002\000\024\034\uffc1\036\uffc1\062\uffc1\064\uffc1\065" +
    "\uffc1\066\uffc1\067\uffc1\070\uffc1\071\uffc1\001\002\000\024" +
    "\034\uffc0\036\uffc0\062\uffc0\064\uffc0\065\uffc0\066\uffc0\067" +
    "\uffc0\070\uffc0\071\uffc0\001\002\000\024\034\uffc2\036\uffc2" +
    "\062\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071" +
    "\uffc2\001\002\000\024\034\111\036\105\062\107\064\112" +
    "\065\104\066\123\067\115\070\122\071\106\001\002\000" +
    "\024\034\uffba\036\uffba\062\uffba\064\uffba\065\uffba\066\uffba" +
    "\067\uffba\070\uffba\071\uffba\001\002\000\024\034\uffc3\036" +
    "\uffc3\062\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3" +
    "\071\uffc3\001\002\000\026\026\151\034\uffbd\036\uffbd\062" +
    "\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd" +
    "\001\002\000\024\034\uffb9\036\uffb9\062\uffb9\064\uffb9\065" +
    "\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\001\002\000\024" +
    "\034\uffc4\036\uffc4\062\uffc4\064\uffc4\065\uffc4\066\uffc4\067" +
    "\uffc4\070\uffc4\071\uffc4\001\002\000\024\034\111\036\105" +
    "\062\107\064\112\065\104\066\123\067\115\070\122\071" +
    "\106\001\002\000\024\034\uffb8\036\uffb8\062\uffb8\064\uffb8" +
    "\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\001\002\000" +
    "\024\034\uffbb\036\uffbb\062\uffbb\064\uffbb\065\uffbb\066\uffbb" +
    "\067\uffbb\070\uffbb\071\uffbb\001\002\000\040\026\133\027" +
    "\142\030\130\031\147\032\143\033\146\035\136\036\134" +
    "\037\135\040\132\043\uffca\050\uffca\057\uffca\061\uffca\063" +
    "\uffca\001\002\000\024\034\uffb6\036\uffb6\062\uffb6\064\uffb6" +
    "\065\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6\001\002\000" +
    "\040\026\133\027\142\030\130\031\147\032\143\033\146" +
    "\035\136\036\134\037\135\040\132\043\uffcb\050\uffcb\057" +
    "\uffcb\061\uffcb\063\uffcb\001\002\000\040\026\133\027\142" +
    "\030\130\031\147\032\143\033\146\035\136\036\134\037" +
    "\135\040\132\043\uffc9\050\uffc9\057\uffc9\061\uffc9\063\uffc9" +
    "\001\002\000\004\070\156\001\002\000\040\026\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\043\uffb5\050\uffb5\057\uffb5\061\uffb5\063" +
    "\uffb5\001\002\000\042\026\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\043" +
    "\uffb4\050\uffb4\057\uffb4\060\154\061\uffb4\063\uffb4\001\002" +
    "\000\040\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\043\uffb3\050\uffb3" +
    "\057\uffb3\061\uffb3\063\uffb3\001\002\000\040\026\133\027" +
    "\142\030\130\031\147\032\143\033\146\035\136\036\134" +
    "\037\135\040\132\043\uffc6\050\uffc6\057\uffc6\061\uffc6\063" +
    "\uffc6\001\002\000\040\026\133\027\142\030\130\031\147" +
    "\032\143\033\146\035\136\036\134\037\135\040\132\043" +
    "\uffc7\050\uffc7\057\uffc7\061\uffc7\063\uffc7\001\002\000\030" +
    "\026\133\027\142\030\130\031\147\032\143\033\146\035" +
    "\136\036\134\037\135\040\132\063\163\001\002\000\040" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\043\uffc8\050\uffc8\057\uffc8" +
    "\061\uffc8\063\uffc8\001\002\000\032\004\uffe9\005\uffe9\014" +
    "\uffe9\023\uffe9\042\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\001\002\000\032\004\uffeb\005" +
    "\uffeb\014\uffeb\023\uffeb\042\uffeb\044\uffeb\045\uffeb\046\uffeb" +
    "\047\uffeb\052\uffeb\053\uffeb\054\uffeb\001\002\000\024\034" +
    "\111\036\105\062\107\064\112\065\104\066\123\067\115" +
    "\070\122\071\106\001\002\000\030\026\133\027\142\030" +
    "\130\031\147\032\143\033\146\035\136\036\134\037\135" +
    "\040\132\061\021\001\002\000\022\004\070\005\056\014" +
    "\004\023\074\042\065\047\057\053\ufff1\054\071\001\002" +
    "\000\004\053\172\001\002\000\004\061\uffe6\001\002\000" +
    "\016\064\112\065\104\066\123\067\115\070\122\071\106" +
    "\001\002\000\004\063\175\001\002\000\004\061\uffe0\001" +
    "\002\000\032\004\uffec\005\uffec\014\uffec\023\uffec\042\uffec" +
    "\044\uffec\045\uffec\046\uffec\047\uffec\052\uffec\053\uffec\054" +
    "\uffec\001\002\000\030\026\133\027\142\030\130\031\147" +
    "\032\143\033\146\035\136\036\134\037\135\040\132\043" +
    "\200\001\002\000\004\061\021\001\002\000\026\004\070" +
    "\005\056\014\004\023\074\042\065\044\ufff1\045\ufff1\046" +
    "\ufff1\047\057\054\071\001\002\000\010\044\uffe3\045\204" +
    "\046\uffe3\001\002\000\006\044\212\046\uffe1\001\002\000" +
    "\024\034\111\036\105\062\107\064\112\065\104\066\123" +
    "\067\115\070\122\071\106\001\002\000\030\026\133\027" +
    "\142\030\130\031\147\032\143\033\146\035\136\036\134" +
    "\037\135\040\132\043\206\001\002\000\004\061\021\001" +
    "\002\000\026\004\070\005\056\014\004\023\074\042\065" +
    "\044\ufff1\045\ufff1\046\ufff1\047\057\054\071\001\002\000" +
    "\010\044\uffe3\045\204\046\uffe3\001\002\000\006\044\uffe4" +
    "\046\uffe4\001\002\000\004\061\021\001\002\000\004\046" +
    "\214\001\002\000\004\042\215\001\002\000\004\061\uffe5" +
    "\001\002\000\022\004\070\005\056\014\004\023\074\042" +
    "\065\046\ufff1\047\057\054\071\001\002\000\004\046\uffe2" +
    "\001\002\000\032\004\uffe8\005\uffe8\014\uffe8\023\uffe8\042" +
    "\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\052\uffe8\053\uffe8" +
    "\054\uffe8\001\002\000\032\004\uffee\005\uffee\014\uffee\023" +
    "\uffee\042\uffee\044\uffee\045\uffee\046\uffee\047\uffee\052\uffee" +
    "\053\uffee\054\uffee\001\002\000\032\004\uffea\005\uffea\014" +
    "\uffea\023\uffea\042\uffea\044\uffea\045\uffea\046\uffea\047\uffea" +
    "\052\uffea\053\uffea\054\uffea\001\002\000\032\004\uffef\005" +
    "\uffef\014\uffef\023\uffef\042\uffef\044\uffef\045\uffef\046\uffef" +
    "\047\uffef\052\uffef\053\uffef\054\uffef\001\002\000\032\004" +
    "\uffed\005\uffed\014\uffed\023\uffed\042\uffed\044\uffed\045\uffed" +
    "\046\uffed\047\uffed\052\uffed\053\uffed\054\uffed\001\002\000" +
    "\004\041\226\001\002\000\024\034\111\036\105\062\107" +
    "\064\112\065\104\066\123\067\115\070\122\071\106\001" +
    "\002\000\030\026\133\027\142\030\130\031\147\032\143" +
    "\033\146\035\136\036\134\037\135\040\132\050\230\001" +
    "\002\000\024\034\111\036\105\062\107\064\112\065\104" +
    "\066\123\067\115\070\122\071\106\001\002\000\030\026" +
    "\133\027\142\030\130\031\147\032\143\033\146\035\136" +
    "\036\134\037\135\040\132\061\021\001\002\000\022\004" +
    "\070\005\056\014\004\023\074\042\065\047\057\052\ufff1" +
    "\054\071\001\002\000\004\052\234\001\002\000\004\070" +
    "\235\001\002\000\004\061\uffe7\001\002\000\016\064\112" +
    "\065\104\066\123\067\115\070\122\071\106\001\002\000" +
    "\004\063\240\001\002\000\004\061\uffdf\001\002\000\004" +
    "\061\021\001\002\000\006\046\uffdd\070\245\001\002\000" +
    "\004\061\021\001\002\000\006\046\uffde\070\245\001\002" +
    "\000\004\015\251\001\002\000\004\046\247\001\002\000" +
    "\004\013\250\001\002\000\004\061\ufff3\001\002\000\014" +
    "\006\043\007\040\010\042\011\041\012\044\001\002\000" +
    "\010\046\uffda\061\uffda\070\uffda\001\002\000\006\046\uffdb" +
    "\070\uffdb\001\002\000\006\046\uffdc\070\uffdc\001\002\000" +
    "\004\062\027\001\002\000\004\061\021\001\002\000\022" +
    "\004\070\005\056\014\004\023\074\042\065\046\ufff1\047" +
    "\057\054\071\001\002\000\004\046\261\001\002\000\004" +
    "\020\262\001\002\000\004\061\ufff5\001\002\000\014\002" +
    "\ufffa\013\ufffa\014\ufffa\020\ufffa\021\ufffa\001\002\000\014" +
    "\002\ufff8\013\ufff8\014\ufff8\020\ufff8\021\ufff8\001\002\000" +
    "\014\002\ufff9\013\ufff9\014\ufff9\020\ufff9\021\ufff9\001\002" +
    "\000\014\002\ufff7\013\ufff7\014\ufff7\020\ufff7\021\ufff7\001" +
    "\002\000\004\002\000\001\002\000\004\015\271\001\002" +
    "\000\014\006\043\007\040\010\042\011\041\012\044\001" +
    "\002\000\004\061\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\024\002\004\003\011\004\017\005\007\006" +
    "\012\007\006\010\010\011\005\051\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\265\001\001\000" +
    "\004\051\264\001\001\000\002\001\001\000\004\051\263" +
    "\001\001\000\002\001\001\000\004\051\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\023\005\007\006\012\007\006\010\010\011\005\001" +
    "\001\000\014\005\022\006\012\007\006\010\010\011\005" +
    "\001\001\000\004\051\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\022\006\012\007\006\010\010" +
    "\011\005\001\001\000\004\026\025\001\001\000\002\001" +
    "\001\000\006\027\031\030\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\051\001\001\000\002\001\001" +
    "\000\004\053\053\001\001\000\004\051\054\001\001\000" +
    "\026\006\062\012\074\013\060\014\065\015\057\016\066" +
    "\017\071\022\061\031\063\033\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\223\001\001\000\022" +
    "\006\062\014\222\015\057\016\066\017\071\022\061\031" +
    "\063\033\072\001\001\000\004\051\221\001\001\000\004" +
    "\051\220\001\001\000\004\051\217\001\001\000\016\032" +
    "\120\034\117\037\176\045\113\047\116\052\107\001\001" +
    "\000\002\001\001\000\004\051\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\164\001\001\000\004" +
    "\051\163\001\001\000\004\034\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\032" +
    "\120\034\117\036\123\037\115\045\113\047\116\052\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\032\120\034\117\037\161\045\113\047\116" +
    "\052\107\001\001\000\002\001\001\000\016\032\120\034" +
    "\117\037\160\045\113\047\116\052\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\032\120\034\117\037" +
    "\157\045\113\047\116\052\107\001\001\000\002\001\001" +
    "\000\016\040\136\041\143\042\140\043\130\044\144\046" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\101\050\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\032\120\034\117\037\126" +
    "\045\113\047\116\052\107\001\001\000\002\001\001\000" +
    "\016\040\136\041\143\042\140\043\130\044\144\046\137" +
    "\001\001\000\002\001\001\000\016\032\120\034\117\037" +
    "\152\045\113\047\116\052\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\032\120\034\117\037\151\045\113" +
    "\047\116\052\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\032\120\034\117\037\147\045\113\047\116\052" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\040\136\041\143\042\140\043\130\044\144\046\137\001" +
    "\001\000\002\001\001\000\016\040\136\041\143\042\140" +
    "\043\130\044\144\046\137\001\001\000\016\040\136\041" +
    "\143\042\140\043\130\044\144\046\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\156\001\001\000" +
    "\002\001\001\000\016\040\136\041\143\042\140\043\130" +
    "\044\144\046\137\001\001\000\016\040\136\041\143\042" +
    "\140\043\130\044\144\046\137\001\001\000\016\040\136" +
    "\041\143\042\140\043\130\044\144\046\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\032\120\034\117\037\166\045\113\047\116\052\107\001" +
    "\001\000\020\040\136\041\143\042\140\043\130\044\144" +
    "\046\137\051\167\001\001\000\026\006\062\012\170\013" +
    "\060\014\065\015\057\016\066\017\071\022\061\031\063" +
    "\033\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\032\120\034\117\047\116\052\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\040" +
    "\136\041\143\042\140\043\130\044\144\046\137\001\001" +
    "\000\004\051\200\001\001\000\026\006\062\012\201\013" +
    "\060\014\065\015\057\016\066\017\071\022\061\031\063" +
    "\033\072\001\001\000\004\020\202\001\001\000\004\021" +
    "\212\001\001\000\016\032\120\034\117\037\204\045\113" +
    "\047\116\052\107\001\001\000\016\040\136\041\143\042" +
    "\140\043\130\044\144\046\137\001\001\000\004\051\206" +
    "\001\001\000\026\006\062\012\207\013\060\014\065\015" +
    "\057\016\066\017\071\022\061\031\063\033\072\001\001" +
    "\000\004\020\210\001\001\000\002\001\001\000\004\051" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\006\062\012\216\013\060\014\065\015" +
    "\057\016\066\017\071\022\061\031\063\033\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\032\120\034\117\037\226\045\113\047" +
    "\116\052\107\001\001\000\016\040\136\041\143\042\140" +
    "\043\130\044\144\046\137\001\001\000\016\032\120\034" +
    "\117\037\230\045\113\047\116\052\107\001\001\000\020" +
    "\040\136\041\143\042\140\043\130\044\144\046\137\051" +
    "\231\001\001\000\026\006\062\012\232\013\060\014\065" +
    "\015\057\016\066\017\071\022\061\031\063\033\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\032\120\034\117\047\116\052\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\241\001\001" +
    "\000\010\023\245\024\243\025\242\001\001\000\004\051" +
    "\253\001\001\000\004\025\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\255\001\001\000\004\051" +
    "\256\001\001\000\026\006\062\012\257\013\060\014\065" +
    "\015\057\016\066\017\071\022\061\031\063\033\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\271\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	public boolean hay_error = false;
	public boolean hay_retorno = false;
	public String nombre_archivo;

	public ArrayList<Tipo> retorno = new ArrayList();
	public ArrayList<Integer> retorno_izq = new ArrayList();
	public ArrayList<Integer> retorno_der = new ArrayList();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipo_dato ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tipo_dato ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tipo_dato ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tipo_dato ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tipo_dato ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // termino ::= llamado_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // termino ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // termino ::= CADENA_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // termino ::= CARACTER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // termino ::= REAL_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // termino ::= ENTERO_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // termino ::= receptor_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // fin_linea ::= FIN_LINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_linea",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // fin_linea ::= FIN_LINEA fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_linea",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cadena_propiedades ::= PUNTO IDENTIFICADOR cadena_propiedades 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadena_propiedades",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cadena_propiedades ::= PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadena_propiedades",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // propiedad ::= IDENTIFICADOR cadena_propiedades 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("propiedad",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operador_distinto ::= OP_MENOR_QUE OP_MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_distinto",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operador_negacion ::= OP_RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_negacion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operador_logico ::= OP_OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operador_logico ::= OP_AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operador_relacional ::= operador_distinto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operador_relacional ::= OP_MENOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operador_relacional ::= OP_MAYOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operador_relacional ::= OP_MENOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operador_relacional ::= OP_MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operador_aritmetico_multiplicacion ::= OP_DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_multiplicacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operador_aritmetico_multiplicacion ::= OP_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_multiplicacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operador_aritmetico_suma ::= OP_RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_suma",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operador_aritmetico_suma ::= OP_SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_suma",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operador_aritmetico ::= operador_aritmetico_multiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operador_aritmetico ::= operador_aritmetico_suma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= operador_negacion expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= OP_NOT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresion operador_logico expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion operador_relacional expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion operador_aritmetico expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // lista_argumentos ::= lista_argumentos COMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_argumentos",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lista_argumentos ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_argumentos",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // argumentos ::= PAR_IZQ lista_argumentos PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // argumentos ::= PAR_IZQ PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // llamado_funcion ::= IDENTIFICADOR argumentos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia_llamado_funcion ::= CALL llamado_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_llamado_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // receptor_asignacion ::= propiedad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("receptor_asignacion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // receptor_asignacion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("receptor_asignacion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // forma_de_paso ::= BYREF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forma_de_paso",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // forma_de_paso ::= BYVAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forma_de_paso",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lista_parametros ::= lista_parametros COMA forma_de_paso IDENTIFICADOR AS tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lista_parametros ::= forma_de_paso IDENTIFICADOR AS tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros ::= PAR_IZQ lista_parametros PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros ::= PAR_IZQ PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion_variables_nuevo_tipo ::= IDENTIFICADOR AS tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables_nuevo_tipo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencias_cuerpo_nuevo_tipo ::= sentencias_cuerpo_nuevo_tipo declaracion_variables_nuevo_tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_nuevo_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencias_cuerpo_nuevo_tipo ::= declaracion_variables_nuevo_tipo fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_nuevo_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cuerpo_nuevo_tipo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_nuevo_tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cuerpo_nuevo_tipo ::= sentencias_cuerpo_nuevo_tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_nuevo_tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia_consola ::= READ PAR_IZQ termino PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia_consola ::= WRITE PAR_IZQ termino PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia_else ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia_else ::= ELSE fin_linea cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia_else_if ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia_else_if ::= ELSE_IF expresion THEN fin_linea cuerpo_funcion sentencia_else_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion sentencia_else_if sentencia_else END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia_do_while ::= DO WHILE expresion fin_linea cuerpo_funcion LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia_for ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia_cuerpo_funcion ::= sentencia_asignacion fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia_cuerpo_funcion ::= sentencia_llamado_funcion fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia_cuerpo_funcion ::= sentencia_consola fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia_cuerpo_funcion ::= sentencia_if fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia_cuerpo_funcion ::= sentencia_do_while fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia_cuerpo_funcion ::= sentencia_for fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia_cuerpo_funcion ::= declaracion_variables fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencias_cuerpo_funcion ::= sentencias_cuerpo_funcion sentencia_cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencias_cuerpo_funcion ::= sentencia_cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo_funcion ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpo_funcion ::= sentencias_cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion_type ::= TYPE IDENTIFICADOR fin_linea cuerpo_nuevo_tipo END TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_funcion ::= FUNCTION IDENTIFICADOR parametros AS tipo_dato fin_linea cuerpo_funcion END FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_sub ::= SUB IDENTIFICADOR parametros fin_linea cuerpo_funcion END SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_sub",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_variables ::= DIM IDENTIFICADOR AS tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia_principal ::= declaracion_type fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia_principal ::= declaracion_funcion fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia_principal ::= declaracion_sub fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia_principal ::= declaracion_variables fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencias_principales ::= sentencias_principales sentencia_principal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_principales",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias_principales ::= sentencia_principal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_principales",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // raiz ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("raiz",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // raiz ::= sentencias_principales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("raiz",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // raiz ::= fin_linea sentencias_principales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("raiz",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio_programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio_programa ::= raiz 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

