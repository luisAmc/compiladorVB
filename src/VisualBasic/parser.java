
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package VisualBasic;

import java_cup.runtime.*;
import java.io.File;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\257\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\002\000\002\003\003\000\002\003\005" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\007\000\002\056\002\000\002" +
    "\005\010\000\002\057\002\000\002\005\010\000\002\005" +
    "\010\000\002\006\012\000\002\060\002\000\002\006\013" +
    "\000\002\061\002\000\002\006\013\000\002\006\012\000" +
    "\002\007\012\000\002\062\002\000\002\007\013\000\002" +
    "\063\002\000\002\007\015\000\002\064\002\000\002\007" +
    "\013\000\002\007\012\000\002\010\011\000\002\065\002" +
    "\000\002\010\012\000\002\066\002\000\002\010\012\000" +
    "\002\010\011\000\002\011\003\000\002\011\002\000\002" +
    "\012\003\000\002\012\004\000\002\013\005\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\014\016\000\002\067\002\000\002\014\017\000\002" +
    "\070\002\000\002\014\017\000\002\071\002\000\002\014" +
    "\017\000\002\072\002\000\002\014\017\000\002\073\002" +
    "\000\002\014\017\000\002\074\002\000\002\014\017\000" +
    "\002\014\016\000\002\015\010\000\002\075\002\000\002" +
    "\015\011\000\002\015\010\000\002\016\013\000\002\076" +
    "\002\000\002\016\014\000\002\077\002\000\002\016\014" +
    "\000\002\016\013\000\002\016\011\000\002\016\012\000" +
    "\002\017\010\000\002\100\002\000\002\017\011\000\002" +
    "\017\010\000\002\020\005\000\002\021\006\000\002\101" +
    "\002\000\002\021\006\000\002\021\006\000\002\021\006" +
    "\000\002\102\002\000\002\021\007\000\002\021\006\000" +
    "\002\022\003\000\002\022\002\000\002\023\004\000\002" +
    "\023\004\000\002\024\005\000\002\025\004\000\002\025" +
    "\004\000\002\025\005\000\002\025\005\000\002\026\005" +
    "\000\002\026\006\000\002\103\002\000\002\026\007\000" +
    "\002\104\002\000\002\026\007\000\002\026\010\000\002" +
    "\105\002\000\002\026\011\000\002\106\002\000\002\026" +
    "\011\000\002\107\002\000\002\026\011\000\002\027\003" +
    "\000\002\027\003\000\002\030\005\000\002\030\005\000" +
    "\002\031\003\000\002\031\003\000\002\032\004\000\002" +
    "\032\004\000\002\033\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\005\000\002\034\005\000\002\035\003" +
    "\000\002\035\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\004\000\002" +
    "\036\004\000\002\036\003\000\002\037\003\000\002\037" +
    "\003\000\002\040\003\000\002\040\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\042\003\000\002\042\003\000\002\044" +
    "\003\000\002\045\004\000\002\045\004\000\002\046\004" +
    "\000\002\047\004\000\002\047\005\000\002\050\004\000" +
    "\002\050\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\002\000\002\054\003\000\002\054" +
    "\005\000\002\054\005\000\002\055\003\000\002\055\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0170\000\022\002\ufffe\013\uff58\014\uff58\016\005\017" +
    "\014\021\uff58\022\uff58\063\017\001\002\000\004\002\u0172" +
    "\001\002\000\012\013\uff5a\014\uff5a\021\uff5a\022\uff5a\001" +
    "\002\000\006\002\ufff8\063\ufff8\001\002\000\006\002\ufffa" +
    "\063\ufffa\001\002\000\006\002\ufffd\063\ufffd\001\002\000" +
    "\006\002\ufff9\063\ufff9\001\002\000\006\002\ufffb\063\ufffb" +
    "\001\002\000\012\013\027\014\025\021\024\022\026\001" +
    "\002\000\012\013\uff59\014\uff59\021\uff59\022\uff59\001\002" +
    "\000\016\013\uff58\014\uff58\016\005\017\014\021\uff58\022" +
    "\uff58\001\002\000\006\002\uffff\063\017\001\002\000\074" +
    "\003\uff69\004\uff69\005\uff69\013\uff69\014\uff69\016\uff69\017" +
    "\uff69\021\uff69\022\uff69\024\uff69\035\uff69\037\uff69\044\uff69" +
    "\046\uff69\047\uff69\050\uff69\051\uff69\054\uff69\055\uff69\056" +
    "\uff69\063\017\064\uff69\066\uff69\067\uff69\070\uff69\071\uff69" +
    "\072\uff69\073\uff69\074\uff69\001\002\000\072\003\uff6a\004" +
    "\uff6a\005\uff6a\013\uff6a\014\uff6a\016\uff6a\017\uff6a\021\uff6a" +
    "\022\uff6a\024\uff6a\035\uff6a\037\uff6a\044\uff6a\046\uff6a\047" +
    "\uff6a\050\uff6a\051\uff6a\054\uff6a\055\uff6a\056\uff6a\064\uff6a" +
    "\066\uff6a\067\uff6a\070\uff6a\071\uff6a\072\uff6a\073\uff6a\074" +
    "\uff6a\001\002\000\016\013\uff58\014\uff58\016\005\017\014" +
    "\021\uff58\022\uff58\001\002\000\006\002\ufffc\063\ufffc\001" +
    "\002\000\006\002\001\063\017\001\002\000\006\003\u0161" +
    "\072\u0162\001\002\000\006\003\u0151\072\u0153\001\002\000" +
    "\006\003\064\072\065\001\002\000\006\003\030\072\031" +
    "\001\002\000\004\063\uffe2\001\002\000\004\063\017\001" +
    "\002\000\010\003\uffa9\050\uffa9\072\035\001\002\000\004" +
    "\063\017\001\002\000\010\003\uffaa\050\uffaa\072\035\001" +
    "\002\000\004\015\045\001\002\000\006\003\037\050\040" +
    "\001\002\000\004\013\uffe0\001\002\000\006\003\041\013" +
    "\042\001\002\000\006\002\uffde\063\uffde\001\002\000\006" +
    "\002\uffe3\063\uffe3\001\002\000\004\013\044\001\002\000" +
    "\006\002\uffdf\063\uffdf\001\002\000\016\006\054\007\050" +
    "\010\052\011\051\012\053\072\047\001\002\000\012\003" +
    "\uffa6\050\uffa6\063\uffa6\072\uffa6\001\002\000\020\002\uff5b" +
    "\003\uff5b\050\uff5b\061\uff5b\063\uff5b\065\uff5b\072\uff5b\001" +
    "\002\000\020\002\uff5f\003\uff5f\050\uff5f\061\uff5f\063\uff5f" +
    "\065\uff5f\072\uff5f\001\002\000\020\002\uff5d\003\uff5d\050" +
    "\uff5d\061\uff5d\063\uff5d\065\uff5d\072\uff5d\001\002\000\020" +
    "\002\uff5c\003\uff5c\050\uff5c\061\uff5c\063\uff5c\065\uff5c\072" +
    "\uff5c\001\002\000\020\002\uff5e\003\uff5e\050\uff5e\061\uff5e" +
    "\063\uff5e\065\uff5e\072\uff5e\001\002\000\020\002\uff60\003" +
    "\uff60\050\uff60\061\uff60\063\uff60\065\uff60\072\uff60\001\002" +
    "\000\010\003\uffa7\050\uffa7\072\uffa7\001\002\000\010\003" +
    "\uffa8\050\uffa8\072\uffa8\001\002\000\004\063\017\001\002" +
    "\000\006\050\uffa9\072\035\001\002\000\004\050\062\001" +
    "\002\000\004\013\063\001\002\000\006\002\uffe1\063\uffe1" +
    "\001\002\000\004\064\uffea\001\002\000\004\064\067\001" +
    "\002\000\006\003\136\063\017\001\002\000\014\003\071" +
    "\025\070\026\072\065\076\072\073\001\002\000\006\003" +
    "\uff93\072\uff93\001\002\000\006\003\uffa4\063\uffa4\001\002" +
    "\000\006\003\uff94\072\uff94\001\002\000\004\015\134\001" +
    "\002\000\010\003\112\061\111\065\113\001\002\000\006" +
    "\003\077\072\100\001\002\000\006\003\uffa5\063\uffa5\001" +
    "\002\000\004\015\uff9f\001\002\000\006\003\102\015\101" +
    "\001\002\000\016\006\054\007\050\010\052\011\051\012" +
    "\053\072\047\001\002\000\016\006\uff9d\007\uff9d\010\uff9d" +
    "\011\uff9d\012\uff9d\072\uff9d\001\002\000\016\006\054\007" +
    "\050\010\052\011\051\012\053\072\047\001\002\000\010" +
    "\003\uff9c\061\uff9c\065\uff9c\001\002\000\010\003\uffa0\061" +
    "\uffa0\065\uffa0\001\002\000\004\015\107\001\002\000\016" +
    "\006\054\007\050\010\052\011\051\012\053\072\047\001" +
    "\002\000\010\003\uff9e\061\uff9e\065\uff9e\001\002\000\006" +
    "\025\070\026\072\001\002\000\012\003\uffa2\025\uff9a\026" +
    "\uff9a\063\uffa2\001\002\000\006\003\uffa3\063\uffa3\001\002" +
    "\000\006\025\070\026\072\001\002\000\004\072\116\001" +
    "\002\000\004\015\117\001\002\000\016\006\054\007\050" +
    "\010\052\011\051\012\053\072\047\001\002\000\010\003" +
    "\uff99\061\uff99\065\uff99\001\002\000\006\003\122\072\123" +
    "\001\002\000\004\015\uff98\001\002\000\006\003\125\015" +
    "\124\001\002\000\016\006\054\007\050\010\052\011\051" +
    "\012\053\072\047\001\002\000\016\006\uff96\007\uff96\010" +
    "\uff96\011\uff96\012\uff96\072\uff96\001\002\000\016\006\054" +
    "\007\050\010\052\011\051\012\053\072\047\001\002\000" +
    "\010\003\uff95\061\uff95\065\uff95\001\002\000\010\003\uff9b" +
    "\061\uff9b\065\uff9b\001\002\000\004\015\132\001\002\000" +
    "\016\006\054\007\050\010\052\011\051\012\053\072\047" +
    "\001\002\000\010\003\uff97\061\uff97\065\uff97\001\002\000" +
    "\016\006\054\007\050\010\052\011\051\012\053\072\047" +
    "\001\002\000\010\003\uffa1\061\uffa1\065\uffa1\001\002\000" +
    "\016\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\072\uffe8" +
    "\001\002\000\054\003\uffdc\004\157\005\141\014\uff58\016" +
    "\005\017\014\024\145\035\153\037\176\044\156\050\uffdc" +
    "\051\177\056\161\064\166\066\162\067\152\070\174\071" +
    "\142\072\171\073\170\074\143\001\002\000\032\027\uff68" +
    "\030\uff68\031\uff68\032\uff68\033\uff68\034\uff68\036\uff68\037" +
    "\uff68\040\uff68\041\uff68\042\uff68\043\u0143\001\002\000\006" +
    "\003\u013b\064\u013c\001\002\000\050\003\uff64\027\uff64\030" +
    "\uff64\031\uff64\032\uff64\033\uff64\034\uff64\036\uff64\037\uff64" +
    "\040\uff64\041\uff64\042\uff64\043\uff64\045\uff64\052\uff64\053" +
    "\uff64\061\uff64\063\uff64\065\uff64\001\002\000\050\003\uff62" +
    "\027\uff62\030\uff62\031\uff62\032\uff62\033\uff62\034\uff62\036" +
    "\uff62\037\uff62\040\uff62\041\uff62\042\uff62\043\uff62\045\uff62" +
    "\052\uff62\053\uff62\061\uff62\063\uff62\065\uff62\001\002\000" +
    "\064\003\uffdb\004\uffdb\005\uffdb\014\uffdb\016\uffdb\017\uffdb" +
    "\024\uffdb\035\uffdb\037\uffdb\044\uffdb\046\uffdb\047\uffdb\050" +
    "\uffdb\051\uffdb\054\uffdb\055\uffdb\056\uffdb\064\uffdb\066\uffdb" +
    "\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\001" +
    "\002\000\006\003\u0138\072\u0139\001\002\000\004\063\017" +
    "\001\002\000\032\027\222\030\226\031\220\032\221\033" +
    "\211\034\213\036\217\037\230\040\232\041\223\042\224" +
    "\043\u0135\001\002\000\004\063\017\001\002\000\006\003" +
    "\u012e\050\u012f\001\002\000\050\003\uff66\027\uff66\030\uff66" +
    "\031\uff66\032\uff66\033\uff66\034\uff66\036\uff66\037\uff66\040" +
    "\uff66\041\uff66\042\uff66\043\uff66\045\uff66\052\uff66\053\uff66" +
    "\061\uff66\063\uff66\065\uff66\001\002\000\026\035\153\037" +
    "\176\064\166\066\162\067\152\070\174\071\142\072\171" +
    "\073\170\074\143\001\002\000\064\003\uffdd\004\157\005" +
    "\141\014\uff58\016\005\017\014\024\145\035\153\037\176" +
    "\044\156\046\uffdd\047\uffdd\050\uffdd\051\177\054\uffdd\055" +
    "\uffdd\056\161\064\166\066\162\067\152\070\174\071\142" +
    "\072\171\073\170\074\143\001\002\000\050\003\uff61\027" +
    "\uff61\030\uff61\031\uff61\032\uff61\033\uff61\034\uff61\036\uff61" +
    "\037\uff61\040\uff61\041\uff61\042\uff61\043\uff61\045\uff61\052" +
    "\uff61\053\uff61\061\uff61\063\uff61\065\uff61\001\002\000\026" +
    "\035\153\037\176\064\166\066\162\067\152\070\174\071" +
    "\142\072\171\073\170\074\143\001\002\000\006\003\373" +
    "\064\374\001\002\000\034\027\uff8f\030\uff8f\031\uff8f\032" +
    "\uff8f\033\uff8f\034\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f" +
    "\042\uff8f\043\uff8f\064\335\001\002\000\006\003\355\057" +
    "\356\001\002\000\050\003\uff67\027\uff67\030\uff67\031\uff67" +
    "\032\uff67\033\uff67\034\uff67\036\uff67\037\uff67\040\uff67\041" +
    "\uff67\042\uff67\043\uff67\045\uff67\052\uff67\053\uff67\061\uff67" +
    "\063\uff67\065\uff67\001\002\000\004\063\017\001\002\000" +
    "\026\035\153\037\176\064\166\066\162\067\152\070\174" +
    "\071\142\072\171\073\170\074\143\001\002\000\050\003" +
    "\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f" +
    "\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\045" +
    "\uff7f\052\uff7f\053\uff7f\061\uff7f\063\uff7f\065\uff7f\001\002" +
    "\000\026\035\153\037\176\064\166\066\162\067\152\070" +
    "\174\071\142\072\171\073\170\074\143\001\002\000\004" +
    "\063\017\001\002\000\050\003\uff63\027\uff63\030\uff63\031" +
    "\uff63\032\uff63\033\uff63\034\uff63\036\uff63\037\uff63\040\uff63" +
    "\041\uff63\042\uff63\043\uff63\045\uff63\052\uff63\053\uff63\061" +
    "\uff63\063\uff63\065\uff63\001\002\000\054\003\uff90\027\uff90" +
    "\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90\036\uff90\037" +
    "\uff90\040\uff90\041\uff90\042\uff90\043\uff90\045\uff90\052\uff90" +
    "\053\uff90\061\uff90\062\333\063\uff90\064\335\065\uff90\001" +
    "\002\000\004\014\025\001\002\000\004\063\017\001\002" +
    "\000\050\003\uff65\027\uff65\030\uff65\031\uff65\032\uff65\033" +
    "\uff65\034\uff65\036\uff65\037\uff65\040\uff65\041\uff65\042\uff65" +
    "\043\uff65\045\uff65\052\uff65\053\uff65\061\uff65\063\uff65\065" +
    "\uff65\001\002\000\004\063\017\001\002\000\026\035\uff70" +
    "\037\uff70\064\uff70\066\uff70\067\uff70\070\uff70\071\uff70\072" +
    "\uff70\073\uff70\074\uff70\001\002\000\006\003\202\072\203" +
    "\001\002\000\004\063\017\001\002\000\064\003\uffd8\004" +
    "\uffd8\005\uffd8\014\uffd8\016\uffd8\017\uffd8\024\uffd8\035\uffd8" +
    "\037\uffd8\044\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\054" +
    "\uffd8\055\uffd8\056\uffd8\064\uffd8\066\uffd8\067\uffd8\070\uffd8" +
    "\071\uffd8\072\uffd8\073\uffd8\074\uffd8\001\002\000\004\043" +
    "\uffd0\001\002\000\006\003\204\043\205\001\002\000\026" +
    "\035\uffce\037\uffce\064\uffce\066\uffce\067\uffce\070\uffce\071" +
    "\uffce\072\uffce\073\uffce\074\uffce\001\002\000\026\035\153" +
    "\037\176\064\166\066\162\067\152\070\174\071\142\072" +
    "\171\073\170\074\143\001\002\000\034\003\225\027\222" +
    "\030\226\031\220\032\221\033\211\034\213\036\217\037" +
    "\230\040\232\041\223\042\224\052\231\001\002\000\050" +
    "\003\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034" +
    "\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f" +
    "\045\uff8f\052\uff8f\053\uff8f\061\uff8f\063\uff8f\065\uff8f\001" +
    "\002\000\050\003\uff68\027\uff68\030\uff68\031\uff68\032\uff68" +
    "\033\uff68\034\uff68\036\uff68\037\uff68\040\uff68\041\uff68\042" +
    "\uff68\043\uff68\045\uff68\052\uff68\053\uff68\061\uff68\063\uff68" +
    "\065\uff68\001\002\000\026\035\uff72\037\uff72\064\uff72\066" +
    "\uff72\067\uff72\070\uff72\071\uff72\072\uff72\073\uff72\074\uff72" +
    "\001\002\000\026\035\uff7d\037\uff7d\064\uff7d\066\uff7d\067" +
    "\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d\001\002" +
    "\000\026\035\uff71\037\uff71\064\uff71\066\uff71\067\uff71\070" +
    "\uff71\071\uff71\072\uff71\073\uff71\074\uff71\001\002\000\026" +
    "\035\uff7e\037\uff7e\064\uff7e\066\uff7e\067\uff7e\070\uff7e\071" +
    "\uff7e\072\uff7e\073\uff7e\074\uff7e\001\002\000\026\035\153" +
    "\037\176\064\166\066\162\067\152\070\174\071\142\072" +
    "\171\073\170\074\143\001\002\000\026\035\153\037\176" +
    "\064\166\066\162\067\152\070\174\071\142\072\171\073" +
    "\170\074\143\001\002\000\026\035\uff7c\037\uff7c\064\uff7c" +
    "\066\uff7c\067\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074" +
    "\uff7c\001\002\000\026\035\uff75\037\uff75\064\uff75\066\uff75" +
    "\067\uff75\070\uff75\071\uff75\072\uff75\073\uff75\074\uff75\001" +
    "\002\000\026\035\uff74\037\uff74\064\uff74\066\uff74\067\uff74" +
    "\070\uff74\071\uff74\072\uff74\073\uff74\074\uff74\001\002\000" +
    "\026\035\uff77\037\uff77\064\uff77\066\uff77\067\uff77\070\uff77" +
    "\071\uff77\072\uff77\073\uff77\074\uff77\001\002\000\026\035" +
    "\uff78\037\uff78\064\uff78\066\uff78\067\uff78\070\uff78\071\uff78" +
    "\072\uff78\073\uff78\074\uff78\001\002\000\026\035\uff7a\037" +
    "\uff7a\064\uff7a\066\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a" +
    "\073\uff7a\074\uff7a\001\002\000\026\035\uffcc\037\uffcc\064" +
    "\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc" +
    "\074\uffcc\001\002\000\032\003\270\027\267\035\uff76\037" +
    "\uff76\064\uff76\066\uff76\067\uff76\070\uff76\071\uff76\072\uff76" +
    "\073\uff76\074\uff76\001\002\000\026\035\uff73\037\uff73\064" +
    "\uff73\066\uff73\067\uff73\070\uff73\071\uff73\072\uff73\073\uff73" +
    "\074\uff73\001\002\000\026\035\uff7b\037\uff7b\064\uff7b\066" +
    "\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b\073\uff7b\074\uff7b" +
    "\001\002\000\026\035\153\037\176\064\166\066\162\067" +
    "\152\070\174\071\142\072\171\073\170\074\143\001\002" +
    "\000\026\035\uff79\037\uff79\064\uff79\066\uff79\067\uff79\070" +
    "\uff79\071\uff79\072\uff79\073\uff79\074\uff79\001\002\000\026" +
    "\035\153\037\176\064\166\066\162\067\152\070\174\071" +
    "\142\072\171\073\170\074\143\001\002\000\050\003\uff83" +
    "\027\222\030\226\031\220\032\221\033\211\034\213\036" +
    "\217\037\230\040\232\041\223\042\224\043\uff83\045\uff83" +
    "\052\uff83\053\uff83\061\uff83\063\uff83\065\uff83\001\002\000" +
    "\034\003\237\027\222\030\226\031\220\032\221\033\211" +
    "\034\213\036\217\037\230\040\232\041\223\042\224\053" +
    "\236\001\002\000\010\003\250\066\243\067\241\001\002" +
    "\000\006\066\uffca\067\uffca\001\002\000\006\066\243\067" +
    "\241\001\002\000\004\063\uff53\001\002\000\004\063\017" +
    "\001\002\000\004\063\uff54\001\002\000\052\004\157\005" +
    "\141\014\uff58\016\005\017\014\024\145\035\153\037\176" +
    "\044\156\051\177\054\uffdc\056\161\064\166\066\162\067" +
    "\152\070\174\071\142\072\171\073\170\074\143\001\002" +
    "\000\004\054\246\001\002\000\004\072\247\001\002\000" +
    "\004\063\uffc9\001\002\000\004\063\uffc8\001\002\000\004" +
    "\063\017\001\002\000\054\003\uffdc\004\157\005\141\014" +
    "\uff58\016\005\017\014\024\145\035\153\037\176\044\156" +
    "\051\177\054\uffdc\056\161\064\166\066\162\067\152\070" +
    "\174\071\142\072\171\073\170\074\143\001\002\000\006" +
    "\003\254\054\255\001\002\000\004\072\uffc6\001\002\000" +
    "\006\003\256\072\257\001\002\000\004\063\uffc4\001\002" +
    "\000\004\063\uffd1\001\002\000\004\072\261\001\002\000" +
    "\004\063\uffc5\001\002\000\004\063\017\001\002\000\052" +
    "\004\157\005\141\014\uff58\016\005\017\014\024\145\035" +
    "\153\037\176\044\156\051\177\054\uffdc\056\161\064\166" +
    "\066\162\067\152\070\174\071\142\072\171\073\170\074" +
    "\143\001\002\000\004\054\265\001\002\000\004\072\266" +
    "\001\002\000\004\063\uffc7\001\002\000\026\035\uff6f\037" +
    "\uff6f\064\uff6f\066\uff6f\067\uff6f\070\uff6f\071\uff6f\072\uff6f" +
    "\073\uff6f\074\uff6f\001\002\000\026\035\uff6e\037\uff6e\064" +
    "\uff6e\066\uff6e\067\uff6e\070\uff6e\071\uff6e\072\uff6e\073\uff6e" +
    "\074\uff6e\001\002\000\026\035\153\037\176\064\166\066" +
    "\162\067\152\070\174\071\142\072\171\073\170\074\143" +
    "\001\002\000\032\027\222\030\226\031\220\032\221\033" +
    "\211\034\213\036\217\037\230\040\232\041\223\042\224" +
    "\053\273\001\002\000\006\066\243\067\241\001\002\000" +
    "\004\063\017\001\002\000\052\004\157\005\141\014\uff58" +
    "\016\005\017\014\024\145\035\153\037\176\044\156\051" +
    "\177\054\uffdc\056\161\064\166\066\162\067\152\070\174" +
    "\071\142\072\171\073\170\074\143\001\002\000\004\054" +
    "\277\001\002\000\004\072\300\001\002\000\004\063\uffcb" +
    "\001\002\000\050\003\uff84\027\222\030\226\031\220\032" +
    "\221\033\211\034\213\036\217\037\230\040\232\041\223" +
    "\042\224\043\uff84\045\uff84\052\uff84\053\uff84\061\uff84\063" +
    "\uff84\065\uff84\001\002\000\050\003\uff85\027\222\030\226" +
    "\031\220\032\221\033\211\034\213\036\217\037\230\040" +
    "\232\041\223\042\224\043\uff85\045\uff85\052\uff85\053\uff85" +
    "\061\uff85\063\uff85\065\uff85\001\002\000\026\035\153\037" +
    "\176\064\166\066\162\067\152\070\174\071\142\072\171" +
    "\073\170\074\143\001\002\000\032\027\222\030\226\031" +
    "\220\032\221\033\211\034\213\036\217\037\230\040\232" +
    "\041\223\042\224\052\305\001\002\000\026\035\153\037" +
    "\176\064\166\066\162\067\152\070\174\071\142\072\171" +
    "\073\170\074\143\001\002\000\032\027\222\030\226\031" +
    "\220\032\221\033\211\034\213\036\217\037\230\040\232" +
    "\041\223\042\224\053\307\001\002\000\006\066\243\067" +
    "\241\001\002\000\004\063\017\001\002\000\052\004\157" +
    "\005\141\014\uff58\016\005\017\014\024\145\035\153\037" +
    "\176\044\156\051\177\054\uffdc\056\161\064\166\066\162" +
    "\067\152\070\174\071\142\072\171\073\170\074\143\001" +
    "\002\000\004\054\313\001\002\000\004\072\314\001\002" +
    "\000\004\063\uffcd\001\002\000\004\043\316\001\002\000" +
    "\026\035\153\037\176\064\166\066\162\067\152\070\174" +
    "\071\142\072\171\073\170\074\143\001\002\000\032\027" +
    "\222\030\226\031\220\032\221\033\211\034\213\036\217" +
    "\037\230\040\232\041\223\042\224\052\320\001\002\000" +
    "\026\035\153\037\176\064\166\066\162\067\152\070\174" +
    "\071\142\072\171\073\170\074\143\001\002\000\032\027" +
    "\222\030\226\031\220\032\221\033\211\034\213\036\217" +
    "\037\230\040\232\041\223\042\224\053\322\001\002\000" +
    "\006\066\243\067\241\001\002\000\004\063\017\001\002" +
    "\000\052\004\157\005\141\014\uff58\016\005\017\014\024" +
    "\145\035\153\037\176\044\156\051\177\054\uffdc\056\161" +
    "\064\166\066\162\067\152\070\174\071\142\072\171\073" +
    "\170\074\143\001\002\000\004\054\326\001\002\000\004" +
    "\072\327\001\002\000\004\063\uffcf\001\002\000\064\003" +
    "\uffd6\004\uffd6\005\uffd6\014\uffd6\016\uffd6\017\uffd6\024\uffd6" +
    "\035\uffd6\037\uffd6\044\uffd6\046\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\064\uffd6\066\uffd6\067\uffd6" +
    "\070\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\001\002\000" +
    "\064\003\uffd4\004\uffd4\005\uffd4\014\uffd4\016\uffd4\017\uffd4" +
    "\024\uffd4\035\uffd4\037\uffd4\044\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\054\uffd4\055\uffd4\056\uffd4\064\uffd4\066\uffd4" +
    "\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\001" +
    "\002\000\052\003\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d" +
    "\033\uff6d\034\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042" +
    "\uff6d\043\uff6d\045\uff6d\052\uff6d\053\uff6d\061\uff6d\063\uff6d" +
    "\064\uff6d\065\uff6d\001\002\000\004\072\346\001\002\000" +
    "\052\002\uff8c\003\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c" +
    "\033\uff8c\034\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042" +
    "\uff8c\043\uff8c\045\uff8c\052\uff8c\053\uff8c\061\uff8c\063\uff8c" +
    "\065\uff8c\001\002\000\032\003\340\035\153\037\176\064" +
    "\166\065\341\066\162\067\152\070\174\071\142\072\171" +
    "\073\170\074\143\001\002\000\036\003\uff87\027\222\030" +
    "\226\031\220\032\221\033\211\034\213\036\217\037\230" +
    "\040\232\041\223\042\224\061\344\065\uff87\001\002\000" +
    "\006\003\342\065\343\001\002\000\052\002\uff8a\003\uff8a" +
    "\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\036" +
    "\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\045\uff8a" +
    "\052\uff8a\053\uff8a\061\uff8a\063\uff8a\065\uff8a\001\002\000" +
    "\052\002\uff8b\003\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b" +
    "\033\uff8b\034\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042" +
    "\uff8b\043\uff8b\045\uff8b\052\uff8b\053\uff8b\061\uff8b\063\uff8b" +
    "\065\uff8b\001\002\000\052\002\uff88\003\uff88\027\uff88\030" +
    "\uff88\031\uff88\032\uff88\033\uff88\034\uff88\036\uff88\037\uff88" +
    "\040\uff88\041\uff88\042\uff88\043\uff88\045\uff88\052\uff88\053" +
    "\uff88\061\uff88\063\uff88\065\uff88\001\002\000\052\002\uff89" +
    "\003\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034" +
    "\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89" +
    "\045\uff89\052\uff89\053\uff89\061\uff89\063\uff89\065\uff89\001" +
    "\002\000\026\035\153\037\176\064\166\066\162\067\152" +
    "\070\174\071\142\072\171\073\170\074\143\001\002\000" +
    "\006\003\uff86\065\uff86\001\002\000\054\003\uff6c\027\uff6c" +
    "\030\uff6c\031\uff6c\032\uff6c\033\uff6c\034\uff6c\036\uff6c\037" +
    "\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\045\uff6c\052\uff6c" +
    "\053\uff6c\061\uff6c\062\333\063\uff6c\064\uff6c\065\uff6c\001" +
    "\002\000\052\003\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b" +
    "\033\uff6b\034\uff6b\036\uff6b\037\uff6b\040\uff6b\041\uff6b\042" +
    "\uff6b\043\uff6b\045\uff6b\052\uff6b\053\uff6b\061\uff6b\063\uff6b" +
    "\064\uff6b\065\uff6b\001\002\000\064\003\uffd2\004\uffd2\005" +
    "\uffd2\014\uffd2\016\uffd2\017\uffd2\024\uffd2\035\uffd2\037\uffd2" +
    "\044\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\064\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2" +
    "\072\uffd2\073\uffd2\074\uffd2\001\002\000\032\027\222\030" +
    "\226\031\220\032\221\033\211\034\213\036\217\037\230" +
    "\040\232\041\223\042\224\065\352\001\002\000\050\003" +
    "\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82" +
    "\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82\045" +
    "\uff82\052\uff82\053\uff82\061\uff82\063\uff82\065\uff82\001\002" +
    "\000\050\003\uff80\027\222\030\226\031\220\032\221\033" +
    "\211\034\213\036\217\037\230\040\232\041\223\042\224" +
    "\043\uff80\045\uff80\052\uff80\053\uff80\061\uff80\063\uff80\065" +
    "\uff80\001\002\000\064\003\uffd7\004\uffd7\005\uffd7\014\uffd7" +
    "\016\uffd7\017\uffd7\024\uffd7\035\uffd7\037\uffd7\044\uffd7\046" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\054\uffd7\055\uffd7\056\uffd7" +
    "\064\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7\073" +
    "\uffd7\074\uffd7\001\002\000\026\035\uffc2\037\uffc2\064\uffc2" +
    "\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074" +
    "\uffc2\001\002\000\026\035\153\037\176\064\166\066\162" +
    "\067\152\070\174\071\142\072\171\073\170\074\143\001" +
    "\002\000\032\027\222\030\226\031\220\032\221\033\211" +
    "\034\213\036\217\037\230\040\232\041\223\042\224\063" +
    "\017\001\002\000\054\003\uffdc\004\157\005\141\014\uff58" +
    "\016\005\017\014\024\145\035\153\037\176\044\156\051" +
    "\177\055\uffdc\056\161\064\166\066\162\067\152\070\174" +
    "\071\142\072\171\073\170\074\143\001\002\000\006\003" +
    "\362\055\363\001\002\000\004\063\uffc0\001\002\000\004" +
    "\063\uffc3\001\002\000\026\035\153\037\176\064\166\066" +
    "\162\067\152\070\174\071\142\072\171\073\170\074\143" +
    "\001\002\000\032\027\222\030\226\031\220\032\221\033" +
    "\211\034\213\036\217\037\230\040\232\041\223\042\224" +
    "\063\017\001\002\000\052\004\157\005\141\014\uff58\016" +
    "\005\017\014\024\145\035\153\037\176\044\156\051\177" +
    "\055\uffdc\056\161\064\166\066\162\067\152\070\174\071" +
    "\142\072\171\073\170\074\143\001\002\000\004\055\370" +
    "\001\002\000\004\063\uffc1\001\002\000\004\063\017\001" +
    "\002\000\064\003\uffd9\004\uffd9\005\uffd9\014\uffd9\016\uffd9" +
    "\017\uffd9\024\uffd9\035\uffd9\037\uffd9\044\uffd9\046\uffd9\047" +
    "\uffd9\050\uffd9\051\uffd9\054\uffd9\055\uffd9\056\uffd9\064\uffd9" +
    "\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074" +
    "\uffd9\001\002\000\004\065\uffb1\001\002\000\020\066\162" +
    "\067\152\070\174\071\142\072\171\073\170\074\143\001" +
    "\002\000\006\003\376\065\377\001\002\000\004\063\uffaf" +
    "\001\002\000\004\063\uffb2\001\002\000\004\065\u0101\001" +
    "\002\000\004\063\uffb0\001\002\000\034\003\u0104\027\222" +
    "\030\226\031\220\032\221\033\211\034\213\036\217\037" +
    "\230\040\232\041\223\042\224\045\u0103\001\002\000\004" +
    "\063\017\001\002\000\004\063\uffbe\001\002\000\004\063" +
    "\017\001\002\000\052\004\157\005\141\014\uff58\016\005" +
    "\017\014\024\145\035\153\037\176\044\156\047\uffdc\051" +
    "\177\056\161\064\166\066\162\067\152\070\174\071\142" +
    "\072\171\073\170\074\143\001\002\000\004\047\u0109\001" +
    "\002\000\004\046\u0116\001\002\000\026\035\153\037\176" +
    "\064\166\066\162\067\152\070\174\071\142\072\171\073" +
    "\170\074\143\001\002\000\034\003\u010c\027\222\030\226" +
    "\031\220\032\221\033\211\034\213\036\217\037\230\040" +
    "\232\041\223\042\224\045\u010b\001\002\000\004\063\017" +
    "\001\002\000\004\063\uffb6\001\002\000\004\063\017\001" +
    "\002\000\052\004\157\005\141\014\uff58\016\005\017\014" +
    "\024\145\035\153\037\176\044\156\047\uffdc\051\177\056" +
    "\161\064\166\066\162\067\152\070\174\071\142\072\171" +
    "\073\170\074\143\001\002\000\004\047\u0109\001\002\000" +
    "\010\046\uffb5\047\uffb5\050\uffb5\001\002\000\054\003\uffdc" +
    "\004\157\005\141\014\uff58\016\005\017\014\024\145\035" +
    "\153\037\176\044\156\047\uffdc\051\177\056\161\064\166" +
    "\066\162\067\152\070\174\071\142\072\171\073\170\074" +
    "\143\001\002\000\006\003\u0113\047\u0109\001\002\000\010" +
    "\046\uffb4\047\uffb4\050\uffb4\001\002\000\010\046\uffb7\047" +
    "\uffb7\050\uffb7\001\002\000\004\050\u0119\001\002\000\004" +
    "\063\017\001\002\000\054\003\uffdc\004\157\005\141\014" +
    "\uff58\016\005\017\014\024\145\035\153\037\176\044\156" +
    "\050\uffdc\051\177\056\161\064\166\066\162\067\152\070" +
    "\174\071\142\072\171\073\170\074\143\001\002\000\006" +
    "\003\uffb3\050\uffb3\001\002\000\004\044\u011a\001\002\000" +
    "\004\063\uffbd\001\002\000\056\004\157\005\141\014\uff58" +
    "\016\005\017\014\024\145\035\153\037\176\044\156\046" +
    "\uffdc\047\uffdc\050\uffdc\051\177\056\161\064\166\066\162" +
    "\067\152\070\174\071\142\072\171\073\170\074\143\001" +
    "\002\000\010\046\u0116\047\u0109\050\u011f\001\002\000\004" +
    "\050\u012a\001\002\000\006\046\u0116\047\u0109\001\002\000" +
    "\004\044\u0120\001\002\000\004\063\uffb9\001\002\000\006" +
    "\003\u0125\050\u0126\001\002\000\004\050\u0123\001\002\000" +
    "\004\003\u0124\001\002\000\004\063\uffba\001\002\000\004" +
    "\044\uffbc\001\002\000\004\044\u0127\001\002\000\004\063" +
    "\uffbf\001\002\000\004\044\u0129\001\002\000\004\063\uffbb" +
    "\001\002\000\004\044\u012b\001\002\000\004\063\uffb8\001" +
    "\002\000\064\003\uffda\004\uffda\005\uffda\014\uffda\016\uffda" +
    "\017\uffda\024\uffda\035\uffda\037\uffda\044\uffda\046\uffda\047" +
    "\uffda\050\uffda\051\uffda\054\uffda\055\uffda\056\uffda\064\uffda" +
    "\066\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073\uffda\074" +
    "\uffda\001\002\000\050\003\uff81\027\222\030\226\031\220" +
    "\032\221\033\211\034\213\036\217\037\230\040\232\041" +
    "\223\042\224\043\uff81\045\uff81\052\uff81\053\uff81\061\uff81" +
    "\063\uff81\065\uff81\001\002\000\004\022\uffe6\001\002\000" +
    "\006\003\u0130\022\u0131\001\002\000\006\002\uffe4\063\uffe4" +
    "\001\002\000\006\002\uffeb\063\uffeb\001\002\000\004\022" +
    "\u0133\001\002\000\006\002\uffe5\063\uffe5\001\002\000\064" +
    "\003\uffd5\004\uffd5\005\uffd5\014\uffd5\016\uffd5\017\uffd5\024" +
    "\uffd5\035\uffd5\037\uffd5\044\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\054\uffd5\055\uffd5\056\uffd5\064\uffd5\066\uffd5\067" +
    "\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\001\002" +
    "\000\026\035\153\037\176\064\166\066\162\067\152\070" +
    "\174\071\142\072\171\073\170\074\143\001\002\000\032" +
    "\027\222\030\226\031\220\032\221\033\211\034\213\036" +
    "\217\037\230\040\232\041\223\042\224\063\uff91\001\002" +
    "\000\064\003\uffd3\004\uffd3\005\uffd3\014\uffd3\016\uffd3\017" +
    "\uffd3\024\uffd3\035\uffd3\037\uffd3\044\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\054\uffd3\055\uffd3\056\uffd3\064\uffd3\066" +
    "\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3" +
    "\001\002\000\004\063\uff8d\001\002\000\004\064\335\001" +
    "\002\000\004\063\uff8e\001\002\000\020\066\uffad\067\uffad" +
    "\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad\001\002\000" +
    "\020\066\162\067\152\070\174\071\142\072\171\073\170" +
    "\074\143\001\002\000\006\003\u013e\065\u013f\001\002\000" +
    "\004\063\uffab\001\002\000\004\063\uffae\001\002\000\020" +
    "\066\162\067\152\070\174\071\142\072\171\073\170\074" +
    "\143\001\002\000\004\065\u0142\001\002\000\004\063\uffac" +
    "\001\002\000\026\035\153\037\176\064\166\066\162\067" +
    "\152\070\174\071\142\072\171\073\170\074\143\001\002" +
    "\000\032\027\222\030\226\031\220\032\221\033\211\034" +
    "\213\036\217\037\230\040\232\041\223\042\224\063\uff92" +
    "\001\002\000\016\006\054\007\050\010\052\011\051\012" +
    "\053\072\047\001\002\000\004\063\017\001\002\000\052" +
    "\004\157\005\141\014\uff58\016\005\017\014\024\145\035" +
    "\153\037\176\044\156\050\uffdc\051\177\056\161\064\166" +
    "\066\162\067\152\070\174\071\142\072\171\073\170\074" +
    "\143\001\002\000\004\050\u0149\001\002\000\004\022\u014a" +
    "\001\002\000\006\002\uffe7\063\uffe7\001\002\000\004\064" +
    "\067\001\002\000\004\063\017\001\002\000\052\004\157" +
    "\005\141\014\uff58\016\005\017\014\024\145\035\153\037" +
    "\176\044\156\050\uffdc\051\177\056\161\064\166\066\162" +
    "\067\152\070\174\071\142\072\171\073\170\074\143\001" +
    "\002\000\004\050\u014f\001\002\000\004\022\u0150\001\002" +
    "\000\006\002\uffe9\063\uffe9\001\002\000\004\015\ufff6\001" +
    "\002\000\006\003\u0158\015\u0157\001\002\000\010\003\uff57" +
    "\015\uff57\061\u0154\001\002\000\006\003\u0155\072\u0153\001" +
    "\002\000\006\003\uff55\015\uff55\001\002\000\006\003\uff56" +
    "\015\uff56\001\002\000\020\006\054\007\050\010\052\011" +
    "\051\012\053\020\u015b\072\047\001\002\000\016\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\072\ufff4\001\002\000" +
    "\016\006\054\007\050\010\052\011\051\012\053\072\047" +
    "\001\002\000\006\002\ufff3\063\ufff3\001\002\000\004\072" +
    "\u0139\001\002\000\006\002\ufff7\063\ufff7\001\002\000\006" +
    "\002\ufff2\063\ufff2\001\002\000\004\015\u015f\001\002\000" +
    "\016\006\054\007\050\010\052\011\051\012\053\072\047" +
    "\001\002\000\006\002\ufff5\063\ufff5\001\002\000\004\064" +
    "\ufff0\001\002\000\004\064\067\001\002\000\004\063\017" +
    "\001\002\000\054\003\uffdc\004\157\005\141\014\uff58\016" +
    "\005\017\014\024\145\035\153\037\176\044\156\050\uffdc" +
    "\051\177\056\161\064\166\066\162\067\152\070\174\071" +
    "\142\072\171\073\170\074\143\001\002\000\006\003\u0166" +
    "\050\u0167\001\002\000\004\021\uffee\001\002\000\006\003" +
    "\u0169\021\u0168\001\002\000\006\002\ufff1\063\ufff1\001\002" +
    "\000\006\002\uffec\063\uffec\001\002\000\004\021\u016b\001" +
    "\002\000\006\002\uffed\063\uffed\001\002\000\004\064\067" +
    "\001\002\000\004\063\017\001\002\000\052\004\157\005" +
    "\141\014\uff58\016\005\017\014\024\145\035\153\037\176" +
    "\044\156\050\uffdc\051\177\056\161\064\166\066\162\067" +
    "\152\070\174\071\142\072\171\073\170\074\143\001\002" +
    "\000\004\050\u0170\001\002\000\004\021\u0171\001\002\000" +
    "\006\002\uffef\063\uffef\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0170\000\024\002\003\003\015\004\007\005\011\006" +
    "\006\007\010\010\005\050\014\053\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\022\004" +
    "\007\005\011\006\006\007\010\010\005\053\012\001\001" +
    "\000\004\050\020\001\001\000\004\050\017\001\001\000" +
    "\002\001\001\000\016\004\021\005\011\006\006\007\010" +
    "\010\005\053\012\001\001\000\002\001\001\000\004\050" +
    "\020\001\001\000\002\001\001\000\004\054\u0151\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\056\001" +
    "\001\000\004\050\031\001\001\000\010\022\035\023\033" +
    "\024\032\001\001\000\004\050\055\001\001\000\004\024" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\057\001\001\000\010\022\060\023\033" +
    "\024\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\u014a\001\001\000\004\025\065" +
    "\001\001\000\004\050\136\001\001\000\006\026\073\027" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\103\105\001\001\000\002" +
    "\001\001\000\004\052\104\001\001\000\004\104\102\001" +
    "\001\000\004\052\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\107\001\001\000" +
    "\002\001\001\000\004\027\120\001\001\000\004\105\113" +
    "\001\001\000\002\001\001\000\004\027\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\106\130\001" +
    "\001\000\002\001\001\000\004\052\127\001\001\000\004" +
    "\107\125\001\001\000\004\052\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\132" +
    "\001\001\000\002\001\001\000\004\052\134\001\001\000" +
    "\002\001\001\000\004\063\u0144\001\001\000\044\005\177" +
    "\011\150\012\153\013\143\014\162\015\174\016\147\021" +
    "\172\030\166\031\137\032\145\033\154\036\146\044\163" +
    "\046\157\051\164\053\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\u0139\001\001\000\004\050\u0136\001" +
    "\001\000\016\037\214\040\213\041\211\042\232\043\215" +
    "\045\226\001\001\000\004\050\u0133\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\031\207\033\154\036\u012c" +
    "\044\163\046\206\051\164\001\001\000\040\005\177\013" +
    "\u012b\014\162\015\174\016\147\021\172\030\166\031\137" +
    "\032\145\033\154\036\146\044\163\046\157\051\164\053" +
    "\171\001\001\000\002\001\001\000\016\031\207\033\154" +
    "\036\u0101\044\163\046\206\051\164\001\001\000\002\001" +
    "\001\000\004\034\370\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\353\001\001\000\016\031\207\033" +
    "\154\036\352\044\163\046\206\051\164\001\001\000\002" +
    "\001\001\000\016\031\207\033\154\036\350\044\163\046" +
    "\206\051\164\001\001\000\004\050\347\001\001\000\002" +
    "\001\001\000\006\034\333\047\331\001\001\000\002\001" +
    "\001\000\004\050\330\001\001\000\002\001\001\000\004" +
    "\050\327\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\200\001\001\000\002\001\001\000\004\067\314" +
    "\001\001\000\002\001\001\000\004\070\302\001\001\000" +
    "\016\031\207\033\154\036\205\044\163\046\206\051\164" +
    "\001\001\000\016\037\214\040\213\041\211\042\232\043" +
    "\215\045\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\031\207\033\154\036\301\044\163" +
    "\046\206\051\164\001\001\000\016\031\207\033\154\036" +
    "\300\044\163\046\206\051\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\270\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\031\207\033\154\036\234\044\163\046\206\051\164" +
    "\001\001\000\002\001\001\000\016\031\207\033\154\036" +
    "\233\044\163\046\206\051\164\001\001\000\016\037\214" +
    "\040\213\041\211\042\232\043\215\045\226\001\001\000" +
    "\016\037\214\040\213\041\211\042\232\043\215\045\226" +
    "\001\001\000\004\055\250\001\001\000\004\072\237\001" +
    "\001\000\004\055\241\001\001\000\002\001\001\000\004" +
    "\050\243\001\001\000\002\001\001\000\044\005\177\011" +
    "\244\012\153\013\143\014\162\015\174\016\147\021\172" +
    "\030\166\031\137\032\145\033\154\036\146\044\163\046" +
    "\157\051\164\053\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\073\261\001\001\000" +
    "\004\050\251\001\001\000\044\005\177\011\252\012\153" +
    "\013\143\014\162\015\174\016\147\021\172\030\166\031" +
    "\137\032\145\033\154\036\146\044\163\046\157\051\164" +
    "\053\171\001\001\000\002\001\001\000\004\074\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\262\001" +
    "\001\000\044\005\177\011\263\012\153\013\143\014\162" +
    "\015\174\016\147\021\172\030\166\031\137\032\145\033" +
    "\154\036\146\044\163\046\157\051\164\053\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\031\207\033\154" +
    "\036\271\044\163\046\206\051\164\001\001\000\016\037" +
    "\214\040\213\041\211\042\232\043\215\045\226\001\001" +
    "\000\004\055\273\001\001\000\004\050\274\001\001\000" +
    "\044\005\177\011\275\012\153\013\143\014\162\015\174" +
    "\016\147\021\172\030\166\031\137\032\145\033\154\036" +
    "\146\044\163\046\157\051\164\053\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\037" +
    "\214\040\213\041\211\042\232\043\215\045\226\001\001" +
    "\000\016\037\214\040\213\041\211\042\232\043\215\045" +
    "\226\001\001\000\016\031\207\033\154\036\303\044\163" +
    "\046\206\051\164\001\001\000\016\037\214\040\213\041" +
    "\211\042\232\043\215\045\226\001\001\000\016\031\207" +
    "\033\154\036\305\044\163\046\206\051\164\001\001\000" +
    "\016\037\214\040\213\041\211\042\232\043\215\045\226" +
    "\001\001\000\004\055\307\001\001\000\004\050\310\001" +
    "\001\000\044\005\177\011\311\012\153\013\143\014\162" +
    "\015\174\016\147\021\172\030\166\031\137\032\145\033" +
    "\154\036\146\044\163\046\157\051\164\053\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\031\207\033\154\036\316\044\163" +
    "\046\206\051\164\001\001\000\016\037\214\040\213\041" +
    "\211\042\232\043\215\045\226\001\001\000\016\031\207" +
    "\033\154\036\320\044\163\046\206\051\164\001\001\000" +
    "\016\037\214\040\213\041\211\042\232\043\215\045\226" +
    "\001\001\000\004\055\322\001\001\000\004\050\323\001" +
    "\001\000\044\005\177\011\324\012\153\013\143\014\162" +
    "\015\174\016\147\021\172\030\166\031\137\032\145\033" +
    "\154\036\146\044\163\046\157\051\164\053\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\031\207\033\154\035" +
    "\336\036\335\044\163\046\206\051\164\001\001\000\016" +
    "\037\214\040\213\041\211\042\232\043\215\045\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\031\207\033" +
    "\154\035\344\036\335\044\163\046\206\051\164\001\001" +
    "\000\002\001\001\000\004\047\346\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\037\214\040\213\041\211" +
    "\042\232\043\215\045\226\001\001\000\002\001\001\000" +
    "\016\037\214\040\213\041\211\042\232\043\215\045\226" +
    "\001\001\000\002\001\001\000\004\075\363\001\001\000" +
    "\016\031\207\033\154\036\356\044\163\046\206\051\164" +
    "\001\001\000\020\037\214\040\213\041\211\042\232\043" +
    "\215\045\226\050\357\001\001\000\044\005\177\011\360" +
    "\012\153\013\143\014\162\015\174\016\147\021\172\030" +
    "\166\031\137\032\145\033\154\036\146\044\163\046\157" +
    "\051\164\053\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\031\207\033\154\036\364" +
    "\044\163\046\206\051\164\001\001\000\020\037\214\040" +
    "\213\041\211\042\232\043\215\045\226\050\365\001\001" +
    "\000\044\005\177\011\366\012\153\013\143\014\162\015" +
    "\174\016\147\021\172\030\166\031\137\032\145\033\154" +
    "\036\146\044\163\046\157\051\164\053\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\371\001\001" +
    "\000\002\001\001\000\004\101\377\001\001\000\012\031" +
    "\207\033\154\046\206\051\374\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\037\214\040\213\041\211\042\232" +
    "\043\215\045\226\001\001\000\004\050\u011a\001\001\000" +
    "\004\076\u0104\001\001\000\004\050\u0105\001\001\000\044" +
    "\005\177\011\u0106\012\153\013\143\014\162\015\174\016" +
    "\147\021\172\030\166\031\137\032\145\033\154\036\146" +
    "\044\163\046\157\051\164\053\171\001\001\000\004\017" +
    "\u0107\001\001\000\004\020\u0114\001\001\000\016\031\207" +
    "\033\154\036\u0109\044\163\046\206\051\164\001\001\000" +
    "\016\037\214\040\213\041\211\042\232\043\215\045\226" +
    "\001\001\000\004\050\u0110\001\001\000\004\100\u010c\001" +
    "\001\000\004\050\u010d\001\001\000\044\005\177\011\u010e" +
    "\012\153\013\143\014\162\015\174\016\147\021\172\030" +
    "\166\031\137\032\145\033\154\036\146\044\163\046\157" +
    "\051\164\053\171\001\001\000\004\017\u010f\001\001\000" +
    "\002\001\001\000\044\005\177\011\u0111\012\153\013\143" +
    "\014\162\015\174\016\147\021\172\030\166\031\137\032" +
    "\145\033\154\036\146\044\163\046\157\051\164\053\171" +
    "\001\001\000\004\017\u0113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\u0116\001\001" +
    "\000\044\005\177\011\u0117\012\153\013\143\014\162\015" +
    "\174\016\147\021\172\030\166\031\137\032\145\033\154" +
    "\036\146\044\163\046\157\051\164\053\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\005\177\011\u011b\012\153\013\143\014\162\015\174\016" +
    "\147\021\172\030\166\031\137\032\145\033\154\036\146" +
    "\044\163\046\157\051\164\053\171\001\001\000\006\017" +
    "\u011d\020\u011c\001\001\000\002\001\001\000\006\017\u0121" +
    "\020\u0120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\077\u0127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\037" +
    "\214\040\213\041\211\042\232\043\215\045\226\001\001" +
    "\000\004\064\u0131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\031\207\033\154\036\u0135\044" +
    "\163\046\206\051\164\001\001\000\016\037\214\040\213" +
    "\041\211\042\232\043\215\045\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\333\001\001\000\002" +
    "\001\001\000\004\102\u013f\001\001\000\012\031\207\033" +
    "\154\046\206\051\u013c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\031\207\033\154\046" +
    "\206\051\u0140\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\031\207\033\154\036\u0143\044\163\046\206\051" +
    "\164\001\001\000\016\037\214\040\213\041\211\042\232" +
    "\043\215\045\226\001\001\000\004\052\u0145\001\001\000" +
    "\004\050\u0146\001\001\000\044\005\177\011\u0147\012\153" +
    "\013\143\014\162\015\174\016\147\021\172\030\166\031" +
    "\137\032\145\033\154\036\146\044\163\046\157\051\164" +
    "\053\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\u014b\001\001\000\004\050\u014c" +
    "\001\001\000\044\005\177\011\u014d\012\153\013\143\014" +
    "\162\015\174\016\147\021\172\030\166\031\137\032\145" +
    "\033\154\036\146\044\163\046\157\051\164\053\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\u015d\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\u0155\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\u015b\001\001\000\004\057\u0158\001" +
    "\001\000\004\052\u0159\001\001\000\002\001\001\000\004" +
    "\033\u015c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\u015f\001\001\000\002\001\001" +
    "\000\004\060\u016b\001\001\000\004\025\u0162\001\001\000" +
    "\004\050\u0163\001\001\000\044\005\177\011\u0164\012\153" +
    "\013\143\014\162\015\174\016\147\021\172\030\166\031" +
    "\137\032\145\033\154\036\146\044\163\046\157\051\164" +
    "\053\171\001\001\000\002\001\001\000\004\061\u0169\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\u016c\001" +
    "\001\000\004\050\u016d\001\001\000\044\005\177\011\u016e" +
    "\012\153\013\143\014\162\015\174\016\147\021\172\030" +
    "\166\031\137\032\145\033\154\036\146\044\163\046\157" +
    "\051\164\053\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	@Override
	public void report_error(String message, Object info) {
		// if (!((Symbol)info).value.toString().equals("null")){
			if (info instanceof String)
				System.err.println(" " + info + " " + message + "\n");
			else {
				StringBuffer m = new StringBuffer("Error ");
				if (info instanceof java_cup.runtime.Symbol) {
					m.append(("(Se ha encontrado el token \"" + ((Symbol)info).value + "\" en la linea "
						+ ((Symbol)info).left + 1 + ", columna " + ((Symbol)info).right + 1) + ")");
				}
				if (message.equals("Couldn't repair and continue parse"))
					m.append(" : No existe una regla por los momentos para este token.");
				else
					m.append(" : " + message);
				System.err.println(m);
			}
		// }
	}
	@Override
	public void syntax_error(Symbol s){
		System.err.println( "(Se ha encontrado el token \"" + sym.terminalNames[s.sym] + "\" en la linea " + (s.left+1) + ", columna" + (s.right+1) + ")" ); 
        expected();
	}

	public void expected(){
		List<Integer> token_list = this.expected_token_ids();
		if (token_list.size() <= 0){
			token_list = this.expected_token_ids();
		}
		String expected_tokens = "";
		for (int i = 0 ; i < token_list.size(); i++){
			int id = token_list.get(i);
			if (id == 1){
				continue;
			}
			String terminal_name = sym.terminalNames[id];
			if (i == token_list.size() - 1){
				expected_tokens += terminal_name;
			}else{
				expected_tokens += terminal_name + " , ";
			}
		}
		System.err.println("Se esperaba alguno de los siguientes tokens:" + expected_tokens);
	};

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new RuntimeException("Fatal Syntax Error");
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio_programa ::= fin_linea sentencias_principales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio_programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio_programa ::= sentencias_principales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio_programa ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias_principales ::= sentencia_principal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_principales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias_principales ::= sentencias_principales fin_linea sentencia_principal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_principales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia_principal ::= declaracion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia_principal ::= declaracion_sub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia_principal ::= declaracion_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia_principal ::= declaracion_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_variables ::= visibilidad DIM lista_variables AS tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Object RESULT =null;
parser.report_error("declaracion_variables: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_variables ::= visibilidad DIM error NT$0 AS tipo_dato 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
parser.report_error("declaracion_variables: Se esperaba AS", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion_variables ::= visibilidad DIM lista_variables error NT$1 tipo_dato 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_variables ::= visibilidad DIM lista_variables AS NEW llamado_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion_sub ::= visibilidad SUB IDENTIFICADOR parametros fin_linea cuerpo_funcion END SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_sub",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              Object RESULT =null;
parser.report_error("declaracion_sub: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion_sub ::= visibilidad SUB error NT$2 parametros fin_linea cuerpo_funcion END SUB 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_sub",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$3 ::= 
            {
              Object RESULT =null;
parser.report_error("declaracion_sub: Se esperaba END", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion_sub ::= visibilidad SUB IDENTIFICADOR parametros fin_linea cuerpo_funcion error NT$3 SUB 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_sub",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion_sub ::= visibilidad SUB IDENTIFICADOR parametros fin_linea cuerpo_funcion END error 
            {
              Object RESULT =null;
		parser.report_error("declaracion_sub: Se esperaba SUB", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_sub",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion_funcion ::= visibilidad FUNCTION IDENTIFICADOR parametros fin_linea cuerpo_funcion END FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$4 ::= 
            {
              Object RESULT =null;
parser.report_error("declaracion_funcion: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion_funcion ::= visibilidad FUNCTION error NT$4 parametros fin_linea cuerpo_funcion END FUNCTION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$5 ::= 
            {
              Object RESULT =null;
parser.report_error("declaracion_funcion: Se esperaba AS", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion_funcion ::= visibilidad FUNCTION IDENTIFICADOR parametros error NT$5 tipo_dato fin_linea cuerpo_funcion END FUNCTION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$6 ::= 
            {
              Object RESULT =null;
parser.report_error("declaracion_funcion: Se esperaba END", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion_funcion ::= visibilidad FUNCTION IDENTIFICADOR parametros fin_linea cuerpo_funcion error NT$6 FUNCTION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion_funcion ::= visibilidad FUNCTION IDENTIFICADOR parametros fin_linea cuerpo_funcion END error 
            {
              Object RESULT =null;
		parser.report_error("declaracion_funcion: Se esperaba FUNCTION", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion_type ::= visibilidad TYPE IDENTIFICADOR fin_linea cuerpo_nuevo_tipo END TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$7 ::= 
            {
              Object RESULT =null;
parser.report_error("declaracion_type: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion_type ::= visibilidad TYPE error NT$7 fin_linea cuerpo_nuevo_tipo END TYPE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$8 ::= 
            {
              Object RESULT =null;
parser.report_error("declaracion_type: Se esperaba END", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion_type ::= visibilidad TYPE IDENTIFICADOR fin_linea cuerpo_nuevo_tipo error NT$8 TYPE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion_type ::= visibilidad TYPE IDENTIFICADOR fin_linea cuerpo_nuevo_tipo END error 
            {
              Object RESULT =null;
		parser.report_error("declaracion_type: Se esperaba TYPE", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cuerpo_funcion ::= sentencias_cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cuerpo_funcion ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencias_cuerpo_funcion ::= sentencia_cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencias_cuerpo_funcion ::= sentencias_cuerpo_funcion sentencia_cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia_cuerpo_funcion ::= propiedad argumentos fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia_cuerpo_funcion ::= declaracion_variables fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia_cuerpo_funcion ::= sentencia_for_step fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia_cuerpo_funcion ::= sentencia_do_while fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia_cuerpo_funcion ::= sentencia_if fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia_cuerpo_funcion ::= sentencia_consola fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia_cuerpo_funcion ::= sentencia_llamado_funcion fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia_cuerpo_funcion ::= sentencia_asignacion fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion STEP tipos_step fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$9 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia_for_step ::= FOR error NT$9 OP_IGUAL expresion TO expresion STEP tipos_step fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$10 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba OP_IGUAL", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia_for_step ::= FOR IDENTIFICADOR error NT$10 expresion TO expresion STEP tipos_step fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$11 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba TO", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion error NT$11 expresion STEP tipos_step fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$12 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba STEP", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion error NT$12 tipos_step fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$13 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba tipos_step", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion STEP error NT$13 fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$14 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba NEXT", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion STEP tipos_step fin_linea cuerpo_funcion error NT$14 IDENTIFICADOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion STEP tipos_step fin_linea cuerpo_funcion NEXT error 
            {
              Object RESULT =null;
		parser.report_error("sentencia_for_step: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia_do_while ::= DO WHILE expresion fin_linea cuerpo_funcion LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$15 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_do_while: Se esperaba WHILE", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia_do_while ::= DO error NT$15 expresion fin_linea cuerpo_funcion LOOP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia_do_while ::= DO WHILE expresion fin_linea cuerpo_funcion error 
            {
              Object RESULT =null;
		parser.report_error("sentencia_do_while: Se esperaba LOOP", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion sentencia_else_if sentencia_else END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$16 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_if: Se esperaba THEN", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia_if ::= IF expresion error NT$16 fin_linea cuerpo_funcion sentencia_else_if sentencia_else END IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$17 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_if: Se esperaba END", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion sentencia_else_if sentencia_else error NT$17 IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion sentencia_else_if sentencia_else_if END error 
            {
              Object RESULT =null;
		parser.report_error("sentencia_if: Se esperaba IF", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion sentencia_else END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia_else_if ::= ELSE_IF expresion THEN fin_linea cuerpo_funcion sentencia_else_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$18 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_else_if: Se esperaba THEN", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia_else_if ::= ELSE_IF expresion error NT$18 fin_linea cuerpo_funcion sentencia_else_if 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia_else_if ::= ELSE_IF expresion THEN fin_linea cuerpo_funcion error 
            {
              Object RESULT =null;
		parser.report_error("sentencia_else_if: Se esperaba sentencia_else_if", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencia_else ::= ELSE fin_linea cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia_consola ::= WRITE PAR_IZQ termino PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$19 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_consola WRITE: Se esperaba \"(\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencia_consola ::= WRITE error NT$19 PAR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentencia_consola ::= WRITE PAR_IZQ termino error 
            {
              Object RESULT =null;
		parser.report_error("sentencia_consola WRITE: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentencia_consola ::= READ PAR_IZQ termino PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$20 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_consola READ: Se esperaba \"(\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencia_consola ::= READ error NT$20 termino PAR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencia_consola ::= READ PAR_IZQ termino error 
            {
              Object RESULT =null;
		parser.report_error("sentencia_consola READ: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cuerpo_nuevo_tipo ::= sentencias_cuerpo_nuevo_tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_nuevo_tipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cuerpo_nuevo_tipo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_nuevo_tipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentencias_cuerpo_nuevo_tipo ::= declaracion_variables_nuevo_tipo fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_nuevo_tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencias_cuerpo_nuevo_tipo ::= sentencias_cuerpo_nuevo_tipo declaracion_variables_nuevo_tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_nuevo_tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // declaracion_variables_nuevo_tipo ::= IDENTIFICADOR AS tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables_nuevo_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parametros ::= PAR_IZQ PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parametros ::= PAR_IZQ error 
            {
              Object RESULT =null;
		parser.report_error("parametros: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parametros ::= PAR_IZQ lista_parametros PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parametros ::= PAR_IZQ lista_parametros error 
            {
              Object RESULT =null;
		parser.report_error("parametros: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // lista_parametros ::= IDENTIFICADOR AS tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // lista_parametros ::= forma_de_paso IDENTIFICADOR AS tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$21 ::= 
            {
              Object RESULT =null;
parser.report_error("lista_parametros: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lista_parametros ::= forma_de_paso error NT$21 AS tipo_dato 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$22 ::= 
            {
              Object RESULT =null;
parser.report_error("lista_parametros: Se esperaba AS", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lista_parametros ::= forma_de_paso IDENTIFICADOR error NT$22 tipo_dato 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lista_parametros ::= lista_parametros COMA forma_de_paso IDENTIFICADOR AS tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$23 ::= 
            {
              Object RESULT =null;
parser.report_error("lista_parametros: Se esperaba COMA", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lista_parametros ::= lista_parametros error NT$23 forma_de_paso IDENTIFICADOR AS tipo_dato 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$24 ::= 
            {
              Object RESULT =null;
parser.report_error("lista_parametros: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // lista_parametros ::= lista_parametros COMA forma_de_paso error NT$24 AS tipo_dato 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$25 ::= 
            {
              Object RESULT =null;
parser.report_error("lista_parametros: Se esperaba AS", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // lista_parametros ::= lista_parametros COMA forma_de_paso IDENTIFICADOR error NT$25 tipo_dato 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // forma_de_paso ::= BYVAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forma_de_paso",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // forma_de_paso ::= BYREF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forma_de_paso",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentencia_asignacion ::= receptor_asignacion OP_IGUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentencia_asignacion ::= expresion OP_IGUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // receptor_asignacion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("receptor_asignacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // receptor_asignacion ::= propiedad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("receptor_asignacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentencia_llamado_funcion ::= CALL llamado_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_llamado_funcion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentencia_llamado_funcion ::= CALL error 
            {
              Object RESULT =null;
		parser.report_error("Sentencia llamado funcion: Se esperaba el llamado a la funcion", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_llamado_funcion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // llamado_funcion ::= IDENTIFICADOR argumentos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // argumentos ::= PAR_IZQ PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // argumentos ::= PAR_IZQ error 
            {
              Object RESULT =null;
		parser.report_error("Argumentos: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // argumentos ::= PAR_IZQ lista_argumentos PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // argumentos ::= PAR_IZQ lista_argumentos error 
            {
              Object RESULT =null;
		parser.report_error("Argumentos: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // lista_argumentos ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // lista_argumentos ::= expresion COMA lista_argumentos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresion ::= expresion operador_aritmetico expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresion ::= expresion operador_relacional expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresion ::= expresion operador_logico expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresion ::= OP_NOT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expresion ::= operador_negacion expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expresion ::= termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // operador_aritmetico ::= operador_aritmetico_suma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // operador_aritmetico ::= operador_aritmetico_multiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // operador_aritmetico_suma ::= OP_SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_suma",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // operador_aritmetico_suma ::= OP_RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_suma",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // operador_aritmetico_multiplicacion ::= OP_POTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_multiplicacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // operador_aritmetico_multiplicacion ::= OP_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_multiplicacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // operador_aritmetico_multiplicacion ::= OP_DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_multiplicacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // operador_relacional ::= OP_MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // operador_relacional ::= OP_MENOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // operador_relacional ::= OP_MAYOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // operador_relacional ::= OP_MENOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // operador_relacional ::= operador_distinto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // operador_logico ::= OP_AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // operador_logico ::= OP_OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // operador_negacion ::= OP_RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_negacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // operador_distinto ::= OP_MENOR_QUE OP_MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_distinto",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // operador_distinto ::= OP_MENOR_QUE error 
            {
              Object RESULT =null;
		parser.report_error("operador_distinto: Se esperaba OP_MAYOR_QUE", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_distinto",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // propiedad ::= IDENTIFICADOR cadena_propiedades 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("propiedad",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // cadena_propiedades ::= PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadena_propiedades",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // cadena_propiedades ::= PUNTO IDENTIFICADOR cadena_propiedades 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadena_propiedades",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // fin_linea ::= FIN_LINEA fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_linea",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // fin_linea ::= FIN_LINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_linea",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // termino ::= receptor_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // termino ::= ENTERO_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // termino ::= REAL_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // termino ::= CARACTER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // termino ::= CADENA_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // termino ::= TRUE_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // termino ::= FALSE_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // termino ::= llamado_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // tipo_dato ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // tipo_dato ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // tipo_dato ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // tipo_dato ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // tipo_dato ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // tipo_dato ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // visibilidad ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // visibilidad ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // visibilidad ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // lista_variables ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // lista_variables ::= IDENTIFICADOR COMA lista_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // lista_variables ::= IDENTIFICADOR COMA error 
            {
              Object RESULT =null;
		parser.report_error("lista_variables: Se esperaba lista_variables", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // tipos_step ::= ENTERO_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_step",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // tipos_step ::= REAL_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_step",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
