
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package VisualBasic;

import java_cup.runtime.*;
import java.util.List;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\237\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\002\000\002\003\003\000\002\003\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\005\006\000\002\053\002\000\002" +
    "\005\007\000\002\054\002\000\002\005\007\000\002\006" +
    "\011\000\002\055\002\000\002\006\012\000\002\056\002" +
    "\000\002\006\012\000\002\006\011\000\002\007\013\000" +
    "\002\057\002\000\002\007\014\000\002\060\002\000\002" +
    "\007\014\000\002\061\002\000\002\007\014\000\002\007" +
    "\013\000\002\010\010\000\002\062\002\000\002\010\011" +
    "\000\002\063\002\000\002\010\011\000\002\010\010\000" +
    "\002\011\003\000\002\011\002\000\002\012\003\000\002" +
    "\012\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\004\000\002\014\016\000\002\064\002\000" +
    "\002\014\017\000\002\065\002\000\002\014\017\000\002" +
    "\066\002\000\002\014\017\000\002\067\002\000\002\014" +
    "\017\000\002\070\002\000\002\014\017\000\002\071\002" +
    "\000\002\014\017\000\002\014\016\000\002\015\010\000" +
    "\002\072\002\000\002\015\011\000\002\015\010\000\002" +
    "\016\013\000\002\073\002\000\002\016\014\000\002\074" +
    "\002\000\002\016\014\000\002\016\013\000\002\016\011" +
    "\000\002\016\012\000\002\017\010\000\002\075\002\000" +
    "\002\017\011\000\002\017\010\000\002\020\005\000\002" +
    "\021\006\000\002\076\002\000\002\021\006\000\002\021" +
    "\006\000\002\021\006\000\002\077\002\000\002\021\007" +
    "\000\002\021\006\000\002\022\003\000\002\022\002\000" +
    "\002\023\004\000\002\023\004\000\002\024\005\000\002" +
    "\025\004\000\002\025\004\000\002\025\005\000\002\025" +
    "\005\000\002\026\006\000\002\100\002\000\002\026\007" +
    "\000\002\101\002\000\002\026\007\000\002\026\010\000" +
    "\002\102\002\000\002\026\011\000\002\103\002\000\002" +
    "\026\011\000\002\104\002\000\002\026\011\000\002\027" +
    "\003\000\002\027\003\000\002\031\003\000\002\031\003" +
    "\000\002\032\004\000\002\032\004\000\002\033\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\005\000\002" +
    "\034\005\000\002\035\003\000\002\035\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\004\000\002\036\004\000\002\036\003\000" +
    "\002\037\003\000\002\037\003\000\002\040\003\000\002" +
    "\040\003\000\002\041\003\000\002\041\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\042\003\000\002\042\003\000" +
    "\002\044\003\000\002\045\004\000\002\045\004\000\002" +
    "\046\004\000\002\047\004\000\002\047\005\000\002\050" +
    "\004\000\002\050\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015c\000\016\002\ufffe\013\013\014\004\020\014\021" +
    "\015\061\020\001\002\000\006\003\u0155\070\u0156\001\002" +
    "\000\004\002\u0154\001\002\000\004\061\020\001\002\000" +
    "\004\061\020\001\002\000\014\002\ufffd\013\ufffd\014\ufffd" +
    "\020\ufffd\021\ufffd\001\002\000\004\061\020\001\002\000" +
    "\004\061\020\001\002\000\006\003\u013a\070\u013b\001\002" +
    "\000\006\003\u0129\070\u012a\001\002\000\006\003\024\070" +
    "\025\001\002\000\012\013\013\014\004\020\014\021\015" +
    "\001\002\000\014\002\uffff\013\013\014\004\020\014\021" +
    "\015\001\002\000\050\002\uff6f\003\uff6f\004\uff6f\005\uff6f" +
    "\013\uff6f\014\uff6f\020\uff6f\021\uff6f\023\uff6f\042\uff6f\044" +
    "\uff6f\045\uff6f\046\uff6f\047\uff6f\052\uff6f\053\uff6f\054\uff6f" +
    "\061\020\070\uff6f\001\002\000\046\002\uff70\003\uff70\004" +
    "\uff70\005\uff70\013\uff70\014\uff70\020\uff70\021\uff70\023\uff70" +
    "\042\uff70\044\uff70\045\uff70\046\uff70\047\uff70\052\uff70\053" +
    "\uff70\054\uff70\070\uff70\001\002\000\014\002\ufffc\013\ufffc" +
    "\014\ufffc\020\ufffc\021\ufffc\001\002\000\014\002\001\013" +
    "\013\014\004\020\014\021\015\001\002\000\004\062\uffeb" +
    "\001\002\000\004\062\027\001\002\000\006\003\101\015" +
    "\100\001\002\000\012\003\031\024\030\025\032\063\035" +
    "\001\002\000\006\003\uff96\070\uff96\001\002\000\010\003" +
    "\uffa6\015\uffa6\061\uffa6\001\002\000\006\003\uff97\070\uff97" +
    "\001\002\000\010\003\056\057\055\063\057\001\002\000" +
    "\006\003\036\070\037\001\002\000\010\003\uffa7\015\uffa7" +
    "\061\uffa7\001\002\000\004\015\uffa2\001\002\000\006\003" +
    "\041\015\040\001\002\000\014\006\047\007\044\010\046" +
    "\011\045\012\050\001\002\000\014\006\uffa0\007\uffa0\010" +
    "\uffa0\011\uffa0\012\uffa0\001\002\000\014\006\047\007\044" +
    "\010\046\011\045\012\050\001\002\000\010\003\uff9f\057" +
    "\uff9f\063\uff9f\001\002\000\016\003\uff66\046\uff66\057\uff66" +
    "\061\uff66\063\uff66\070\uff66\001\002\000\016\003\uff64\046" +
    "\uff64\057\uff64\061\uff64\063\uff64\070\uff64\001\002\000\016" +
    "\003\uff63\046\uff63\057\uff63\061\uff63\063\uff63\070\uff63\001" +
    "\002\000\016\003\uff67\046\uff67\057\uff67\061\uff67\063\uff67" +
    "\070\uff67\001\002\000\016\003\uff65\046\uff65\057\uff65\061" +
    "\uff65\063\uff65\070\uff65\001\002\000\010\003\uffa3\057\uffa3" +
    "\063\uffa3\001\002\000\004\015\053\001\002\000\014\006" +
    "\047\007\044\010\046\011\045\012\050\001\002\000\010" +
    "\003\uffa1\057\uffa1\063\uffa1\001\002\000\006\024\030\025" +
    "\032\001\002\000\014\003\uffa4\015\uffa4\024\uff9d\025\uff9d" +
    "\061\uffa4\001\002\000\010\003\uffa5\015\uffa5\061\uffa5\001" +
    "\002\000\006\024\030\025\032\001\002\000\004\070\062" +
    "\001\002\000\004\015\063\001\002\000\014\006\047\007" +
    "\044\010\046\011\045\012\050\001\002\000\010\003\uff9c" +
    "\057\uff9c\063\uff9c\001\002\000\006\003\066\070\067\001" +
    "\002\000\004\015\uff9b\001\002\000\006\003\071\015\070" +
    "\001\002\000\014\006\047\007\044\010\046\011\045\012" +
    "\050\001\002\000\014\006\uff99\007\uff99\010\uff99\011\uff99" +
    "\012\uff99\001\002\000\014\006\047\007\044\010\046\011" +
    "\045\012\050\001\002\000\010\003\uff98\057\uff98\063\uff98" +
    "\001\002\000\010\003\uff9e\057\uff9e\063\uff9e\001\002\000" +
    "\004\015\076\001\002\000\014\006\047\007\044\010\046" +
    "\011\045\012\050\001\002\000\010\003\uff9a\057\uff9a\063" +
    "\uff9a\001\002\000\014\006\047\007\044\010\046\011\045" +
    "\012\050\001\002\000\014\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\001\002\000\014\006\047\007\044\010\046" +
    "\011\045\012\050\001\002\000\004\061\020\001\002\000" +
    "\022\004\114\005\105\014\004\023\121\042\113\046\uffdd" +
    "\047\106\054\123\001\002\000\006\003\u0110\062\u0111\001" +
    "\002\000\006\003\324\070\325\001\002\000\004\061\020" +
    "\001\002\000\034\003\uffde\004\114\005\105\014\004\023" +
    "\121\042\113\044\uffde\045\uffde\046\uffde\047\106\052\uffde" +
    "\053\uffde\054\123\001\002\000\004\061\020\001\002\000" +
    "\004\061\020\001\002\000\024\034\136\036\132\062\134" +
    "\064\137\065\131\066\147\067\140\070\146\071\133\001" +
    "\002\000\006\003\237\062\240\001\002\000\034\003\uffdc" +
    "\004\uffdc\005\uffdc\014\uffdc\023\uffdc\042\uffdc\044\uffdc\045" +
    "\uffdc\046\uffdc\047\uffdc\052\uffdc\053\uffdc\054\uffdc\001\002" +
    "\000\004\061\020\001\002\000\004\061\020\001\002\000" +
    "\004\061\020\001\002\000\006\003\231\070\232\001\002" +
    "\000\004\061\020\001\002\000\006\003\127\055\130\001" +
    "\002\000\004\046\125\001\002\000\004\021\126\001\002" +
    "\000\004\061\uffe8\001\002\000\024\034\uffc4\036\uffc4\062" +
    "\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4" +
    "\001\002\000\024\034\136\036\132\062\134\064\137\065" +
    "\131\066\147\067\140\070\146\071\133\001\002\000\044" +
    "\003\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\033" +
    "\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c\043\uff6c\050\uff6c" +
    "\051\uff6c\057\uff6c\061\uff6c\063\uff6c\001\002\000\024\034" +
    "\uff76\036\uff76\062\uff76\064\uff76\065\uff76\066\uff76\067\uff76" +
    "\070\uff76\071\uff76\001\002\000\044\003\uff69\026\uff69\027" +
    "\uff69\030\uff69\031\uff69\032\uff69\033\uff69\035\uff69\036\uff69" +
    "\037\uff69\040\uff69\043\uff69\050\uff69\051\uff69\057\uff69\061" +
    "\uff69\063\uff69\001\002\000\024\034\136\036\132\062\134" +
    "\064\137\065\131\066\147\067\140\070\146\071\133\001" +
    "\002\000\044\003\uff84\026\uff84\027\uff84\030\uff84\031\uff84" +
    "\032\uff84\033\uff84\035\uff84\036\uff84\037\uff84\040\uff84\043" +
    "\uff84\050\uff84\051\uff84\057\uff84\061\uff84\063\uff84\001\002" +
    "\000\024\034\136\036\132\062\134\064\137\065\131\066" +
    "\147\067\140\070\146\071\133\001\002\000\044\003\uff6d" +
    "\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d\035" +
    "\uff6d\036\uff6d\037\uff6d\040\uff6d\043\uff6d\050\uff6d\051\uff6d" +
    "\057\uff6d\061\uff6d\063\uff6d\001\002\000\044\003\uff6a\026" +
    "\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a\035\uff6a" +
    "\036\uff6a\037\uff6a\040\uff6a\043\uff6a\050\uff6a\051\uff6a\057" +
    "\uff6a\061\uff6a\063\uff6a\001\002\000\024\034\136\036\132" +
    "\062\134\064\137\065\131\066\147\067\140\070\146\071" +
    "\133\001\002\000\030\026\166\027\175\030\164\031\202" +
    "\032\176\033\201\035\170\036\167\037\171\040\165\061" +
    "\020\001\002\000\044\003\uff94\026\uff94\027\uff94\030\uff94" +
    "\031\uff94\032\uff94\033\uff94\035\uff94\036\uff94\037\uff94\040" +
    "\uff94\043\uff94\050\uff94\051\uff94\057\uff94\061\uff94\063\uff94" +
    "\001\002\000\044\003\uff68\026\uff68\027\uff68\030\uff68\031" +
    "\uff68\032\uff68\033\uff68\035\uff68\036\uff68\037\uff68\040\uff68" +
    "\043\uff68\050\uff68\051\uff68\057\uff68\061\uff68\063\uff68\001" +
    "\002\000\044\003\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e" +
    "\032\uff6e\033\uff6e\035\uff6e\036\uff6e\037\uff6e\040\uff6e\043" +
    "\uff6e\050\uff6e\051\uff6e\057\uff6e\061\uff6e\063\uff6e\001\002" +
    "\000\050\003\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032" +
    "\uff95\033\uff95\035\uff95\036\uff95\037\uff95\040\uff95\043\uff95" +
    "\050\uff95\051\uff95\057\uff95\060\151\061\uff95\062\153\063" +
    "\uff95\001\002\000\044\003\uff6b\026\uff6b\027\uff6b\030\uff6b" +
    "\031\uff6b\032\uff6b\033\uff6b\035\uff6b\036\uff6b\037\uff6b\040" +
    "\uff6b\043\uff6b\050\uff6b\051\uff6b\057\uff6b\061\uff6b\063\uff6b" +
    "\001\002\000\044\003\uff73\026\uff73\027\uff73\030\uff73\031" +
    "\uff73\032\uff73\033\uff73\035\uff73\036\uff73\037\uff73\040\uff73" +
    "\043\uff73\050\uff73\051\uff73\057\uff73\061\uff73\063\uff73\001" +
    "\002\000\004\070\211\001\002\000\044\003\uff91\026\uff91" +
    "\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\035\uff91\036" +
    "\uff91\037\uff91\040\uff91\043\uff91\050\uff91\051\uff91\057\uff91" +
    "\061\uff91\063\uff91\001\002\000\030\003\156\034\136\036" +
    "\132\062\134\063\157\064\137\065\131\066\147\067\140" +
    "\070\146\071\133\001\002\000\034\003\uff8c\026\166\027" +
    "\175\030\164\031\202\032\176\033\201\035\170\036\167" +
    "\037\171\040\165\057\163\063\uff8c\001\002\000\006\003" +
    "\160\063\161\001\002\000\044\003\uff8f\026\uff8f\027\uff8f" +
    "\030\uff8f\031\uff8f\032\uff8f\033\uff8f\035\uff8f\036\uff8f\037" +
    "\uff8f\040\uff8f\043\uff8f\050\uff8f\051\uff8f\057\uff8f\061\uff8f" +
    "\063\uff8f\001\002\000\044\003\uff90\026\uff90\027\uff90\030" +
    "\uff90\031\uff90\032\uff90\033\uff90\035\uff90\036\uff90\037\uff90" +
    "\040\uff90\043\uff90\050\uff90\051\uff90\057\uff90\061\uff90\063" +
    "\uff90\001\002\000\044\003\uff8d\026\uff8d\027\uff8d\030\uff8d" +
    "\031\uff8d\032\uff8d\033\uff8d\035\uff8d\036\uff8d\037\uff8d\040" +
    "\uff8d\043\uff8d\050\uff8d\051\uff8d\057\uff8d\061\uff8d\063\uff8d" +
    "\001\002\000\044\003\uff8e\026\uff8e\027\uff8e\030\uff8e\031" +
    "\uff8e\032\uff8e\033\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e" +
    "\043\uff8e\050\uff8e\051\uff8e\057\uff8e\061\uff8e\063\uff8e\001" +
    "\002\000\024\034\136\036\132\062\134\064\137\065\131" +
    "\066\147\067\140\070\146\071\133\001\002\000\024\034" +
    "\136\036\132\062\134\064\137\065\131\066\147\067\140" +
    "\070\146\071\133\001\002\000\024\034\uff7b\036\uff7b\062" +
    "\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b" +
    "\001\002\000\024\034\uff7e\036\uff7e\062\uff7e\064\uff7e\065" +
    "\uff7e\066\uff7e\067\uff7e\070\uff7e\071\uff7e\001\002\000\024" +
    "\034\uff7d\036\uff7d\062\uff7d\064\uff7d\065\uff7d\066\uff7d\067" +
    "\uff7d\070\uff7d\071\uff7d\001\002\000\024\034\uff80\036\uff80" +
    "\062\uff80\064\uff80\065\uff80\066\uff80\067\uff80\070\uff80\071" +
    "\uff80\001\002\000\024\034\uff81\036\uff81\062\uff81\064\uff81" +
    "\065\uff81\066\uff81\067\uff81\070\uff81\071\uff81\001\002\000" +
    "\024\034\uff7f\036\uff7f\062\uff7f\064\uff7f\065\uff7f\066\uff7f" +
    "\067\uff7f\070\uff7f\071\uff7f\001\002\000\024\034\uff79\036" +
    "\uff79\062\uff79\064\uff79\065\uff79\066\uff79\067\uff79\070\uff79" +
    "\071\uff79\001\002\000\024\034\136\036\132\062\134\064" +
    "\137\065\131\066\147\067\140\070\146\071\133\001\002" +
    "\000\024\034\uff82\036\uff82\062\uff82\064\uff82\065\uff82\066" +
    "\uff82\067\uff82\070\uff82\071\uff82\001\002\000\030\003\205" +
    "\026\204\034\uff7c\036\uff7c\062\uff7c\064\uff7c\065\uff7c\066" +
    "\uff7c\067\uff7c\070\uff7c\071\uff7c\001\002\000\024\034\uff78" +
    "\036\uff78\062\uff78\064\uff78\065\uff78\066\uff78\067\uff78\070" +
    "\uff78\071\uff78\001\002\000\024\034\uff83\036\uff83\062\uff83" +
    "\064\uff83\065\uff83\066\uff83\067\uff83\070\uff83\071\uff83\001" +
    "\002\000\024\034\136\036\132\062\134\064\137\065\131" +
    "\066\147\067\140\070\146\071\133\001\002\000\024\034" +
    "\uff77\036\uff77\062\uff77\064\uff77\065\uff77\066\uff77\067\uff77" +
    "\070\uff77\071\uff77\001\002\000\024\034\uff7a\036\uff7a\062" +
    "\uff7a\064\uff7a\065\uff7a\066\uff7a\067\uff7a\070\uff7a\071\uff7a" +
    "\001\002\000\044\003\uff89\026\166\027\175\030\164\031" +
    "\202\032\176\033\201\035\170\036\167\037\171\040\165" +
    "\043\uff89\050\uff89\051\uff89\057\uff89\061\uff89\063\uff89\001" +
    "\002\000\024\034\uff75\036\uff75\062\uff75\064\uff75\065\uff75" +
    "\066\uff75\067\uff75\070\uff75\071\uff75\001\002\000\024\034" +
    "\uff74\036\uff74\062\uff74\064\uff74\065\uff74\066\uff74\067\uff74" +
    "\070\uff74\071\uff74\001\002\000\044\003\uff8a\026\166\027" +
    "\175\030\164\031\202\032\176\033\201\035\170\036\167" +
    "\037\171\040\165\043\uff8a\050\uff8a\051\uff8a\057\uff8a\061" +
    "\uff8a\063\uff8a\001\002\000\006\003\uff8b\063\uff8b\001\002" +
    "\000\044\003\uff88\026\166\027\175\030\164\031\202\032" +
    "\176\033\201\035\170\036\167\037\171\040\165\043\uff88" +
    "\050\uff88\051\uff88\057\uff88\061\uff88\063\uff88\001\002\000" +
    "\046\003\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72" +
    "\033\uff72\035\uff72\036\uff72\037\uff72\040\uff72\043\uff72\050" +
    "\uff72\051\uff72\057\uff72\060\151\061\uff72\063\uff72\001\002" +
    "\000\044\003\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032" +
    "\uff71\033\uff71\035\uff71\036\uff71\037\uff71\040\uff71\043\uff71" +
    "\050\uff71\051\uff71\057\uff71\061\uff71\063\uff71\001\002\000" +
    "\024\003\uffdd\004\114\005\105\014\004\023\121\042\113" +
    "\047\106\053\uffdd\054\123\001\002\000\006\003\215\053" +
    "\216\001\002\000\004\061\uffc2\001\002\000\004\061\uffc5" +
    "\001\002\000\044\003\uff85\026\166\027\175\030\164\031" +
    "\202\032\176\033\201\035\170\036\167\037\171\040\165" +
    "\043\uff85\050\uff85\051\uff85\057\uff85\061\uff85\063\uff85\001" +
    "\002\000\044\003\uff86\026\166\027\175\030\164\031\202" +
    "\032\176\033\201\035\170\036\167\037\171\040\165\043" +
    "\uff86\050\uff86\051\uff86\057\uff86\061\uff86\063\uff86\001\002" +
    "\000\030\026\166\027\175\030\164\031\202\032\176\033" +
    "\201\035\170\036\167\037\171\040\165\063\222\001\002" +
    "\000\044\003\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032" +
    "\uff87\033\uff87\035\uff87\036\uff87\037\uff87\040\uff87\043\uff87" +
    "\050\uff87\051\uff87\057\uff87\061\uff87\063\uff87\001\002\000" +
    "\024\034\136\036\132\062\134\064\137\065\131\066\147" +
    "\067\140\070\146\071\133\001\002\000\030\026\166\027" +
    "\175\030\164\031\202\032\176\033\201\035\170\036\167" +
    "\037\171\040\165\061\020\001\002\000\022\004\114\005" +
    "\105\014\004\023\121\042\113\047\106\053\uffdd\054\123" +
    "\001\002\000\004\053\227\001\002\000\004\061\uffc3\001" +
    "\002\000\034\003\uffd7\004\uffd7\005\uffd7\014\uffd7\023\uffd7" +
    "\042\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\052\uffd7\053" +
    "\uffd7\054\uffd7\001\002\000\004\061\uff92\001\002\000\004" +
    "\062\153\001\002\000\004\061\uff93\001\002\000\034\003" +
    "\uffd5\004\uffd5\005\uffd5\014\uffd5\023\uffd5\042\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\047\uffd5\052\uffd5\053\uffd5\054\uffd5\001" +
    "\002\000\034\003\uffd9\004\uffd9\005\uffd9\014\uffd9\023\uffd9" +
    "\042\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\001\002\000\034\003\uffd8\004\uffd8\005\uffd8" +
    "\014\uffd8\023\uffd8\042\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\052\uffd8\053\uffd8\054\uffd8\001\002\000\004\063\uffb3" +
    "\001\002\000\016\064\137\065\131\066\147\067\140\070" +
    "\146\071\133\001\002\000\006\003\242\063\243\001\002" +
    "\000\004\061\uffb1\001\002\000\004\061\uffb4\001\002\000" +
    "\004\063\245\001\002\000\004\061\uffb2\001\002\000\032" +
    "\003\250\026\166\027\175\030\164\031\202\032\176\033" +
    "\201\035\170\036\167\037\171\040\165\043\247\001\002" +
    "\000\004\061\020\001\002\000\004\061\uffc0\001\002\000" +
    "\004\061\020\001\002\000\022\004\114\005\105\014\004" +
    "\023\121\042\113\045\uffdd\047\106\054\123\001\002\000" +
    "\004\045\255\001\002\000\004\044\272\001\002\000\024" +
    "\034\136\036\132\062\134\064\137\065\131\066\147\067" +
    "\140\070\146\071\133\001\002\000\032\003\260\026\166" +
    "\027\175\030\164\031\202\032\176\033\201\035\170\036" +
    "\167\037\171\040\165\043\257\001\002\000\004\061\020" +
    "\001\002\000\004\061\uffb8\001\002\000\004\061\020\001" +
    "\002\000\022\004\114\005\105\014\004\023\121\042\113" +
    "\045\uffdd\047\106\054\123\001\002\000\004\045\255\001" +
    "\002\000\010\044\uffb7\045\uffb7\046\uffb7\001\002\000\024" +
    "\003\uffdd\004\114\005\105\014\004\023\121\042\113\045" +
    "\uffdd\047\106\054\123\001\002\000\006\003\267\045\255" +
    "\001\002\000\010\044\uffb6\045\uffb6\046\uffb6\001\002\000" +
    "\010\044\uffb9\045\uffb9\046\uffb9\001\002\000\004\046\275" +
    "\001\002\000\004\061\020\001\002\000\024\003\uffdd\004" +
    "\114\005\105\014\004\023\121\042\113\046\uffdd\047\106" +
    "\054\123\001\002\000\006\003\uffb5\046\uffb5\001\002\000" +
    "\004\042\276\001\002\000\004\061\uffbf\001\002\000\026" +
    "\004\114\005\105\014\004\023\121\042\113\044\uffdd\045" +
    "\uffdd\046\uffdd\047\106\054\123\001\002\000\010\044\272" +
    "\045\255\046\303\001\002\000\004\046\316\001\002\000" +
    "\006\044\272\045\255\001\002\000\004\042\304\001\002" +
    "\000\004\061\uffbb\001\002\000\006\003\311\046\312\001" +
    "\002\000\004\046\307\001\002\000\004\003\310\001\002" +
    "\000\004\061\uffbc\001\002\000\004\042\uffbe\001\002\000" +
    "\004\042\313\001\002\000\004\061\uffc1\001\002\000\004" +
    "\042\315\001\002\000\004\061\uffbd\001\002\000\004\042" +
    "\317\001\002\000\004\061\uffba\001\002\000\034\003\uffda" +
    "\004\uffda\005\uffda\014\uffda\023\uffda\042\uffda\044\uffda\045" +
    "\uffda\046\uffda\047\uffda\052\uffda\053\uffda\054\uffda\001\002" +
    "\000\034\003\uffd4\004\uffd4\005\uffd4\014\uffd4\023\uffd4\042" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\001\002\000\034\003\uffdb\004\uffdb\005\uffdb\014" +
    "\uffdb\023\uffdb\042\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb" +
    "\052\uffdb\053\uffdb\054\uffdb\001\002\000\034\003\uffd6\004" +
    "\uffd6\005\uffd6\014\uffd6\023\uffd6\042\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\052\uffd6\053\uffd6\054\uffd6\001\002\000" +
    "\004\041\uffd2\001\002\000\006\003\326\041\327\001\002" +
    "\000\024\034\uffd0\036\uffd0\062\uffd0\064\uffd0\065\uffd0\066" +
    "\uffd0\067\uffd0\070\uffd0\071\uffd0\001\002\000\024\034\136" +
    "\036\132\062\134\064\137\065\131\066\147\067\140\070" +
    "\146\071\133\001\002\000\032\003\331\026\166\027\175" +
    "\030\164\031\202\032\176\033\201\035\170\036\167\037" +
    "\171\040\165\050\332\001\002\000\024\034\uffce\036\uffce" +
    "\062\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce\071" +
    "\uffce\001\002\000\024\034\136\036\132\062\134\064\137" +
    "\065\131\066\147\067\140\070\146\071\133\001\002\000" +
    "\032\003\335\026\166\027\175\030\164\031\202\032\176" +
    "\033\201\035\170\036\167\037\171\040\165\051\334\001" +
    "\002\000\006\003\344\064\345\001\002\000\004\064\uffcc" +
    "\001\002\000\004\064\337\001\002\000\004\061\020\001" +
    "\002\000\022\004\114\005\105\014\004\023\121\042\113" +
    "\047\106\052\uffdd\054\123\001\002\000\004\052\342\001" +
    "\002\000\004\070\343\001\002\000\004\061\uffcb\001\002" +
    "\000\004\061\uffca\001\002\000\004\061\020\001\002\000" +
    "\024\003\uffdd\004\114\005\105\014\004\023\121\042\113" +
    "\047\106\052\uffdd\054\123\001\002\000\006\003\350\052" +
    "\351\001\002\000\004\070\uffc8\001\002\000\006\003\352" +
    "\070\353\001\002\000\004\061\uffc6\001\002\000\004\061" +
    "\uffd3\001\002\000\004\070\355\001\002\000\004\061\uffc7" +
    "\001\002\000\004\061\020\001\002\000\022\004\114\005" +
    "\105\014\004\023\121\042\113\047\106\052\uffdd\054\123" +
    "\001\002\000\004\052\361\001\002\000\004\070\362\001" +
    "\002\000\004\061\uffc9\001\002\000\024\034\136\036\132" +
    "\062\134\064\137\065\131\066\147\067\140\070\146\071" +
    "\133\001\002\000\030\026\166\027\175\030\164\031\202" +
    "\032\176\033\201\035\170\036\167\037\171\040\165\051" +
    "\365\001\002\000\004\064\366\001\002\000\004\061\020" +
    "\001\002\000\022\004\114\005\105\014\004\023\121\042" +
    "\113\047\106\052\uffdd\054\123\001\002\000\004\052\371" +
    "\001\002\000\004\070\372\001\002\000\004\061\uffcd\001" +
    "\002\000\024\034\136\036\132\062\134\064\137\065\131" +
    "\066\147\067\140\070\146\071\133\001\002\000\030\026" +
    "\166\027\175\030\164\031\202\032\176\033\201\035\170" +
    "\036\167\037\171\040\165\050\375\001\002\000\024\034" +
    "\136\036\132\062\134\064\137\065\131\066\147\067\140" +
    "\070\146\071\133\001\002\000\030\026\166\027\175\030" +
    "\164\031\202\032\176\033\201\035\170\036\167\037\171" +
    "\040\165\051\377\001\002\000\004\064\u0100\001\002\000" +
    "\004\061\020\001\002\000\022\004\114\005\105\014\004" +
    "\023\121\042\113\047\106\052\uffdd\054\123\001\002\000" +
    "\004\052\u0103\001\002\000\004\070\u0104\001\002\000\004" +
    "\061\uffcf\001\002\000\004\041\u0106\001\002\000\024\034" +
    "\136\036\132\062\134\064\137\065\131\066\147\067\140" +
    "\070\146\071\133\001\002\000\030\026\166\027\175\030" +
    "\164\031\202\032\176\033\201\035\170\036\167\037\171" +
    "\040\165\050\u0108\001\002\000\024\034\136\036\132\062" +
    "\134\064\137\065\131\066\147\067\140\070\146\071\133" +
    "\001\002\000\030\026\166\027\175\030\164\031\202\032" +
    "\176\033\201\035\170\036\167\037\171\040\165\051\u010a" +
    "\001\002\000\004\064\u010b\001\002\000\004\061\020\001" +
    "\002\000\022\004\114\005\105\014\004\023\121\042\113" +
    "\047\106\052\uffdd\054\123\001\002\000\004\052\u010e\001" +
    "\002\000\004\070\u010f\001\002\000\004\061\uffd1\001\002" +
    "\000\016\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071" +
    "\uffaf\001\002\000\016\064\137\065\131\066\147\067\140" +
    "\070\146\071\133\001\002\000\006\003\u0113\063\u0114\001" +
    "\002\000\004\061\uffad\001\002\000\004\061\uffb0\001\002" +
    "\000\016\064\137\065\131\066\147\067\140\070\146\071" +
    "\133\001\002\000\004\063\u0117\001\002\000\004\061\uffae" +
    "\001\002\000\004\061\020\001\002\000\024\003\uffdd\004" +
    "\114\005\105\014\004\023\121\042\113\046\uffdd\047\106" +
    "\054\123\001\002\000\006\003\u011b\046\u011c\001\002\000" +
    "\004\021\uffe7\001\002\000\006\003\u011d\021\u011e\001\002" +
    "\000\004\061\uffe5\001\002\000\004\061\uffec\001\002\000" +
    "\004\021\u0120\001\002\000\004\061\uffe6\001\002\000\004" +
    "\062\027\001\002\000\004\015\u0123\001\002\000\014\006" +
    "\047\007\044\010\046\011\045\012\050\001\002\000\004" +
    "\061\020\001\002\000\022\004\114\005\105\014\004\023" +
    "\121\042\113\046\uffdd\047\106\054\123\001\002\000\004" +
    "\046\u0127\001\002\000\004\021\u0128\001\002\000\004\061" +
    "\uffea\001\002\000\004\062\ufff1\001\002\000\004\062\027" +
    "\001\002\000\004\061\020\001\002\000\024\003\uffdd\004" +
    "\114\005\105\014\004\023\121\042\113\046\uffdd\047\106" +
    "\054\123\001\002\000\006\003\u012e\046\u012f\001\002\000" +
    "\004\020\uffef\001\002\000\006\003\u0131\020\u0130\001\002" +
    "\000\004\061\ufff2\001\002\000\004\061\uffed\001\002\000" +
    "\004\020\u0133\001\002\000\004\061\uffee\001\002\000\004" +
    "\062\027\001\002\000\004\061\020\001\002\000\022\004" +
    "\114\005\105\014\004\023\121\042\113\046\uffdd\047\106" +
    "\054\123\001\002\000\004\046\u0138\001\002\000\004\020" +
    "\u0139\001\002\000\004\061\ufff0\001\002\000\004\061\uffe3" +
    "\001\002\000\004\061\020\001\002\000\010\003\uffab\046" +
    "\uffab\070\u013f\001\002\000\004\061\020\001\002\000\010" +
    "\003\uffac\046\uffac\070\u013f\001\002\000\004\015\u0147\001" +
    "\002\000\006\003\u0141\046\u0142\001\002\000\004\013\uffe1" +
    "\001\002\000\006\003\u0143\013\u0144\001\002\000\004\061" +
    "\uffdf\001\002\000\004\061\uffe4\001\002\000\004\013\u0146" +
    "\001\002\000\004\061\uffe0\001\002\000\014\006\047\007" +
    "\044\010\046\011\045\012\050\001\002\000\012\003\uffa8" +
    "\046\uffa8\061\uffa8\070\uffa8\001\002\000\010\003\uffa9\046" +
    "\uffa9\070\uffa9\001\002\000\010\003\uffaa\046\uffaa\070\uffaa" +
    "\001\002\000\004\061\020\001\002\000\006\046\uffab\070" +
    "\u013f\001\002\000\004\046\u014e\001\002\000\004\013\u014f" +
    "\001\002\000\004\061\uffe2\001\002\000\014\002\ufffb\013" +
    "\ufffb\014\ufffb\020\ufffb\021\ufffb\001\002\000\014\002\ufff9" +
    "\013\ufff9\014\ufff9\020\ufff9\021\ufff9\001\002\000\014\002" +
    "\ufffa\013\ufffa\014\ufffa\020\ufffa\021\ufffa\001\002\000\014" +
    "\002\ufff8\013\ufff8\014\ufff8\020\ufff8\021\ufff8\001\002\000" +
    "\004\002\000\001\002\000\004\015\ufff6\001\002\000\006" +
    "\003\u0158\015\u0157\001\002\000\014\006\047\007\044\010" +
    "\046\011\045\012\050\001\002\000\014\006\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\001\002\000\014\006\047\007" +
    "\044\010\046\011\045\012\050\001\002\000\004\061\ufff3" +
    "\001\002\000\004\061\ufff7\001\002\000\004\015\u015d\001" +
    "\002\000\014\006\047\007\044\010\046\011\045\012\050" +
    "\001\002\000\004\061\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015c\000\022\002\004\003\016\004\007\005\011\006" +
    "\006\007\010\010\005\050\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\u0152\001\001\000\004\050" +
    "\u0151\001\001\000\002\001\001\000\004\050\u0150\001\001" +
    "\000\004\050\u014f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\022\004\007\005\011" +
    "\006\006\007\010\010\005\001\001\000\014\004\021\005" +
    "\011\006\006\007\010\010\005\001\001\000\004\050\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\021\005\011\006\006\007\010\010\005\001\001\000\004" +
    "\057\u0120\001\001\000\004\025\025\001\001\000\002\001" +
    "\001\000\006\026\032\027\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\100\051\001\001" +
    "\000\002\001\001\000\004\052\050\001\001\000\004\101" +
    "\041\001\001\000\004\052\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\053\001\001\000\002\001\001\000" +
    "\004\027\064\001\001\000\004\102\057\001\001\000\002" +
    "\001\001\000\004\027\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\103\074\001\001\000\002\001" +
    "\001\000\004\052\073\001\001\000\004\104\071\001\001" +
    "\000\004\052\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\076\001\001\000\002" +
    "\001\001\000\004\052\u0117\001\001\000\004\060\101\001" +
    "\001\000\004\052\102\001\001\000\004\050\103\001\001" +
    "\000\026\005\111\011\123\012\107\013\114\014\116\015" +
    "\115\016\121\021\106\030\110\032\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\322\001\001\000" +
    "\022\005\111\013\321\014\116\015\115\016\121\021\106" +
    "\030\110\032\117\001\001\000\004\050\320\001\001\000" +
    "\004\050\317\001\001\000\016\031\144\033\143\036\245" +
    "\044\140\046\142\051\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\235\001\001\000\004\050\234" +
    "\001\001\000\004\050\233\001\001\000\004\033\232\001" +
    "\001\000\004\050\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\072" +
    "\222\001\001\000\016\031\144\033\143\036\141\044\140" +
    "\046\142\051\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\031\144\033\143\036\220" +
    "\044\140\046\142\051\134\001\001\000\002\001\001\000" +
    "\016\031\144\033\143\036\217\044\140\046\142\051\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\031" +
    "\144\033\143\036\216\044\140\046\142\051\134\001\001" +
    "\000\020\037\172\040\176\041\173\042\161\043\177\045" +
    "\171\050\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\151\047\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\031\144\033\143\035\154\036\153\044" +
    "\140\046\142\051\134\001\001\000\016\037\172\040\176" +
    "\041\173\042\161\043\177\045\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\031\144\033\143\036\207\044" +
    "\140\046\142\051\134\001\001\000\020\031\144\033\143" +
    "\035\206\036\153\044\140\046\142\051\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\031\144\033\143\036\205\044\140\046\142" +
    "\051\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\031\144\033\143" +
    "\036\202\044\140\046\142\051\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\037\172\040\176\041\173" +
    "\042\161\043\177\045\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\037\172\040\176\041\173\042\161" +
    "\043\177\045\171\001\001\000\002\001\001\000\016\037" +
    "\172\040\176\041\173\042\161\043\177\045\171\001\001" +
    "\000\004\047\211\001\001\000\002\001\001\000\026\005" +
    "\111\011\213\012\107\013\114\014\116\015\115\016\121" +
    "\021\106\030\110\032\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\037\172\040\176" +
    "\041\173\042\161\043\177\045\171\001\001\000\016\037" +
    "\172\040\176\041\173\042\161\043\177\045\171\001\001" +
    "\000\016\037\172\040\176\041\173\042\161\043\177\045" +
    "\171\001\001\000\002\001\001\000\016\031\144\033\143" +
    "\036\223\044\140\046\142\051\134\001\001\000\020\037" +
    "\172\040\176\041\173\042\161\043\177\045\171\050\224" +
    "\001\001\000\026\005\111\011\225\012\107\013\114\014" +
    "\116\015\115\016\121\021\106\030\110\032\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\076\243\001\001\000\012\031\144\033\143\046\142" +
    "\051\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\037\172\040\176\041\173\042\161\043\177\045\171\001" +
    "\001\000\004\050\276\001\001\000\004\073\250\001\001" +
    "\000\004\050\251\001\001\000\026\005\111\011\252\012" +
    "\107\013\114\014\116\015\115\016\121\021\106\030\110" +
    "\032\117\001\001\000\004\017\253\001\001\000\004\020" +
    "\270\001\001\000\016\031\144\033\143\036\255\044\140" +
    "\046\142\051\134\001\001\000\016\037\172\040\176\041" +
    "\173\042\161\043\177\045\171\001\001\000\004\050\264" +
    "\001\001\000\004\075\260\001\001\000\004\050\261\001" +
    "\001\000\026\005\111\011\262\012\107\013\114\014\116" +
    "\015\115\016\121\021\106\030\110\032\117\001\001\000" +
    "\004\017\263\001\001\000\002\001\001\000\026\005\111" +
    "\011\265\012\107\013\114\014\116\015\115\016\121\021" +
    "\106\030\110\032\117\001\001\000\004\017\267\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\272\001\001\000\026\005\111\011\273\012\107" +
    "\013\114\014\116\015\115\016\121\021\106\030\110\032" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\111\011\277\012\107\013\114\014" +
    "\116\015\115\016\121\021\106\030\110\032\117\001\001" +
    "\000\006\017\301\020\300\001\001\000\002\001\001\000" +
    "\006\017\305\020\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\074\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\u0104\001\001\000\002\001\001\000\004\065\372" +
    "\001\001\000\016\031\144\033\143\036\327\044\140\046" +
    "\142\051\134\001\001\000\016\037\172\040\176\041\173" +
    "\042\161\043\177\045\171\001\001\000\004\066\362\001" +
    "\001\000\016\031\144\033\143\036\332\044\140\046\142" +
    "\051\134\001\001\000\016\037\172\040\176\041\173\042" +
    "\161\043\177\045\171\001\001\000\002\001\001\000\004" +
    "\067\335\001\001\000\002\001\001\000\004\050\337\001" +
    "\001\000\026\005\111\011\340\012\107\013\114\014\116" +
    "\015\115\016\121\021\106\030\110\032\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\070\355\001\001\000\004\050\345\001\001\000\026\005" +
    "\111\011\346\012\107\013\114\014\116\015\115\016\121" +
    "\021\106\030\110\032\117\001\001\000\002\001\001\000" +
    "\004\071\353\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\356\001\001\000\026\005\111\011\357\012\107" +
    "\013\114\014\116\015\115\016\121\021\106\030\110\032" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\031\144\033\143\036\363\044\140\046" +
    "\142\051\134\001\001\000\016\037\172\040\176\041\173" +
    "\042\161\043\177\045\171\001\001\000\002\001\001\000" +
    "\004\050\366\001\001\000\026\005\111\011\367\012\107" +
    "\013\114\014\116\015\115\016\121\021\106\030\110\032" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\031\144\033\143\036\373\044\140\046" +
    "\142\051\134\001\001\000\016\037\172\040\176\041\173" +
    "\042\161\043\177\045\171\001\001\000\016\031\144\033" +
    "\143\036\375\044\140\046\142\051\134\001\001\000\016" +
    "\037\172\040\176\041\173\042\161\043\177\045\171\001" +
    "\001\000\002\001\001\000\004\050\u0100\001\001\000\026" +
    "\005\111\011\u0101\012\107\013\114\014\116\015\115\016" +
    "\121\021\106\030\110\032\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\031\144\033\143\036\u0106\044\140\046\142\051\134" +
    "\001\001\000\016\037\172\040\176\041\173\042\161\043" +
    "\177\045\171\001\001\000\016\031\144\033\143\036\u0108" +
    "\044\140\046\142\051\134\001\001\000\016\037\172\040" +
    "\176\041\173\042\161\043\177\045\171\001\001\000\002" +
    "\001\001\000\004\050\u010b\001\001\000\026\005\111\011" +
    "\u010c\012\107\013\114\014\116\015\115\016\121\021\106" +
    "\030\110\032\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\077\u0114\001\001\000\012" +
    "\031\144\033\143\046\142\051\u0111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\031\144" +
    "\033\143\046\142\051\u0115\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\u0118\001\001\000\026\005\111" +
    "\011\u0119\012\107\013\114\014\116\015\115\016\121\021" +
    "\106\030\110\032\117\001\001\000\002\001\001\000\004" +
    "\061\u011e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\u0121\001\001\000\002\001\001\000\004\052\u0123\001" +
    "\001\000\004\050\u0124\001\001\000\026\005\111\011\u0125" +
    "\012\107\013\114\014\116\015\115\016\121\021\106\030" +
    "\110\032\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u0133\001\001\000\004\025" +
    "\u012a\001\001\000\004\050\u012b\001\001\000\026\005\111" +
    "\011\u012c\012\107\013\114\014\116\015\115\016\121\021" +
    "\106\030\110\032\117\001\001\000\002\001\001\000\004" +
    "\056\u0131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\u0134\001\001\000\004\050\u0135\001\001\000\026\005" +
    "\111\011\u0136\012\107\013\114\014\116\015\115\016\121" +
    "\021\106\030\110\032\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\u014a\001\001" +
    "\000\004\050\u013b\001\001\000\010\022\u013f\023\u013d\024" +
    "\u013c\001\001\000\004\050\u0149\001\001\000\004\024\u0148" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\u0144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\u0147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\u014b\001\001\000\010\022\u014c\023" +
    "\u013d\024\u013c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\u015b\001\001\000\002\001\001\000\004\052\u015a\001" +
    "\001\000\004\054\u0158\001\001\000\004\052\u0159\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\u015d\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	@Override
	public void report_error(String message, Object info) {
		if (info instanceof String)
			System.err.println(" " + info + " " + message + "\n");
		else {
			StringBuffer m = new StringBuffer("Error ");
			if (info instanceof java_cup.runtime.Symbol) {
				m.append(("(Se ha encontrado el token \"" + ((Symbol)info).value + "\" en la linea "
					+ ((Symbol)info).left + 1 + ", columna " + ((Symbol)info).right + 1) + ")");
			}
			m.append(" : " + message);
			System.err.println(m);
		}
	}
	@Override
	public void syntax_error(Symbol s){
		System.err.println( "(Se ha encontrado el token \"" + sym.terminalNames[s.sym] + "\" en la linea " + (s.left+1) + ", columna" + (s.right+1) + ")" ); 
        expected();
	}

	public void expected(){
		List<Integer> token_list = this.expected_token_ids();
		if (token_list.size() <= 0){
			token_list = this.expected_token_ids();
		}
		String expected_tokens = "";
		for (int i = 0 ; i < token_list.size(); i++){
			int id = token_list.get(i);
			if (id == 1){
				continue;
			}
			String terminal_name = sym.terminalNames[id];
			if (i == token_list.size() - 1){
				expected_tokens += terminal_name;
			}else{
				expected_tokens += terminal_name + " , ";
			}
		}
		System.err.print("Se esperaba alguno de los siguientes tokens:" + expected_tokens);
	};

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new RuntimeException("Fatal Syntax Error");
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio_programa ::= fin_linea sentencias_principales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio_programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio_programa ::= sentencias_principales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio_programa ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias_principales ::= sentencia_principal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_principales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias_principales ::= sentencias_principales sentencia_principal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_principales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia_principal ::= declaracion_variables fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia_principal ::= declaracion_sub fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia_principal ::= declaracion_funcion fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia_principal ::= declaracion_type fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_variables ::= DIM IDENTIFICADOR AS tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Object RESULT =null;
parser.report_error("declaracion_variables: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_variables ::= DIM error NT$0 AS tipo_dato 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
parser.report_error("declaracion_variables: Se esperaba AS", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion_variables ::= DIM IDENTIFICADOR error NT$1 tipo_dato 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_sub ::= SUB IDENTIFICADOR parametros fin_linea cuerpo_funcion END SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_sub",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              Object RESULT =null;
parser.report_error("declaracion_sub: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion_sub ::= SUB error NT$2 parametros fin_linea cuerpo_funcion END SUB 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_sub",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$3 ::= 
            {
              Object RESULT =null;
parser.report_error("declaracion_sub: Se esperaba END", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion_sub ::= SUB IDENTIFICADOR parametros fin_linea cuerpo_funcion error NT$3 SUB 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_sub",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion_sub ::= SUB IDENTIFICADOR parametros fin_linea cuerpo_funcion END error 
            {
              Object RESULT =null;
		parser.report_error("declaracion_sub: Se esperaba SUB", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_sub",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion_funcion ::= FUNCTION IDENTIFICADOR parametros AS tipo_dato fin_linea cuerpo_funcion END FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$4 ::= 
            {
              Object RESULT =null;
parser.report_error("declaracion_funcion: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion_funcion ::= FUNCTION error NT$4 parametros AS tipo_dato fin_linea cuerpo_funcion END FUNCTION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$5 ::= 
            {
              Object RESULT =null;
parser.report_error("declaracion_funcion: Se esperaba AS", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_funcion ::= FUNCTION IDENTIFICADOR parametros error NT$5 tipo_dato fin_linea cuerpo_funcion END FUNCTION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$6 ::= 
            {
              Object RESULT =null;
parser.report_error("declaracion_funcion: Se esperaba END", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion_funcion ::= FUNCTION IDENTIFICADOR parametros AS tipo_dato fin_linea cuerpo_funcion error NT$6 FUNCTION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion_funcion ::= FUNCTION IDENTIFICADOR parametros AS tipo_dato fin_linea cuerpo_funcion END error 
            {
              Object RESULT =null;
		parser.report_error("declaracion_funcion: Se esperaba FUNCTION", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion_type ::= TYPE IDENTIFICADOR fin_linea cuerpo_nuevo_tipo END TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$7 ::= 
            {
              Object RESULT =null;
parser.report_error("declaracion_type: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion_type ::= TYPE error NT$7 fin_linea cuerpo_nuevo_tipo END TYPE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$8 ::= 
            {
              Object RESULT =null;
parser.report_error("declaracion_type: Se esperaba END", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion_type ::= TYPE IDENTIFICADOR fin_linea cuerpo_nuevo_tipo error NT$8 TYPE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion_type ::= TYPE IDENTIFICADOR fin_linea cuerpo_nuevo_tipo END error 
            {
              Object RESULT =null;
		parser.report_error("declaracion_type: Se esperaba TYPE", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cuerpo_funcion ::= sentencias_cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cuerpo_funcion ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencias_cuerpo_funcion ::= sentencia_cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencias_cuerpo_funcion ::= sentencias_cuerpo_funcion sentencia_cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia_cuerpo_funcion ::= declaracion_variables fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia_cuerpo_funcion ::= sentencia_for_step fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia_cuerpo_funcion ::= sentencia_do_while fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia_cuerpo_funcion ::= sentencia_if fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia_cuerpo_funcion ::= sentencia_consola fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia_cuerpo_funcion ::= sentencia_llamado_funcion fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia_cuerpo_funcion ::= sentencia_asignacion fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion STEP ENTERO_LITERAL fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$9 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia_for_step ::= FOR error NT$9 OP_IGUAL expresion TO expresion STEP ENTERO_LITERAL fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$10 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba OP_IGUAL", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia_for_step ::= FOR IDENTIFICADOR error NT$10 expresion TO expresion STEP ENTERO_LITERAL fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$11 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba TO", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion error NT$11 expresion STEP ENTERO_LITERAL fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$12 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba STEP", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion error NT$12 ENTERO_LITERAL fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$13 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba ENTERO_LITERAL", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion STEP error NT$13 fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$14 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba NEXT", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion STEP ENTERO_LITERAL fin_linea cuerpo_funcion error NT$14 IDENTIFICADOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion STEP ENTERO_LITERAL fin_linea cuerpo_funcion NEXT error 
            {
              Object RESULT =null;
		parser.report_error("sentencia_for_step: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia_do_while ::= DO WHILE expresion fin_linea cuerpo_funcion LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$15 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_do_while: Se esperaba WHILE", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia_do_while ::= DO error NT$15 expresion fin_linea cuerpo_funcion LOOP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia_do_while ::= DO WHILE expresion fin_linea cuerpo_funcion error 
            {
              Object RESULT =null;
		parser.report_error("sentencia_do_while: Se esperaba LOOP", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion sentencia_else_if sentencia_else END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$16 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_if: Se esperaba THEN", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia_if ::= IF expresion error NT$16 fin_linea cuerpo_funcion sentencia_else_if sentencia_else END IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$17 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_if: Se esperaba END", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion sentencia_else_if sentencia_else error NT$17 IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion sentencia_else_if sentencia_else_if END error 
            {
              Object RESULT =null;
		parser.report_error("sentencia_if: Se esperaba IF", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion sentencia_else END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia_else_if ::= ELSE_IF expresion THEN fin_linea cuerpo_funcion sentencia_else_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$18 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_else_if: Se esperaba THEN", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia_else_if ::= ELSE_IF expresion error NT$18 fin_linea cuerpo_funcion sentencia_else_if 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia_else_if ::= ELSE_IF expresion THEN fin_linea cuerpo_funcion error 
            {
              Object RESULT =null;
		parser.report_error("sentencia_else_if: Se esperaba sentencia_else_if", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia_else ::= ELSE fin_linea cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia_consola ::= WRITE PAR_IZQ termino PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$19 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_consola WRITE: Se esperaba \"(\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia_consola ::= WRITE error NT$19 PAR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencia_consola ::= WRITE PAR_IZQ termino error 
            {
              Object RESULT =null;
		parser.report_error("sentencia_consola WRITE: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencia_consola ::= READ PAR_IZQ termino PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$20 ::= 
            {
              Object RESULT =null;
parser.report_error("sentencia_consola READ: Se esperaba \"(\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentencia_consola ::= READ error NT$20 termino PAR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentencia_consola ::= READ PAR_IZQ termino error 
            {
              Object RESULT =null;
		parser.report_error("sentencia_consola READ: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cuerpo_nuevo_tipo ::= sentencias_cuerpo_nuevo_tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_nuevo_tipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cuerpo_nuevo_tipo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_nuevo_tipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencias_cuerpo_nuevo_tipo ::= declaracion_variables_nuevo_tipo fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_nuevo_tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencias_cuerpo_nuevo_tipo ::= sentencias_cuerpo_nuevo_tipo declaracion_variables_nuevo_tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_nuevo_tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // declaracion_variables_nuevo_tipo ::= IDENTIFICADOR AS tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables_nuevo_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parametros ::= PAR_IZQ PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parametros ::= PAR_IZQ error 
            {
              Object RESULT =null;
		parser.report_error("parametros: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parametros ::= PAR_IZQ lista_parametros PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parametros ::= PAR_IZQ lista_parametros error 
            {
              Object RESULT =null;
		parser.report_error("parametros: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // lista_parametros ::= forma_de_paso IDENTIFICADOR AS tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$21 ::= 
            {
              Object RESULT =null;
parser.report_error("lista_parametros: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // lista_parametros ::= forma_de_paso error NT$21 AS tipo_dato 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$22 ::= 
            {
              Object RESULT =null;
parser.report_error("lista_parametros: Se esperaba AS", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // lista_parametros ::= forma_de_paso IDENTIFICADOR error NT$22 tipo_dato 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lista_parametros ::= lista_parametros COMA forma_de_paso IDENTIFICADOR AS tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$23 ::= 
            {
              Object RESULT =null;
parser.report_error("lista_parametros: Se esperaba COMA", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lista_parametros ::= lista_parametros error NT$23 forma_de_paso IDENTIFICADOR AS tipo_dato 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$24 ::= 
            {
              Object RESULT =null;
parser.report_error("lista_parametros: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lista_parametros ::= lista_parametros COMA forma_de_paso error NT$24 AS tipo_dato 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$25 ::= 
            {
              Object RESULT =null;
parser.report_error("lista_parametros: Se esperaba AS", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lista_parametros ::= lista_parametros COMA forma_de_paso IDENTIFICADOR error NT$25 tipo_dato 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // forma_de_paso ::= BYVAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forma_de_paso",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // forma_de_paso ::= BYREF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forma_de_paso",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // receptor_asignacion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("receptor_asignacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // receptor_asignacion ::= propiedad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("receptor_asignacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentencia_llamado_funcion ::= CALL llamado_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_llamado_funcion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentencia_llamado_funcion ::= CALL error 
            {
              Object RESULT =null;
		parser.report_error("Sentencia llamado funcion: Se esperaba el llamado a la funcion", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_llamado_funcion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // llamado_funcion ::= IDENTIFICADOR argumentos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // argumentos ::= PAR_IZQ PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // argumentos ::= PAR_IZQ error 
            {
              Object RESULT =null;
		parser.report_error("Argumentos: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // argumentos ::= PAR_IZQ lista_argumentos PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // argumentos ::= PAR_IZQ lista_argumentos error 
            {
              Object RESULT =null;
		parser.report_error("Argumentos: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // lista_argumentos ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // lista_argumentos ::= expresion COMA lista_argumentos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresion ::= expresion operador_aritmetico expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresion ::= expresion operador_relacional expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresion ::= expresion operador_logico expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expresion ::= OP_NOT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresion ::= operador_negacion expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresion ::= termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operador_aritmetico ::= operador_aritmetico_suma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operador_aritmetico ::= operador_aritmetico_multiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operador_aritmetico_suma ::= OP_SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_suma",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operador_aritmetico_suma ::= OP_RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_suma",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operador_aritmetico_multiplicacion ::= OP_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_multiplicacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // operador_aritmetico_multiplicacion ::= OP_DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_multiplicacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // operador_relacional ::= OP_MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // operador_relacional ::= OP_MENOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // operador_relacional ::= OP_MAYOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // operador_relacional ::= OP_MENOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // operador_relacional ::= operador_distinto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // operador_logico ::= OP_AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // operador_logico ::= OP_OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // operador_negacion ::= OP_RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_negacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // operador_distinto ::= OP_MENOR_QUE OP_MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_distinto",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // operador_distinto ::= OP_MENOR_QUE error 
            {
              Object RESULT =null;
		parser.report_error("operador_distinto: Se esperaba OP_MAYOR_QUE", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_distinto",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // propiedad ::= IDENTIFICADOR cadena_propiedades 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("propiedad",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // cadena_propiedades ::= PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadena_propiedades",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // cadena_propiedades ::= PUNTO IDENTIFICADOR cadena_propiedades 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadena_propiedades",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // fin_linea ::= FIN_LINEA fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_linea",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // fin_linea ::= FIN_LINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_linea",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // termino ::= receptor_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // termino ::= ENTERO_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // termino ::= REAL_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // termino ::= CARACTER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // termino ::= CADENA_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // termino ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // termino ::= llamado_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // tipo_dato ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // tipo_dato ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // tipo_dato ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // tipo_dato ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // tipo_dato ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
