
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package VisualBasic;

import java_cup.runtime.*;
import java.io.File;
import java.util.List;
import abstractSyntaxTree.AST;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\266\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\002\000\002\003\003\000\002\003\005" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\007\000\002\056\002\000\002" +
    "\005\010\000\002\057\002\000\002\005\010\000\002\005" +
    "\007\000\002\005\010\000\002\006\012\000\002\060\002" +
    "\000\002\006\013\000\002\061\002\000\002\006\013\000" +
    "\002\006\012\000\002\007\012\000\002\062\002\000\002" +
    "\007\013\000\002\063\002\000\002\007\013\000\002\007" +
    "\012\000\002\010\011\000\002\064\002\000\002\010\012" +
    "\000\002\065\002\000\002\010\012\000\002\010\011\000" +
    "\002\011\003\000\002\011\002\000\002\012\003\000\002" +
    "\012\004\000\002\013\005\000\002\013\007\000\002\013" +
    "\010\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\014\016\000\002\066\002\000\002\014\017\000\002" +
    "\067\002\000\002\014\017\000\002\070\002\000\002\014" +
    "\017\000\002\071\002\000\002\014\017\000\002\072\002" +
    "\000\002\014\017\000\002\073\002\000\002\014\017\000" +
    "\002\014\016\000\002\015\010\000\002\074\002\000\002" +
    "\015\011\000\002\075\002\000\002\015\011\000\002\076" +
    "\002\000\002\015\011\000\002\015\010\000\002\016\013" +
    "\000\002\077\002\000\002\016\014\000\002\100\002\000" +
    "\002\016\014\000\002\016\013\000\002\016\011\000\002" +
    "\101\002\000\002\016\012\000\002\016\011\000\002\016" +
    "\012\000\002\017\003\000\002\017\004\000\002\020\007" +
    "\000\002\021\005\000\002\022\005\000\002\022\006\000" +
    "\002\102\002\000\002\022\006\000\002\022\006\000\002" +
    "\022\006\000\002\022\005\000\002\103\002\000\002\022" +
    "\007\000\002\022\006\000\002\023\003\000\002\023\002" +
    "\000\002\024\004\000\002\024\005\000\002\025\005\000" +
    "\002\026\004\000\002\026\004\000\002\026\005\000\002" +
    "\026\005\000\002\027\005\000\002\027\006\000\002\104" +
    "\002\000\002\027\007\000\002\105\002\000\002\027\007" +
    "\000\002\027\010\000\002\106\002\000\002\027\011\000" +
    "\002\107\002\000\002\027\011\000\002\110\002\000\002" +
    "\027\011\000\002\030\003\000\002\030\003\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\032\003" +
    "\000\002\032\003\000\002\033\004\000\002\033\004\000" +
    "\002\034\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\005\000\002\035\005\000\002\036\003\000\002\036" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\004\000\002\037\004\000" +
    "\002\037\003\000\002\040\003\000\002\040\003\000\002" +
    "\041\003\000\002\041\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\043\003\000\002\043\003\000\002" +
    "\045\003\000\002\046\004\000\002\046\004\000\002\047" +
    "\004\000\002\050\004\000\002\050\005\000\002\051\004" +
    "\000\002\051\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\002\000\002\055\003\000\002" +
    "\055\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0177\000\022\002\ufffe\013\uff4e\014\uff4e\016\005\017" +
    "\014\021\uff4e\022\uff4e\063\017\001\002\000\004\002\u0179" +
    "\001\002\000\012\013\uff50\014\uff50\021\uff50\022\uff50\001" +
    "\002\000\006\002\ufff8\063\ufff8\001\002\000\006\002\ufffa" +
    "\063\ufffa\001\002\000\006\002\ufffd\063\ufffd\001\002\000" +
    "\006\002\ufff9\063\ufff9\001\002\000\006\002\ufffb\063\ufffb" +
    "\001\002\000\012\013\027\014\025\021\024\022\026\001" +
    "\002\000\012\013\uff4f\014\uff4f\021\uff4f\022\uff4f\001\002" +
    "\000\016\013\uff4e\014\uff4e\016\005\017\014\021\uff4e\022" +
    "\uff4e\001\002\000\006\002\uffff\063\017\001\002\000\074" +
    "\003\uff5f\004\uff5f\005\uff5f\013\uff5f\014\uff5f\016\uff5f\017" +
    "\uff5f\021\uff5f\022\uff5f\024\uff5f\035\uff5f\037\uff5f\044\uff5f" +
    "\046\uff5f\047\uff5f\050\uff5f\051\uff5f\054\uff5f\055\uff5f\056" +
    "\uff5f\063\017\064\uff5f\066\uff5f\067\uff5f\070\uff5f\071\uff5f" +
    "\072\uff5f\073\uff5f\074\uff5f\001\002\000\072\003\uff60\004" +
    "\uff60\005\uff60\013\uff60\014\uff60\016\uff60\017\uff60\021\uff60" +
    "\022\uff60\024\uff60\035\uff60\037\uff60\044\uff60\046\uff60\047" +
    "\uff60\050\uff60\051\uff60\054\uff60\055\uff60\056\uff60\064\uff60" +
    "\066\uff60\067\uff60\070\uff60\071\uff60\072\uff60\073\uff60\074" +
    "\uff60\001\002\000\016\013\uff4e\014\uff4e\016\005\017\014" +
    "\021\uff4e\022\uff4e\001\002\000\006\002\ufffc\063\ufffc\001" +
    "\002\000\006\002\001\063\017\001\002\000\006\003\u0168" +
    "\072\u0169\001\002\000\006\003\u015b\072\u015c\001\002\000" +
    "\006\003\065\072\066\001\002\000\006\003\030\072\031" +
    "\001\002\000\004\063\uffe3\001\002\000\004\063\017\001" +
    "\002\000\010\003\uffa1\050\uffa1\072\035\001\002\000\004" +
    "\063\017\001\002\000\010\003\uffa2\050\uffa2\072\035\001" +
    "\002\000\004\015\045\001\002\000\006\003\037\050\040" +
    "\001\002\000\004\013\uffe1\001\002\000\006\003\041\013" +
    "\042\001\002\000\006\002\uffdf\063\uffdf\001\002\000\006" +
    "\002\uffe4\063\uffe4\001\002\000\004\013\044\001\002\000" +
    "\006\002\uffe0\063\uffe0\001\002\000\016\006\053\007\050" +
    "\010\052\011\051\012\054\072\047\001\002\000\004\063" +
    "\uff9e\001\002\000\014\002\uff51\003\uff51\061\uff51\063\uff51" +
    "\065\uff51\001\002\000\014\002\uff55\003\uff55\061\uff55\063" +
    "\uff55\065\uff55\001\002\000\014\002\uff53\003\uff53\061\uff53" +
    "\063\uff53\065\uff53\001\002\000\014\002\uff52\003\uff52\061" +
    "\uff52\063\uff52\065\uff52\001\002\000\014\002\uff56\003\uff56" +
    "\061\uff56\063\uff56\065\uff56\001\002\000\014\002\uff54\003" +
    "\uff54\061\uff54\063\uff54\065\uff54\001\002\000\004\063\017" +
    "\001\002\000\010\003\uff9f\050\uff9f\072\uff9f\001\002\000" +
    "\010\003\uffa0\050\uffa0\072\uffa0\001\002\000\004\063\017" +
    "\001\002\000\006\050\uffa1\072\035\001\002\000\004\050" +
    "\063\001\002\000\004\013\064\001\002\000\006\002\uffe2" +
    "\063\uffe2\001\002\000\004\064\uffe9\001\002\000\004\064" +
    "\070\001\002\000\004\063\017\001\002\000\014\003\072" +
    "\025\071\026\073\065\077\072\074\001\002\000\006\003" +
    "\uff8b\072\uff8b\001\002\000\004\063\uff9c\001\002\000\006" +
    "\003\uff8c\072\uff8c\001\002\000\004\015\135\001\002\000" +
    "\010\003\113\061\112\065\114\001\002\000\006\003\100" +
    "\072\101\001\002\000\004\063\uff9d\001\002\000\004\015" +
    "\uff97\001\002\000\006\003\103\015\102\001\002\000\016" +
    "\006\053\007\050\010\052\011\051\012\054\072\047\001" +
    "\002\000\016\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95" +
    "\072\uff95\001\002\000\016\006\053\007\050\010\052\011" +
    "\051\012\054\072\047\001\002\000\010\003\uff94\061\uff94" +
    "\065\uff94\001\002\000\010\003\uff98\061\uff98\065\uff98\001" +
    "\002\000\004\015\110\001\002\000\016\006\053\007\050" +
    "\010\052\011\051\012\054\072\047\001\002\000\010\003" +
    "\uff96\061\uff96\065\uff96\001\002\000\006\025\071\026\073" +
    "\001\002\000\010\025\uff92\026\uff92\063\uff9a\001\002\000" +
    "\004\063\uff9b\001\002\000\006\025\071\026\073\001\002" +
    "\000\004\072\117\001\002\000\004\015\120\001\002\000" +
    "\016\006\053\007\050\010\052\011\051\012\054\072\047" +
    "\001\002\000\010\003\uff91\061\uff91\065\uff91\001\002\000" +
    "\006\003\123\072\124\001\002\000\004\015\uff90\001\002" +
    "\000\006\003\126\015\125\001\002\000\016\006\053\007" +
    "\050\010\052\011\051\012\054\072\047\001\002\000\016" +
    "\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\072\uff8e\001" +
    "\002\000\016\006\053\007\050\010\052\011\051\012\054" +
    "\072\047\001\002\000\010\003\uff8d\061\uff8d\065\uff8d\001" +
    "\002\000\010\003\uff93\061\uff93\065\uff93\001\002\000\004" +
    "\015\133\001\002\000\016\006\053\007\050\010\052\011" +
    "\051\012\054\072\047\001\002\000\010\003\uff8f\061\uff8f" +
    "\065\uff8f\001\002\000\016\006\053\007\050\010\052\011" +
    "\051\012\054\072\047\001\002\000\010\003\uff99\061\uff99" +
    "\065\uff99\001\002\000\050\003\uffdd\004\157\005\141\014" +
    "\175\024\145\035\153\037\176\044\156\050\uffdd\051\177" +
    "\056\161\064\166\066\162\067\152\070\173\071\142\072" +
    "\170\073\171\074\143\001\002\000\032\027\uff5e\030\uff5e" +
    "\031\uff5e\032\uff5e\033\uff5e\034\uff5e\036\uff5e\037\uff5e\040" +
    "\uff5e\041\uff5e\042\uff5e\043\u0152\001\002\000\006\003\u0149" +
    "\064\u014a\001\002\000\050\003\uff5a\027\uff5a\030\uff5a\031" +
    "\uff5a\032\uff5a\033\uff5a\034\uff5a\036\uff5a\037\uff5a\040\uff5a" +
    "\041\uff5a\042\uff5a\043\uff5a\045\uff5a\052\uff5a\053\uff5a\061" +
    "\uff5a\063\uff5a\065\uff5a\001\002\000\050\003\uff58\027\uff58" +
    "\030\uff58\031\uff58\032\uff58\033\uff58\034\uff58\036\uff58\037" +
    "\uff58\040\uff58\041\uff58\042\uff58\043\uff58\045\uff58\052\uff58" +
    "\053\uff58\061\uff58\063\uff58\065\uff58\001\002\000\060\003" +
    "\uffdc\004\uffdc\005\uffdc\014\uffdc\024\uffdc\035\uffdc\037\uffdc" +
    "\044\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\064\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc" +
    "\072\uffdc\073\uffdc\074\uffdc\001\002\000\006\003\u0147\072" +
    "\334\001\002\000\004\063\017\001\002\000\032\027\221" +
    "\030\225\031\217\032\220\033\210\034\212\036\216\037" +
    "\226\040\231\041\222\042\223\043\u0144\001\002\000\004" +
    "\063\017\001\002\000\006\003\u013d\050\u013e\001\002\000" +
    "\050\003\uff5c\027\uff5c\030\uff5c\031\uff5c\032\uff5c\033\uff5c" +
    "\034\uff5c\036\uff5c\037\uff5c\040\uff5c\041\uff5c\042\uff5c\043" +
    "\uff5c\045\uff5c\052\uff5c\053\uff5c\061\uff5c\063\uff5c\065\uff5c" +
    "\001\002\000\026\035\153\037\176\064\166\066\162\067" +
    "\152\070\173\071\142\072\170\073\171\074\143\001\002" +
    "\000\060\003\uffde\004\157\005\141\014\175\024\145\035" +
    "\153\037\176\044\156\046\uffde\047\uffde\050\uffde\051\177" +
    "\054\uffde\055\uffde\056\161\064\166\066\162\067\152\070" +
    "\173\071\142\072\170\073\171\074\143\001\002\000\050" +
    "\003\uff57\027\uff57\030\uff57\031\uff57\032\uff57\033\uff57\034" +
    "\uff57\036\uff57\037\uff57\040\uff57\041\uff57\042\uff57\043\uff57" +
    "\045\uff57\052\uff57\053\uff57\061\uff57\063\uff57\065\uff57\001" +
    "\002\000\026\035\153\037\176\064\166\066\162\067\152" +
    "\070\173\071\142\072\170\073\171\074\143\001\002\000" +
    "\006\003\u010c\064\u010d\001\002\000\034\027\uff86\030\uff86" +
    "\031\uff86\032\uff86\033\uff86\034\uff86\036\uff86\037\uff86\040" +
    "\uff86\041\uff86\042\uff86\043\uff86\064\340\001\002\000\006" +
    "\003\365\057\366\001\002\000\050\003\uff5d\027\uff5d\030" +
    "\uff5d\031\uff5d\032\uff5d\033\uff5d\034\uff5d\036\uff5d\037\uff5d" +
    "\040\uff5d\041\uff5d\042\uff5d\043\uff5d\045\uff5d\052\uff5d\053" +
    "\uff5d\061\uff5d\063\uff5d\065\uff5d\001\002\000\004\063\017" +
    "\001\002\000\026\035\153\037\176\064\166\066\162\067" +
    "\152\070\173\071\142\072\170\073\171\074\143\001\002" +
    "\000\050\003\uff76\027\uff76\030\uff76\031\uff76\032\uff76\033" +
    "\uff76\034\uff76\036\uff76\037\uff76\040\uff76\041\uff76\042\uff76" +
    "\043\uff76\045\uff76\052\uff76\053\uff76\061\uff76\063\uff76\065" +
    "\uff76\001\002\000\026\035\153\037\176\064\166\066\162" +
    "\067\152\070\173\071\142\072\170\073\171\074\143\001" +
    "\002\000\004\063\017\001\002\000\054\003\uff87\027\uff87" +
    "\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87\036\uff87\037" +
    "\uff87\040\uff87\041\uff87\042\uff87\043\uff87\045\uff87\052\uff87" +
    "\053\uff87\061\uff87\062\353\063\uff87\064\340\065\uff87\001" +
    "\002\000\050\003\uff59\027\uff59\030\uff59\031\uff59\032\uff59" +
    "\033\uff59\034\uff59\036\uff59\037\uff59\040\uff59\041\uff59\042" +
    "\uff59\043\uff59\045\uff59\052\uff59\053\uff59\061\uff59\063\uff59" +
    "\065\uff59\001\002\000\004\063\017\001\002\000\050\003" +
    "\uff5b\027\uff5b\030\uff5b\031\uff5b\032\uff5b\033\uff5b\034\uff5b" +
    "\036\uff5b\037\uff5b\040\uff5b\041\uff5b\042\uff5b\043\uff5b\045" +
    "\uff5b\052\uff5b\053\uff5b\061\uff5b\063\uff5b\065\uff5b\001\002" +
    "\000\004\063\017\001\002\000\004\072\327\001\002\000" +
    "\026\035\uff66\037\uff66\064\uff66\066\uff66\067\uff66\070\uff66" +
    "\071\uff66\072\uff66\073\uff66\074\uff66\001\002\000\006\003" +
    "\200\072\201\001\002\000\004\043\uffd0\001\002\000\006" +
    "\003\202\043\203\001\002\000\026\035\uffce\037\uffce\064" +
    "\uffce\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce" +
    "\074\uffce\001\002\000\026\035\153\037\176\064\166\066" +
    "\162\067\152\070\173\071\142\072\170\073\171\074\143" +
    "\001\002\000\036\003\224\027\221\030\225\031\217\032" +
    "\220\033\210\034\212\036\216\037\226\040\231\041\222" +
    "\042\223\043\207\052\230\001\002\000\050\003\uff86\027" +
    "\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86\036\uff86" +
    "\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\045\uff86\052" +
    "\uff86\053\uff86\061\uff86\063\uff86\065\uff86\001\002\000\050" +
    "\003\uff5e\027\uff5e\030\uff5e\031\uff5e\032\uff5e\033\uff5e\034" +
    "\uff5e\036\uff5e\037\uff5e\040\uff5e\041\uff5e\042\uff5e\043\uff5e" +
    "\045\uff5e\052\uff5e\053\uff5e\061\uff5e\063\uff5e\065\uff5e\001" +
    "\002\000\026\035\uff6a\037\uff6a\064\uff6a\066\uff6a\067\uff6a" +
    "\070\uff6a\071\uff6a\072\uff6a\073\uff6a\074\uff6a\001\002\000" +
    "\026\035\uff68\037\uff68\064\uff68\066\uff68\067\uff68\070\uff68" +
    "\071\uff68\072\uff68\073\uff68\074\uff68\001\002\000\026\035" +
    "\uff74\037\uff74\064\uff74\066\uff74\067\uff74\070\uff74\071\uff74" +
    "\072\uff74\073\uff74\074\uff74\001\002\000\026\035\uff67\037" +
    "\uff67\064\uff67\066\uff67\067\uff67\070\uff67\071\uff67\072\uff67" +
    "\073\uff67\074\uff67\001\002\000\026\035\uff75\037\uff75\064" +
    "\uff75\066\uff75\067\uff75\070\uff75\071\uff75\072\uff75\073\uff75" +
    "\074\uff75\001\002\000\026\035\153\037\176\064\166\066" +
    "\162\067\152\070\173\071\142\072\170\073\171\074\143" +
    "\001\002\000\026\035\153\037\176\064\166\066\162\067" +
    "\152\070\173\071\142\072\170\073\171\074\143\001\002" +
    "\000\026\035\uff73\037\uff73\064\uff73\066\uff73\067\uff73\070" +
    "\uff73\071\uff73\072\uff73\073\uff73\074\uff73\001\002\000\026" +
    "\035\uff6c\037\uff6c\064\uff6c\066\uff6c\067\uff6c\070\uff6c\071" +
    "\uff6c\072\uff6c\073\uff6c\074\uff6c\001\002\000\026\035\uff6b" +
    "\037\uff6b\064\uff6b\066\uff6b\067\uff6b\070\uff6b\071\uff6b\072" +
    "\uff6b\073\uff6b\074\uff6b\001\002\000\026\035\uff6e\037\uff6e" +
    "\064\uff6e\066\uff6e\067\uff6e\070\uff6e\071\uff6e\072\uff6e\073" +
    "\uff6e\074\uff6e\001\002\000\026\035\uff6f\037\uff6f\064\uff6f" +
    "\066\uff6f\067\uff6f\070\uff6f\071\uff6f\072\uff6f\073\uff6f\074" +
    "\uff6f\001\002\000\026\035\uff71\037\uff71\064\uff71\066\uff71" +
    "\067\uff71\070\uff71\071\uff71\072\uff71\073\uff71\074\uff71\001" +
    "\002\000\026\035\uffcc\037\uffcc\064\uffcc\066\uffcc\067\uffcc" +
    "\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\001\002\000" +
    "\032\003\267\027\266\035\uff6d\037\uff6d\064\uff6d\066\uff6d" +
    "\067\uff6d\070\uff6d\071\uff6d\072\uff6d\073\uff6d\074\uff6d\001" +
    "\002\000\026\035\uff72\037\uff72\064\uff72\066\uff72\067\uff72" +
    "\070\uff72\071\uff72\072\uff72\073\uff72\074\uff72\001\002\000" +
    "\026\035\uff69\037\uff69\064\uff69\066\uff69\067\uff69\070\uff69" +
    "\071\uff69\072\uff69\073\uff69\074\uff69\001\002\000\026\035" +
    "\153\037\176\064\166\066\162\067\152\070\173\071\142" +
    "\072\170\073\171\074\143\001\002\000\026\035\uff70\037" +
    "\uff70\064\uff70\066\uff70\067\uff70\070\uff70\071\uff70\072\uff70" +
    "\073\uff70\074\uff70\001\002\000\026\035\153\037\176\064" +
    "\166\066\162\067\152\070\173\071\142\072\170\073\171" +
    "\074\143\001\002\000\050\003\uff7a\027\221\030\225\031" +
    "\217\032\220\033\210\034\212\036\216\037\226\040\231" +
    "\041\222\042\223\043\207\045\uff7a\052\uff7a\053\uff7a\061" +
    "\uff7a\063\uff7a\065\uff7a\001\002\000\036\003\236\027\221" +
    "\030\225\031\217\032\220\033\210\034\212\036\216\037" +
    "\226\040\231\041\222\042\223\043\207\053\235\001\002" +
    "\000\010\003\247\066\242\067\240\001\002\000\006\066" +
    "\uffca\067\uffca\001\002\000\006\066\242\067\240\001\002" +
    "\000\004\063\uff4c\001\002\000\004\063\017\001\002\000" +
    "\004\063\uff4d\001\002\000\046\004\157\005\141\014\175" +
    "\024\145\035\153\037\176\044\156\051\177\054\uffdd\056" +
    "\161\064\166\066\162\067\152\070\173\071\142\072\170" +
    "\073\171\074\143\001\002\000\004\054\245\001\002\000" +
    "\004\072\246\001\002\000\004\063\uffc9\001\002\000\004" +
    "\063\uffc8\001\002\000\004\063\017\001\002\000\050\003" +
    "\uffdd\004\157\005\141\014\175\024\145\035\153\037\176" +
    "\044\156\051\177\054\uffdd\056\161\064\166\066\162\067" +
    "\152\070\173\071\142\072\170\073\171\074\143\001\002" +
    "\000\006\003\253\054\254\001\002\000\004\072\uffc6\001" +
    "\002\000\006\003\255\072\256\001\002\000\004\063\uffc4" +
    "\001\002\000\004\063\uffd1\001\002\000\004\072\260\001" +
    "\002\000\004\063\uffc5\001\002\000\004\063\017\001\002" +
    "\000\046\004\157\005\141\014\175\024\145\035\153\037" +
    "\176\044\156\051\177\054\uffdd\056\161\064\166\066\162" +
    "\067\152\070\173\071\142\072\170\073\171\074\143\001" +
    "\002\000\004\054\264\001\002\000\004\072\265\001\002" +
    "\000\004\063\uffc7\001\002\000\026\035\uff65\037\uff65\064" +
    "\uff65\066\uff65\067\uff65\070\uff65\071\uff65\072\uff65\073\uff65" +
    "\074\uff65\001\002\000\026\035\uff64\037\uff64\064\uff64\066" +
    "\uff64\067\uff64\070\uff64\071\uff64\072\uff64\073\uff64\074\uff64" +
    "\001\002\000\026\035\153\037\176\064\166\066\162\067" +
    "\152\070\173\071\142\072\170\073\171\074\143\001\002" +
    "\000\034\027\221\030\225\031\217\032\220\033\210\034" +
    "\212\036\216\037\226\040\231\041\222\042\223\043\207" +
    "\053\272\001\002\000\006\066\242\067\240\001\002\000" +
    "\004\063\017\001\002\000\046\004\157\005\141\014\175" +
    "\024\145\035\153\037\176\044\156\051\177\054\uffdd\056" +
    "\161\064\166\066\162\067\152\070\173\071\142\072\170" +
    "\073\171\074\143\001\002\000\004\054\276\001\002\000" +
    "\004\072\277\001\002\000\004\063\uffcb\001\002\000\050" +
    "\003\uff7b\027\221\030\225\031\217\032\220\033\210\034" +
    "\212\036\216\037\226\040\231\041\222\042\223\043\207" +
    "\045\uff7b\052\uff7b\053\uff7b\061\uff7b\063\uff7b\065\uff7b\001" +
    "\002\000\050\003\uff7c\027\221\030\225\031\217\032\220" +
    "\033\210\034\212\036\216\037\226\040\231\041\222\042" +
    "\223\043\207\045\uff7c\052\uff7c\053\uff7c\061\uff7c\063\uff7c" +
    "\065\uff7c\001\002\000\026\035\153\037\176\064\166\066" +
    "\162\067\152\070\173\071\142\072\170\073\171\074\143" +
    "\001\002\000\034\027\221\030\225\031\217\032\220\033" +
    "\210\034\212\036\216\037\226\040\231\041\222\042\223" +
    "\043\207\052\304\001\002\000\026\035\153\037\176\064" +
    "\166\066\162\067\152\070\173\071\142\072\170\073\171" +
    "\074\143\001\002\000\034\027\221\030\225\031\217\032" +
    "\220\033\210\034\212\036\216\037\226\040\231\041\222" +
    "\042\223\043\207\053\306\001\002\000\006\066\242\067" +
    "\240\001\002\000\004\063\017\001\002\000\046\004\157" +
    "\005\141\014\175\024\145\035\153\037\176\044\156\051" +
    "\177\054\uffdd\056\161\064\166\066\162\067\152\070\173" +
    "\071\142\072\170\073\171\074\143\001\002\000\004\054" +
    "\312\001\002\000\004\072\313\001\002\000\004\063\uffcd" +
    "\001\002\000\004\043\315\001\002\000\026\035\153\037" +
    "\176\064\166\066\162\067\152\070\173\071\142\072\170" +
    "\073\171\074\143\001\002\000\034\027\221\030\225\031" +
    "\217\032\220\033\210\034\212\036\216\037\226\040\231" +
    "\041\222\042\223\043\207\052\317\001\002\000\026\035" +
    "\153\037\176\064\166\066\162\067\152\070\173\071\142" +
    "\072\170\073\171\074\143\001\002\000\034\027\221\030" +
    "\225\031\217\032\220\033\210\034\212\036\216\037\226" +
    "\040\231\041\222\042\223\043\207\053\321\001\002\000" +
    "\006\066\242\067\240\001\002\000\004\063\017\001\002" +
    "\000\046\004\157\005\141\014\175\024\145\035\153\037" +
    "\176\044\156\051\177\054\uffdd\056\161\064\166\066\162" +
    "\067\152\070\173\071\142\072\170\073\171\074\143\001" +
    "\002\000\004\054\325\001\002\000\004\072\326\001\002" +
    "\000\004\063\uffcf\001\002\000\004\015\330\001\002\000" +
    "\020\006\053\007\050\010\052\011\051\012\054\020\331" +
    "\072\047\001\002\000\004\072\334\001\002\000\004\063" +
    "\017\001\002\000\060\003\uffd9\004\uffd9\005\uffd9\014\uffd9" +
    "\024\uffd9\035\uffd9\037\uffd9\044\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\054\uffd9\055\uffd9\056\uffd9\064\uffd9\066\uffd9" +
    "\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\001" +
    "\002\000\004\064\340\001\002\000\004\063\017\001\002" +
    "\000\060\003\uffd8\004\uffd8\005\uffd8\014\uffd8\024\uffd8\035" +
    "\uffd8\037\uffd8\044\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\054\uffd8\055\uffd8\056\uffd8\064\uffd8\066\uffd8\067\uffd8\070" +
    "\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\001\002\000\052" +
    "\002\uff83\003\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033" +
    "\uff83\034\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83" +
    "\043\uff83\045\uff83\052\uff83\053\uff83\061\uff83\063\uff83\065" +
    "\uff83\001\002\000\032\003\343\035\153\037\176\064\166" +
    "\065\344\066\162\067\152\070\173\071\142\072\170\073" +
    "\171\074\143\001\002\000\040\003\uff7e\027\221\030\225" +
    "\031\217\032\220\033\210\034\212\036\216\037\226\040" +
    "\231\041\222\042\223\043\207\061\uff7e\065\uff7e\001\002" +
    "\000\010\003\346\061\345\065\347\001\002\000\052\002" +
    "\uff81\003\uff81\027\uff81\030\uff81\031\uff81\032\uff81\033\uff81" +
    "\034\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043" +
    "\uff81\045\uff81\052\uff81\053\uff81\061\uff81\063\uff81\065\uff81" +
    "\001\002\000\052\002\uff82\003\uff82\027\uff82\030\uff82\031" +
    "\uff82\032\uff82\033\uff82\034\uff82\036\uff82\037\uff82\040\uff82" +
    "\041\uff82\042\uff82\043\uff82\045\uff82\052\uff82\053\uff82\061" +
    "\uff82\063\uff82\065\uff82\001\002\000\026\035\153\037\176" +
    "\064\166\066\162\067\152\070\173\071\142\072\170\073" +
    "\171\074\143\001\002\000\052\002\uff7f\003\uff7f\027\uff7f" +
    "\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\036\uff7f\037" +
    "\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\045\uff7f\052\uff7f" +
    "\053\uff7f\061\uff7f\063\uff7f\065\uff7f\001\002\000\052\002" +
    "\uff80\003\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80" +
    "\034\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043" +
    "\uff80\045\uff80\052\uff80\053\uff80\061\uff80\063\uff80\065\uff80" +
    "\001\002\000\040\003\uff7d\027\221\030\225\031\217\032" +
    "\220\033\210\034\212\036\216\037\226\040\231\041\222" +
    "\042\223\043\207\061\uff7d\065\uff7d\001\002\000\060\003" +
    "\uffd6\004\uffd6\005\uffd6\014\uffd6\024\uffd6\035\uffd6\037\uffd6" +
    "\044\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\054\uffd6\055" +
    "\uffd6\056\uffd6\064\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6" +
    "\072\uffd6\073\uffd6\074\uffd6\001\002\000\060\003\uffd4\004" +
    "\uffd4\005\uffd4\014\uffd4\024\uffd4\035\uffd4\037\uffd4\044\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\051\uffd4\054\uffd4\055\uffd4\056" +
    "\uffd4\064\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4" +
    "\073\uffd4\074\uffd4\001\002\000\004\072\357\001\002\000" +
    "\054\003\uff63\027\uff63\030\uff63\031\uff63\032\uff63\033\uff63" +
    "\034\uff63\036\uff63\037\uff63\040\uff63\041\uff63\042\uff63\043" +
    "\uff63\045\uff63\052\uff63\053\uff63\061\uff63\062\355\063\uff63" +
    "\064\uff63\065\uff63\001\002\000\004\072\356\001\002\000" +
    "\054\003\uff61\027\uff61\030\uff61\031\uff61\032\uff61\033\uff61" +
    "\034\uff61\036\uff61\037\uff61\040\uff61\041\uff61\042\uff61\043" +
    "\uff61\045\uff61\052\uff61\053\uff61\061\uff61\062\uff61\063\uff61" +
    "\064\uff61\065\uff61\001\002\000\054\003\uff62\027\uff62\030" +
    "\uff62\031\uff62\032\uff62\033\uff62\034\uff62\036\uff62\037\uff62" +
    "\040\uff62\041\uff62\042\uff62\043\uff62\045\uff62\052\uff62\053" +
    "\uff62\061\uff62\062\uff62\063\uff62\064\uff62\065\uff62\001\002" +
    "\000\060\003\uffd2\004\uffd2\005\uffd2\014\uffd2\024\uffd2\035" +
    "\uffd2\037\uffd2\044\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\064\uffd2\066\uffd2\067\uffd2\070" +
    "\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\001\002\000\034" +
    "\027\221\030\225\031\217\032\220\033\210\034\212\036" +
    "\216\037\226\040\231\041\222\042\223\043\207\065\362" +
    "\001\002\000\050\003\uff79\027\uff79\030\uff79\031\uff79\032" +
    "\uff79\033\uff79\034\uff79\036\uff79\037\uff79\040\uff79\041\uff79" +
    "\042\uff79\043\uff79\045\uff79\052\uff79\053\uff79\061\uff79\063" +
    "\uff79\065\uff79\001\002\000\050\003\uff77\027\221\030\225" +
    "\031\217\032\220\033\210\034\212\036\216\037\226\040" +
    "\231\041\222\042\223\043\207\045\uff77\052\uff77\053\uff77" +
    "\061\uff77\063\uff77\065\uff77\001\002\000\060\003\uffd7\004" +
    "\uffd7\005\uffd7\014\uffd7\024\uffd7\035\uffd7\037\uffd7\044\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\051\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\064\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7" +
    "\073\uffd7\074\uffd7\001\002\000\026\035\uffc2\037\uffc2\064" +
    "\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2" +
    "\074\uffc2\001\002\000\030\003\370\035\153\037\176\064" +
    "\166\066\162\067\152\070\173\071\142\072\170\073\171" +
    "\074\143\001\002\000\036\003\376\027\221\030\225\031" +
    "\217\032\220\033\210\034\212\036\216\037\226\040\231" +
    "\041\222\042\223\043\207\063\017\001\002\000\004\063" +
    "\uffc0\001\002\000\004\063\017\001\002\000\046\004\157" +
    "\005\141\014\175\024\145\035\153\037\176\044\156\051" +
    "\177\055\uffdd\056\161\064\166\066\162\067\152\070\173" +
    "\071\142\072\170\073\171\074\143\001\002\000\004\055" +
    "\374\001\002\000\004\063\uffbf\001\002\000\050\003\uffdd" +
    "\004\157\005\141\014\175\024\145\035\153\037\176\044" +
    "\156\051\177\055\uffdd\056\161\064\166\066\162\067\152" +
    "\070\173\071\142\072\170\073\171\074\143\001\002\000" +
    "\046\004\uffbe\005\uffbe\014\uffbe\024\uffbe\035\uffbe\037\uffbe" +
    "\044\uffbe\051\uffbe\055\uffbe\056\uffbe\064\uffbe\066\uffbe\067" +
    "\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\001\002" +
    "\000\046\004\157\005\141\014\175\024\145\035\153\037" +
    "\176\044\156\051\177\055\uffdd\056\161\064\166\066\162" +
    "\067\152\070\173\071\142\072\170\073\171\074\143\001" +
    "\002\000\004\055\u0101\001\002\000\004\063\uffbd\001\002" +
    "\000\006\003\u0103\055\u0104\001\002\000\004\063\uffbc\001" +
    "\002\000\004\063\uffc3\001\002\000\026\035\153\037\176" +
    "\064\166\066\162\067\152\070\173\071\142\072\170\073" +
    "\171\074\143\001\002\000\034\027\221\030\225\031\217" +
    "\032\220\033\210\034\212\036\216\037\226\040\231\041" +
    "\222\042\223\043\207\063\017\001\002\000\046\004\157" +
    "\005\141\014\175\024\145\035\153\037\176\044\156\051" +
    "\177\055\uffdd\056\161\064\166\066\162\067\152\070\173" +
    "\071\142\072\170\073\171\074\143\001\002\000\004\055" +
    "\u0109\001\002\000\004\063\uffc1\001\002\000\004\063\017" +
    "\001\002\000\060\003\uffda\004\uffda\005\uffda\014\uffda\024" +
    "\uffda\035\uffda\037\uffda\044\uffda\046\uffda\047\uffda\050\uffda" +
    "\051\uffda\054\uffda\055\uffda\056\uffda\064\uffda\066\uffda\067" +
    "\uffda\070\uffda\071\uffda\072\uffda\073\uffda\074\uffda\001\002" +
    "\000\004\065\uffaa\001\002\000\022\065\u010f\066\162\067" +
    "\152\070\173\071\142\072\170\073\171\074\143\001\002" +
    "\000\006\003\u0110\065\u0111\001\002\000\004\063\uffac\001" +
    "\002\000\004\063\uffa8\001\002\000\004\063\uffab\001\002" +
    "\000\004\065\u0113\001\002\000\004\063\uffa9\001\002\000" +
    "\036\003\u0116\027\221\030\225\031\217\032\220\033\210" +
    "\034\212\036\216\037\226\040\231\041\222\042\223\043" +
    "\207\045\u0115\001\002\000\004\063\017\001\002\000\004" +
    "\063\uffba\001\002\000\004\063\017\001\002\000\046\004" +
    "\157\005\141\014\175\024\145\035\153\037\176\044\156" +
    "\047\uffdd\051\177\056\161\064\166\066\162\067\152\070" +
    "\173\071\142\072\170\073\171\074\143\001\002\000\004" +
    "\047\u011b\001\002\000\004\046\u0120\001\002\000\026\035" +
    "\153\037\176\064\166\066\162\067\152\070\173\071\142" +
    "\072\170\073\171\074\143\001\002\000\034\027\221\030" +
    "\225\031\217\032\220\033\210\034\212\036\216\037\226" +
    "\040\231\041\222\042\223\043\207\045\u011d\001\002\000" +
    "\004\063\017\001\002\000\050\004\157\005\141\014\175" +
    "\024\145\035\153\037\176\044\156\046\uffdd\047\uffdd\051" +
    "\177\056\161\064\166\066\162\067\152\070\173\071\142" +
    "\072\170\073\171\074\143\001\002\000\006\046\uffae\047" +
    "\uffae\001\002\000\004\063\017\001\002\000\004\050\u0122" +
    "\001\002\000\004\044\u0123\001\002\000\004\063\uffb9\001" +
    "\002\000\050\003\uffdd\004\157\005\141\014\175\024\145" +
    "\035\153\037\176\044\156\050\uffdd\051\177\056\161\064" +
    "\166\066\162\067\152\070\173\071\142\072\170\073\171" +
    "\074\143\001\002\000\006\003\uffad\050\uffad\001\002\000" +
    "\054\003\uffdd\004\157\005\141\014\175\024\145\035\153" +
    "\037\176\044\156\046\uffdd\047\uffdd\050\uffdd\051\177\056" +
    "\161\064\166\066\162\067\152\070\173\071\142\072\170" +
    "\073\171\074\143\001\002\000\012\003\u0129\046\u0120\047" +
    "\u011b\050\u012b\001\002\000\004\050\u0139\001\002\000\004" +
    "\044\uffb4\001\002\000\006\046\uffb0\047\uffb0\001\002\000" +
    "\006\003\u0135\044\u0136\001\002\000\006\046\u0120\047\u011b" +
    "\001\002\000\006\003\u012f\050\u0130\001\002\000\006\046" +
    "\uffaf\047\uffaf\001\002\000\004\044\uffb8\001\002\000\006" +
    "\003\u0131\044\u0132\001\002\000\004\063\uffb6\001\002\000" +
    "\004\063\uffbb\001\002\000\004\044\u0134\001\002\000\004" +
    "\063\uffb7\001\002\000\004\063\uffb2\001\002\000\004\063" +
    "\uffb5\001\002\000\004\044\u0138\001\002\000\004\063\uffb3" +
    "\001\002\000\004\044\u013a\001\002\000\004\063\uffb1\001" +
    "\002\000\060\003\uffdb\004\uffdb\005\uffdb\014\uffdb\024\uffdb" +
    "\035\uffdb\037\uffdb\044\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\054\uffdb\055\uffdb\056\uffdb\064\uffdb\066\uffdb\067\uffdb" +
    "\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\001\002\000" +
    "\050\003\uff78\027\221\030\225\031\217\032\220\033\210" +
    "\034\212\036\216\037\226\040\231\041\222\042\223\043" +
    "\207\045\uff78\052\uff78\053\uff78\061\uff78\063\uff78\065\uff78" +
    "\001\002\000\004\022\uffe7\001\002\000\006\003\u013f\022" +
    "\u0140\001\002\000\006\002\uffe5\063\uffe5\001\002\000\006" +
    "\002\uffea\063\uffea\001\002\000\004\022\u0142\001\002\000" +
    "\006\002\uffe6\063\uffe6\001\002\000\060\003\uffd5\004\uffd5" +
    "\005\uffd5\014\uffd5\024\uffd5\035\uffd5\037\uffd5\044\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\051\uffd5\054\uffd5\055\uffd5\056\uffd5" +
    "\064\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\073" +
    "\uffd5\074\uffd5\001\002\000\026\035\uff6a\037\uff6a\064\uff6a" +
    "\066\uff6a\067\uff6a\070\uff6a\071\uff6a\072\uff6a\073\uff6a\074" +
    "\uff6a\001\002\000\034\027\221\030\225\031\217\032\220" +
    "\033\210\034\212\036\216\037\226\040\231\041\222\042" +
    "\223\043\207\063\uff88\001\002\000\060\003\uffd3\004\uffd3" +
    "\005\uffd3\014\uffd3\024\uffd3\035\uffd3\037\uffd3\044\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\064\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073" +
    "\uffd3\074\uffd3\001\002\000\004\063\uff84\001\002\000\004" +
    "\063\uff85\001\002\000\020\066\uffa5\067\uffa5\070\uffa5\071" +
    "\uffa5\072\uffa5\073\uffa5\074\uffa5\001\002\000\022\065\u014c" +
    "\066\162\067\152\070\173\071\142\072\170\073\171\074" +
    "\143\001\002\000\006\003\u014d\065\u014e\001\002\000\004" +
    "\063\uffa6\001\002\000\004\063\uffa3\001\002\000\004\063" +
    "\uffa7\001\002\000\020\066\162\067\152\070\173\071\142" +
    "\072\170\073\171\074\143\001\002\000\004\065\u0151\001" +
    "\002\000\004\063\uffa4\001\002\000\032\004\157\005\141" +
    "\035\153\037\176\064\166\066\162\067\152\070\173\071" +
    "\142\072\170\073\171\074\143\001\002\000\034\027\221" +
    "\030\225\031\217\032\220\033\210\034\212\036\216\037" +
    "\226\040\231\041\222\042\223\043\207\063\uff8a\001\002" +
    "\000\004\063\uff89\001\002\000\004\064\070\001\002\000" +
    "\004\063\017\001\002\000\046\004\157\005\141\014\175" +
    "\024\145\035\153\037\176\044\156\050\uffdd\051\177\056" +
    "\161\064\166\066\162\067\152\070\173\071\142\072\170" +
    "\073\171\074\143\001\002\000\004\050\u0159\001\002\000" +
    "\004\022\u015a\001\002\000\006\002\uffe8\063\uffe8\001\002" +
    "\000\004\015\ufff6\001\002\000\006\003\u015e\015\u015d\001" +
    "\002\000\022\003\u0162\006\053\007\050\010\052\011\051" +
    "\012\054\020\u0161\072\047\001\002\000\016\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\072\ufff4\001\002\000\016" +
    "\006\053\007\050\010\052\011\051\012\054\072\047\001" +
    "\002\000\006\002\ufff3\063\ufff3\001\002\000\004\072\334" +
    "\001\002\000\006\002\ufff2\063\ufff2\001\002\000\006\002" +
    "\ufff7\063\ufff7\001\002\000\006\002\ufff1\063\ufff1\001\002" +
    "\000\004\015\u0166\001\002\000\016\006\053\007\050\010" +
    "\052\011\051\012\054\072\047\001\002\000\006\002\ufff5" +
    "\063\ufff5\001\002\000\004\064\uffef\001\002\000\004\064" +
    "\070\001\002\000\004\063\017\001\002\000\050\003\uffdd" +
    "\004\157\005\141\014\175\024\145\035\153\037\176\044" +
    "\156\050\uffdd\051\177\056\161\064\166\066\162\067\152" +
    "\070\173\071\142\072\170\073\171\074\143\001\002\000" +
    "\006\003\u016d\050\u016e\001\002\000\004\021\uffed\001\002" +
    "\000\006\003\u0170\021\u016f\001\002\000\006\002\ufff0\063" +
    "\ufff0\001\002\000\006\002\uffeb\063\uffeb\001\002\000\004" +
    "\021\u0172\001\002\000\006\002\uffec\063\uffec\001\002\000" +
    "\004\064\070\001\002\000\004\063\017\001\002\000\046" +
    "\004\157\005\141\014\175\024\145\035\153\037\176\044" +
    "\156\050\uffdd\051\177\056\161\064\166\066\162\067\152" +
    "\070\173\071\142\072\170\073\171\074\143\001\002\000" +
    "\004\050\u0177\001\002\000\004\021\u0178\001\002\000\006" +
    "\002\uffee\063\uffee\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0177\000\024\002\003\003\015\004\007\005\011\006" +
    "\006\007\010\010\005\051\014\054\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\022\004" +
    "\007\005\011\006\006\007\010\010\005\054\012\001\001" +
    "\000\004\051\020\001\001\000\004\051\017\001\001\000" +
    "\002\001\001\000\016\004\021\005\011\006\006\007\010" +
    "\010\005\054\012\001\001\000\002\001\001\000\004\051" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\057\001\001\000" +
    "\004\051\031\001\001\000\010\023\035\024\033\025\032" +
    "\001\001\000\004\051\056\001\001\000\004\025\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\060\001\001\000\010" +
    "\023\061\024\033\025\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\u0154\001\001" +
    "\000\004\026\066\001\001\000\004\051\136\001\001\000" +
    "\006\027\074\030\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\104\106" +
    "\001\001\000\002\001\001\000\004\053\105\001\001\000" +
    "\004\105\103\001\001\000\004\053\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\110\001\001\000\002\001\001\000\004\030\121\001\001" +
    "\000\004\106\114\001\001\000\002\001\001\000\004\030" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\107\131\001\001\000\002\001\001\000\004\053\130" +
    "\001\001\000\004\110\126\001\001\000\004\053\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\133\001\001\000\002\001\001\000\004\053" +
    "\135\001\001\000\002\001\001\000\040\011\150\012\153" +
    "\013\143\014\162\015\173\016\147\022\171\031\166\032" +
    "\137\033\145\034\154\037\146\045\163\047\157\052\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\u0147" +
    "\001\001\000\004\051\u0145\001\001\000\016\040\213\041" +
    "\212\042\210\043\231\044\214\046\226\001\001\000\004" +
    "\051\u0142\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\032\205\034\154\037\u013b\045\163\047\204\052\164" +
    "\001\001\000\034\013\u013a\014\162\015\173\016\147\022" +
    "\171\031\166\032\137\033\145\034\154\037\146\045\163" +
    "\047\157\052\164\001\001\000\002\001\001\000\016\032" +
    "\205\034\154\037\u0113\045\163\047\204\052\164\001\001" +
    "\000\002\001\001\000\004\035\u0109\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\363\001\001\000\016" +
    "\032\205\034\154\037\362\045\163\047\204\052\164\001" +
    "\001\000\002\001\001\000\016\032\205\034\154\037\360" +
    "\045\163\047\204\052\164\001\001\000\004\051\357\001" +
    "\001\000\006\035\336\050\353\001\001\000\002\001\001" +
    "\000\004\051\351\001\001\000\002\001\001\000\004\051" +
    "\350\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\066\313\001\001\000\002\001\001\000" +
    "\004\067\301\001\001\000\016\032\205\034\154\037\203" +
    "\045\163\047\204\052\164\001\001\000\016\040\213\041" +
    "\212\042\210\043\231\044\214\046\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\032\205\034\154\037\300\045\163\047\204\052" +
    "\164\001\001\000\016\032\205\034\154\037\277\045\163" +
    "\047\204\052\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\070\267\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\032\205" +
    "\034\154\037\233\045\163\047\204\052\164\001\001\000" +
    "\002\001\001\000\016\032\205\034\154\037\232\045\163" +
    "\047\204\052\164\001\001\000\016\040\213\041\212\042" +
    "\210\043\231\044\214\046\226\001\001\000\016\040\213" +
    "\041\212\042\210\043\231\044\214\046\226\001\001\000" +
    "\004\055\247\001\001\000\004\071\236\001\001\000\004" +
    "\055\240\001\001\000\002\001\001\000\004\051\242\001" +
    "\001\000\002\001\001\000\040\011\243\012\153\013\143" +
    "\014\162\015\173\016\147\022\171\031\166\032\137\033" +
    "\145\034\154\037\146\045\163\047\157\052\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\072\260\001\001\000\004\051\250\001\001\000\040" +
    "\011\251\012\153\013\143\014\162\015\173\016\147\022" +
    "\171\031\166\032\137\033\145\034\154\037\146\045\163" +
    "\047\157\052\164\001\001\000\002\001\001\000\004\073" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\261\001\001\000\040\011\262\012\153\013\143\014\162" +
    "\015\173\016\147\022\171\031\166\032\137\033\145\034" +
    "\154\037\146\045\163\047\157\052\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\032\205\034\154\037\270" +
    "\045\163\047\204\052\164\001\001\000\016\040\213\041" +
    "\212\042\210\043\231\044\214\046\226\001\001\000\004" +
    "\055\272\001\001\000\004\051\273\001\001\000\040\011" +
    "\274\012\153\013\143\014\162\015\173\016\147\022\171" +
    "\031\166\032\137\033\145\034\154\037\146\045\163\047" +
    "\157\052\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\040\213\041\212\042\210\043" +
    "\231\044\214\046\226\001\001\000\016\040\213\041\212" +
    "\042\210\043\231\044\214\046\226\001\001\000\016\032" +
    "\205\034\154\037\302\045\163\047\204\052\164\001\001" +
    "\000\016\040\213\041\212\042\210\043\231\044\214\046" +
    "\226\001\001\000\016\032\205\034\154\037\304\045\163" +
    "\047\204\052\164\001\001\000\016\040\213\041\212\042" +
    "\210\043\231\044\214\046\226\001\001\000\004\055\306" +
    "\001\001\000\004\051\307\001\001\000\040\011\310\012" +
    "\153\013\143\014\162\015\173\016\147\022\171\031\166" +
    "\032\137\033\145\034\154\037\146\045\163\047\157\052" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\032\205\034\154\037" +
    "\315\045\163\047\204\052\164\001\001\000\016\040\213" +
    "\041\212\042\210\043\231\044\214\046\226\001\001\000" +
    "\016\032\205\034\154\037\317\045\163\047\204\052\164" +
    "\001\001\000\016\040\213\041\212\042\210\043\231\044" +
    "\214\046\226\001\001\000\004\055\321\001\001\000\004" +
    "\051\322\001\001\000\040\011\323\012\153\013\143\014" +
    "\162\015\173\016\147\022\171\031\166\032\137\033\145" +
    "\034\154\037\146\045\163\047\157\052\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\331\001\001\000\004\034\334\001" +
    "\001\000\004\051\332\001\001\000\002\001\001\000\004" +
    "\035\336\001\001\000\004\051\335\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\032\205\034\154\036\341" +
    "\037\340\045\163\047\204\052\164\001\001\000\016\040" +
    "\213\041\212\042\210\043\231\044\214\046\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\032\205\034\154\037\347\045\163\047\204\052\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\040" +
    "\213\041\212\042\210\043\231\044\214\046\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\040\213\041\212\042" +
    "\210\043\231\044\214\046\226\001\001\000\002\001\001" +
    "\000\016\040\213\041\212\042\210\043\231\044\214\046" +
    "\226\001\001\000\002\001\001\000\004\074\u0104\001\001" +
    "\000\016\032\205\034\154\037\366\045\163\047\204\052" +
    "\164\001\001\000\020\040\213\041\212\042\210\043\231" +
    "\044\214\046\226\051\374\001\001\000\004\075\370\001" +
    "\001\000\004\051\371\001\001\000\040\011\372\012\153" +
    "\013\143\014\162\015\173\016\147\022\171\031\166\032" +
    "\137\033\145\034\154\037\146\045\163\047\157\052\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\011" +
    "\u0101\012\153\013\143\014\162\015\173\016\147\022\171" +
    "\031\166\032\137\033\145\034\154\037\146\045\163\047" +
    "\157\052\164\001\001\000\004\076\376\001\001\000\040" +
    "\011\377\012\153\013\143\014\162\015\173\016\147\022" +
    "\171\031\166\032\137\033\145\034\154\037\146\045\163" +
    "\047\157\052\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\032\205\034\154\037\u0105\045\163\047\204\052" +
    "\164\001\001\000\020\040\213\041\212\042\210\043\231" +
    "\044\214\046\226\051\u0106\001\001\000\040\011\u0107\012" +
    "\153\013\143\014\162\015\173\016\147\022\171\031\166" +
    "\032\137\033\145\034\154\037\146\045\163\047\157\052" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\u010a\001\001\000\002\001\001\000\004\102\u0111\001" +
    "\001\000\012\032\205\034\154\047\204\052\u010d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\040\213\041\212\042\210\043\231\044\214\046\226\001" +
    "\001\000\004\051\u0125\001\001\000\004\077\u0116\001\001" +
    "\000\004\051\u0117\001\001\000\040\011\u0118\012\153\013" +
    "\143\014\162\015\173\016\147\022\171\031\166\032\137" +
    "\033\145\034\154\037\146\045\163\047\157\052\164\001" +
    "\001\000\004\020\u0119\001\001\000\004\021\u0120\001\001" +
    "\000\016\032\205\034\154\037\u011b\045\163\047\204\052" +
    "\164\001\001\000\016\040\213\041\212\042\210\043\231" +
    "\044\214\046\226\001\001\000\004\051\u011d\001\001\000" +
    "\040\011\u011e\012\153\013\143\014\162\015\173\016\147" +
    "\022\171\031\166\032\137\033\145\034\154\037\146\045" +
    "\163\047\157\052\164\001\001\000\002\001\001\000\004" +
    "\051\u0123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\011\u0124\012\153\013\143\014\162" +
    "\015\173\016\147\022\171\031\166\032\137\033\145\034" +
    "\154\037\146\045\163\047\157\052\164\001\001\000\002" +
    "\001\001\000\040\011\u0126\012\153\013\143\014\162\015" +
    "\173\016\147\022\171\031\166\032\137\033\145\034\154" +
    "\037\146\045\163\047\157\052\164\001\001\000\010\017" +
    "\u012b\020\u0129\021\u0127\001\001\000\002\001\001\000\004" +
    "\101\u0136\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\u012d\021\u012c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\100\u0132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\040\213\041\212\042\210\043" +
    "\231\044\214\046\226\001\001\000\004\063\u0140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\032\205\034\154\037\u0144\045\163\047\204\052\164\001" +
    "\001\000\016\040\213\041\212\042\210\043\231\044\214" +
    "\046\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\103\u014e\001\001\000\012\032\205" +
    "\034\154\047\204\052\u014a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\032\205\034\154\047\204\052\u014f\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\022\u0153\032\205\034\154" +
    "\037\u0152\045\163\047\204\052\164\001\001\000\016\040" +
    "\213\041\212\042\210\043\231\044\214\046\226\001\001" +
    "\000\002\001\001\000\004\026\u0155\001\001\000\004\051" +
    "\u0156\001\001\000\040\011\u0157\012\153\013\143\014\162" +
    "\015\173\016\147\022\171\031\166\032\137\033\145\034" +
    "\154\037\146\045\163\047\157\052\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\u0164\001\001\000\002\001\001\000\004\053\u0162\001\001" +
    "\000\004\057\u015e\001\001\000\004\053\u015f\001\001\000" +
    "\002\001\001\000\004\034\u0163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\u0166\001\001\000\002\001\001\000\004\060\u0172" +
    "\001\001\000\004\026\u0169\001\001\000\004\051\u016a\001" +
    "\001\000\040\011\u016b\012\153\013\143\014\162\015\173" +
    "\016\147\022\171\031\166\032\137\033\145\034\154\037" +
    "\146\045\163\047\157\052\164\001\001\000\002\001\001" +
    "\000\004\061\u0170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\u0173\001\001\000\004\051\u0174\001\001\000" +
    "\040\011\u0175\012\153\013\143\014\162\015\173\016\147" +
    "\022\171\031\166\032\137\033\145\034\154\037\146\045" +
    "\163\047\157\052\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	@Override
	public void report_error(String message, Object info) {
		// if (!((Symbol)info).value.toString().equals("null")){
			if (info instanceof String)
				System.err.println(" " + info + " " + message + "\n");
			else {
				StringBuffer m = new StringBuffer("Error ");
				if (info instanceof java_cup.runtime.Symbol) {
					m.append(("(Se ha encontrado el token \"" + ((Symbol)info).value + "\" en la linea "
						+ ((Symbol)info).left + 1 + ", columna " + ((Symbol)info).right + 1) + ")");
				}
				if (message.equals("Couldn't repair and continue parse"))
					m.append(" : No existe una regla por los momentos para este token.");
				else
					m.append(" : " + message);
				System.err.println(m);
			}
		// }
	}
	@Override
	public void syntax_error(Symbol s){
		System.err.println( "(Se ha encontrado el token \"" + sym.terminalNames[s.sym] + "\" en la linea " + (s.left+1) + ", columna" + (s.right+1) + ")" ); 
        expected();
	}

	public void expected(){
		List<Integer> token_list = this.expected_token_ids();
		if (token_list.size() <= 0){
			token_list = this.expected_token_ids();
		}
		String expected_tokens = "";
		for (int i = 0 ; i < token_list.size(); i++){
			int id = token_list.get(i);
			if (id == 1){
				continue;
			}
			String terminal_name = sym.terminalNames[id];
			if (i == token_list.size() - 1){
				expected_tokens += terminal_name;
			}else{
				expected_tokens += terminal_name + " , ";
			}
		}
		System.err.println("Se esperaba alguno de los siguientes tokens:" + expected_tokens);
	};

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new RuntimeException("Fatal Syntax Error");
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	AST ast = new AST();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio_programa ::= fin_linea sentencias_principales 
            {
              AST.Programa RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciasPrincipales sp = (AST.SentenciasPrincipales)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new Programa(sp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio_programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.Programa start_val = (AST.Programa)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio_programa ::= sentencias_principales 
            {
              AST.Programa RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciasPrincipales sp = (AST.SentenciasPrincipales)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new Programa(sp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio_programa ::= 
            {
              AST.Programa RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias_principales ::= sentencia_principal 
            {
              AST.SentenciasPrincipales RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciaPrincipal sp = (AST.SentenciaPrincipal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciasPrincipales();
											RESULT.add(sp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_principales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias_principales ::= sentencias_principales fin_linea sentencia_principal 
            {
              AST.SentenciasPrincipales RESULT =null;
		int sspleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sspright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.SentenciasPrincipales ssp = (AST.SentenciasPrincipales)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciaPrincipal sp = (AST.SentenciaPrincipal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciasPrincipales();
											for (int i = 0; i < ssp.size(); i++)
												RESULT.add(ssp.getAt(i));
											RESULT.add(sp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_principales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia_principal ::= declaracion_variables 
            {
              AST.SentenciaPrincipal RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.DeclaracionVariables dv = (AST.DeclaracionVariables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = dv;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia_principal ::= declaracion_sub 
            {
              AST.SentenciaPrincipal RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.DeclaracionSub ds = (AST.DeclaracionSub)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ds;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia_principal ::= declaracion_funcion 
            {
              AST.SentenciaPrincipal RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.DeclaracionFuncion df = (AST.DeclaracionFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = df;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia_principal ::= declaracion_type 
            {
              AST.SentenciaPrincipal RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.DeclaracionType dt = (AST.DeclaracionType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = dt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_variables ::= visibilidad DIM IDENTIFICADOR AS tipo_dato 
            {
              AST.DeclaracionVariables RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST.Visibilidad v = (AST.Visibilidad)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.TipoDato td = (AST.TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new DeclaracionVariables(v, id, td);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              AST.DeclaracionVariables RESULT =null;
parser.report_error("declaracion_variables: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_variables ::= visibilidad DIM error NT$0 AS tipo_dato 
            {
              AST.DeclaracionVariables RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (AST.DeclaracionVariables) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              AST.DeclaracionVariables RESULT =null;
parser.report_error("declaracion_variables: Se esperaba AS", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion_variables ::= visibilidad DIM IDENTIFICADOR error NT$1 tipo_dato 
            {
              AST.DeclaracionVariables RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (AST.DeclaracionVariables) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_variables ::= visibilidad DIM IDENTIFICADOR AS error 
            {
              AST.DeclaracionVariables RESULT =null;
		parser.report_error("declaracion_variables: Se esperaba tipo_dato", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion_variables ::= visibilidad DIM IDENTIFICADOR AS NEW llamado_funcion 
            {
              AST.DeclaracionVariables RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AST.Visibilidad v = (AST.Visibilidad)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String lv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.LlamadoFuncion lf = (AST.LlamadoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new DeclaracionVariables(v, lv, lf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion_sub ::= visibilidad SUB IDENTIFICADOR parametros fin_linea cuerpo_funcion END SUB 
            {
              AST.DeclaracionSub RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		AST.Visibilidad v = (AST.Visibilidad)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST.Parametros p = (AST.Parametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.CuerpoFuncion cf = (AST.CuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = ast.new DeclaracionSub(v, p, cf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_sub",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$2 ::= 
            {
              AST.DeclaracionSub RESULT =null;
parser.report_error("declaracion_sub: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion_sub ::= visibilidad SUB error NT$2 parametros fin_linea cuerpo_funcion END SUB 
            {
              AST.DeclaracionSub RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (AST.DeclaracionSub) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_sub",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$3 ::= 
            {
              AST.DeclaracionSub RESULT =null;
parser.report_error("declaracion_sub: Se esperaba END", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion_sub ::= visibilidad SUB IDENTIFICADOR parametros fin_linea cuerpo_funcion error NT$3 SUB 
            {
              AST.DeclaracionSub RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (AST.DeclaracionSub) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_sub",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion_sub ::= visibilidad SUB IDENTIFICADOR parametros fin_linea cuerpo_funcion END error 
            {
              AST.DeclaracionSub RESULT =null;
		parser.report_error("declaracion_sub: Se esperaba SUB", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_sub",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion_funcion ::= visibilidad FUNCTION IDENTIFICADOR parametros fin_linea cuerpo_funcion END FUNCTION 
            {
              AST.DeclaracionFuncion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		AST.Visibilidad v = (AST.Visibilidad)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST.Parametros p = (AST.Parametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.CuerpoFuncion cf = (AST.CuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = ast.new DeclaracionFuncion(v, p, cf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$4 ::= 
            {
              AST.DeclaracionFuncion RESULT =null;
parser.report_error("declaracion_funcion: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_funcion ::= visibilidad FUNCTION error NT$4 parametros fin_linea cuerpo_funcion END FUNCTION 
            {
              AST.DeclaracionFuncion RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (AST.DeclaracionFuncion) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$5 ::= 
            {
              AST.DeclaracionFuncion RESULT =null;
parser.report_error("declaracion_funcion: Se esperaba END", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion_funcion ::= visibilidad FUNCTION IDENTIFICADOR parametros fin_linea cuerpo_funcion error NT$5 FUNCTION 
            {
              AST.DeclaracionFuncion RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (AST.DeclaracionFuncion) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion_funcion ::= visibilidad FUNCTION IDENTIFICADOR parametros fin_linea cuerpo_funcion END error 
            {
              AST.DeclaracionFuncion RESULT =null;
		parser.report_error("declaracion_funcion: Se esperaba FUNCTION", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion_type ::= visibilidad TYPE IDENTIFICADOR fin_linea cuerpo_nuevo_tipo END TYPE 
            {
              AST.DeclaracionType RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AST.Visibilidad v = (AST.Visibilidad)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.CuerpoNuevoTipo cnt = (AST.CuerpoNuevoTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = ast.new DeclaracionType(v, id, cnt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$6 ::= 
            {
              AST.DeclaracionType RESULT =null;
parser.report_error("declaracion_type: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion_type ::= visibilidad TYPE error NT$6 fin_linea cuerpo_nuevo_tipo END TYPE 
            {
              AST.DeclaracionType RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (AST.DeclaracionType) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$7 ::= 
            {
              AST.DeclaracionType RESULT =null;
parser.report_error("declaracion_type: Se esperaba END", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion_type ::= visibilidad TYPE IDENTIFICADOR fin_linea cuerpo_nuevo_tipo error NT$7 TYPE 
            {
              AST.DeclaracionType RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (AST.DeclaracionType) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion_type ::= visibilidad TYPE IDENTIFICADOR fin_linea cuerpo_nuevo_tipo END error 
            {
              AST.DeclaracionType RESULT =null;
		parser.report_error("declaracion_type: Se esperaba TYPE", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cuerpo_funcion ::= sentencias_cuerpo_funcion 
            {
              AST.CuerpoFuncion RESULT =null;
		int scfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciasCuerpoFuncion scf = (AST.SentenciasCuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new CuerpoFuncion(scf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cuerpo_funcion ::= 
            {
              AST.CuerpoFuncion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencias_cuerpo_funcion ::= sentencia_cuerpo_funcion 
            {
              AST.SentenciasCuerpoFuncion RESULT =null;
		int scfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciaCuerpoFuncion scf = (AST.SentenciaCuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciasCuerpoFuncion();
											RESULT.add(scf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencias_cuerpo_funcion ::= sentencias_cuerpo_funcion sentencia_cuerpo_funcion 
            {
              AST.SentenciasCuerpoFuncion RESULT =null;
		int sscfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sscfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.SentenciasCuerpoFuncion sscf = (AST.SentenciasCuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int scfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciaCuerpoFuncion scf = (AST.SentenciaCuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciasCuerpoFuncion();
											for (int i = 0; i < sscf.size(); i++)
												RESULT.add(sscf.getAt(i));
											RESULT.add(scf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia_cuerpo_funcion ::= propiedad argumentos fin_linea 
            {
              AST.SentenciaCuerpoFuncion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Propiedad p = (AST.Propiedad)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.Argumentos a = (AST.Argumentos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new SentenciaLlamadoFuncionPropiedad(p, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia_cuerpo_funcion ::= DIM IDENTIFICADOR AS tipo_dato fin_linea 
            {
              AST.SentenciaCuerpoFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.TipoDato td = (AST.TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new DeclaracionVariablesCuerpoFuncion(id, td);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia_cuerpo_funcion ::= DIM IDENTIFICADOR AS NEW llamado_funcion fin_linea 
            {
              AST.SentenciaCuerpoFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.LlamadoFuncion lf = (AST.LlamadoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new DeclaracionVariablesCuerpoFuncion(id, lf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia_cuerpo_funcion ::= sentencia_for_step fin_linea 
            {
              AST.SentenciaCuerpoFuncion RESULT =null;
		int sftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.SentenciaForStep sft = (AST.SentenciaForStep)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = sft;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia_cuerpo_funcion ::= sentencia_do_while fin_linea 
            {
              AST.SentenciaCuerpoFuncion RESULT =null;
		int sdwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdwright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.SentenciaDoWhile sdw = (AST.SentenciaDoWhile)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = sdw;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia_cuerpo_funcion ::= sentencia_if fin_linea 
            {
              AST.SentenciaCuerpoFuncion RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.SentenciaIf si = (AST.SentenciaIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = si;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia_cuerpo_funcion ::= sentencia_consola fin_linea 
            {
              AST.SentenciaCuerpoFuncion RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.SentenciaConsola sc = (AST.SentenciaConsola)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = sc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia_cuerpo_funcion ::= sentencia_llamado_funcion fin_linea 
            {
              AST.SentenciaCuerpoFuncion RESULT =null;
		int slfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.SentenciaLlamadoFuncion slf = (AST.SentenciaLlamadoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = slf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia_cuerpo_funcion ::= sentencia_asignacion fin_linea 
            {
              AST.SentenciaCuerpoFuncion RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.SentenciaAsignacion sa = (AST.SentenciaAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = sa;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion STEP tipos_step fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              AST.SentenciaForStep RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		AST.Expresion e1 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AST.Expresion e2 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.CuerpoFuncion cf = (AST.CuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = ast.new SentenciaForStep(id, e1, e2, ts, cf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$8 ::= 
            {
              AST.SentenciaForStep RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia_for_step ::= FOR error NT$8 OP_IGUAL expresion TO expresion STEP tipos_step fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              AST.SentenciaForStep RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (AST.SentenciaForStep) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$9 ::= 
            {
              AST.SentenciaForStep RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba OP_IGUAL", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia_for_step ::= FOR IDENTIFICADOR error NT$9 expresion TO expresion STEP tipos_step fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              AST.SentenciaForStep RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (AST.SentenciaForStep) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$10 ::= 
            {
              AST.SentenciaForStep RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba TO", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion error NT$10 expresion STEP tipos_step fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              AST.SentenciaForStep RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (AST.SentenciaForStep) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$11 ::= 
            {
              AST.SentenciaForStep RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba STEP", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion error NT$11 tipos_step fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              AST.SentenciaForStep RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (AST.SentenciaForStep) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$12 ::= 
            {
              AST.SentenciaForStep RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba tipos_step", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion STEP error NT$12 fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              AST.SentenciaForStep RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (AST.SentenciaForStep) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$13 ::= 
            {
              AST.SentenciaForStep RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba NEXT", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion STEP tipos_step fin_linea cuerpo_funcion error NT$13 IDENTIFICADOR 
            {
              AST.SentenciaForStep RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (AST.SentenciaForStep) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion STEP tipos_step fin_linea cuerpo_funcion NEXT error 
            {
              AST.SentenciaForStep RESULT =null;
		parser.report_error("sentencia_for_step: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia_do_while ::= DO WHILE expresion fin_linea cuerpo_funcion LOOP 
            {
              AST.SentenciaDoWhile RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.CuerpoFuncion cf = (AST.CuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new SentenciaDoWhile(e, cf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$14 ::= 
            {
              AST.SentenciaDoWhile RESULT =null;
parser.report_error("sentencia_do_while: Se esperaba WHILE", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia_do_while ::= DO error NT$14 expresion fin_linea cuerpo_funcion LOOP 
            {
              AST.SentenciaDoWhile RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (AST.SentenciaDoWhile) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$15 ::= 
            {
              AST.SentenciaDoWhile RESULT =null;
parser.report_error("sentencia_do_while: Se esperaba expresion", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia_do_while ::= DO WHILE error NT$15 fin_linea cuerpo_funcion LOOP 
            {
              AST.SentenciaDoWhile RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (AST.SentenciaDoWhile) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$16 ::= 
            {
              AST.SentenciaDoWhile RESULT =null;
parser.report_error("sentencia_do_while: Se esperaba fin_linea", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia_do_while ::= DO WHILE expresion error NT$16 cuerpo_funcion LOOP 
            {
              AST.SentenciaDoWhile RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (AST.SentenciaDoWhile) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia_do_while ::= DO WHILE expresion fin_linea cuerpo_funcion error 
            {
              AST.SentenciaDoWhile RESULT =null;
		parser.report_error("sentencia_do_while: Se esperaba LOOP", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion sentencias_else_if sentencia_else END IF 
            {
              AST.SentenciaIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST.CuerpoFuncion cf = (AST.CuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sseileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sseiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST.SentenciasElseIf ssei = (AST.SentenciasElseIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.SentenciaElse se = (AST.SentenciaElse)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = ast.new SentenciaIf(e, cf, ssei, se);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$17 ::= 
            {
              AST.SentenciaIf RESULT =null;
parser.report_error("sentencia_if: Se esperaba THEN", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia_if ::= IF expresion error NT$17 fin_linea cuerpo_funcion sentencia_else_if sentencia_else END IF 
            {
              AST.SentenciaIf RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (AST.SentenciaIf) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$18 ::= 
            {
              AST.SentenciaIf RESULT =null;
parser.report_error("sentencia_if: Se esperaba END", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion sentencias_else_if sentencia_else error NT$18 IF 
            {
              AST.SentenciaIf RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (AST.SentenciaIf) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion sentencias_else_if sentencia_else END error 
            {
              AST.SentenciaIf RESULT =null;
		parser.report_error("sentencia_if: Se esperaba IF", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion END IF 
            {
              AST.SentenciaIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.CuerpoFuncion cf = (AST.CuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = ast.new SentenciaIf(e, cf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$19 ::= 
            {
              AST.SentenciaIf RESULT =null;
parser.report_error("sentencia_if: Se esperaba END", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion error NT$19 IF 
            {
              AST.SentenciaIf RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (AST.SentenciaIf) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion END error 
            {
              AST.SentenciaIf RESULT =null;
		parser.report_error("sentencia_if: Se esperaba IF", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion sentencia_else END IF 
            {
              AST.SentenciaIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST.CuerpoFuncion cf = (AST.CuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.SentenciaElse se = (AST.SentenciaElse)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = ast.new SentenciaIf(e, cf, se);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencias_else_if ::= sentencia_else_if 
            {
              AST.SentenciasElseIf RESULT =null;
		int seileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciaElseIf sei = (AST.SentenciaElseIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciasElseIf();
											RESULT.add(sei);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_else_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentencias_else_if ::= sentencias_else_if sentencia_else_if 
            {
              AST.SentenciasElseIf RESULT =null;
		int sseileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sseiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.SentenciasElseIf ssei = (AST.SentenciasElseIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int seileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciaElseIf sei = (AST.SentenciaElseIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ssei.add(sei);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_else_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentencia_else_if ::= ELSE_IF expresion THEN fin_linea cuerpo_funcion 
            {
              AST.SentenciaElseIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.CuerpoFuncion cf = (AST.CuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciaElseIf(e, cf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentencia_else ::= ELSE fin_linea cuerpo_funcion 
            {
              AST.SentenciaElse RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.CuerpoFuncion cf = (AST.CuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciaElse(cf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencia_consola ::= WRITE PAR_IZQ PAR_DER 
            {
              AST.SentenciaConsola RESULT =null;
			RESULT = ast.new SentenciaConsola("Console.Write", ast.new Termino(""));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencia_consola ::= WRITE PAR_IZQ termino PAR_DER 
            {
              AST.SentenciaConsola RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.Termino t = (AST.Termino)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new SentenciaConsola("Console.Write", t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$20 ::= 
            {
              AST.SentenciaConsola RESULT =null;
parser.report_error("sentencia_consola WRITE: Se esperaba \"(\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencia_consola ::= WRITE error NT$20 PAR_DER 
            {
              AST.SentenciaConsola RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (AST.SentenciaConsola) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentencia_consola ::= WRITE PAR_IZQ termino error 
            {
              AST.SentenciaConsola RESULT =null;
		parser.report_error("sentencia_consola WRITE: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencia_consola ::= READ PAR_IZQ termino PAR_DER 
            {
              AST.SentenciaConsola RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.Termino t = (AST.Termino)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new SentenciaConsola("Console.In", t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentencia_consola ::= READ PAR_IZQ PAR_DER 
            {
              AST.SentenciaConsola RESULT =null;
			RESULT = ast.new SentenciaConsola("Console.In", ast.new Termino(""));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$21 ::= 
            {
              AST.SentenciaConsola RESULT =null;
parser.report_error("sentencia_consola READ: Se esperaba \"(\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentencia_consola ::= READ error NT$21 termino PAR_DER 
            {
              AST.SentenciaConsola RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (AST.SentenciaConsola) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentencia_consola ::= READ PAR_IZQ termino error 
            {
              AST.SentenciaConsola RESULT =null;
		parser.report_error("sentencia_consola READ: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cuerpo_nuevo_tipo ::= sentencias_cuerpo_nuevo_tipo 
            {
              AST.CuerpoNuevoTipo RESULT =null;
		int scntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciasCuerpoNuevoTipo scnt = (AST.SentenciasCuerpoNuevoTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new CuerpoNuevoTipo(scnt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_nuevo_tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cuerpo_nuevo_tipo ::= 
            {
              AST.CuerpoNuevoTipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_nuevo_tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencias_cuerpo_nuevo_tipo ::= declaracion_variables_nuevo_tipo fin_linea 
            {
              AST.SentenciasCuerpoNuevoTipo RESULT =null;
		int dvntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.DeclaracionVariablesNuevoTipo dvnt = (AST.DeclaracionVariablesNuevoTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new SentenciasCuerpoNuevoTipo();
											RESULT.add(dvnt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_nuevo_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentencias_cuerpo_nuevo_tipo ::= sentencias_cuerpo_nuevo_tipo declaracion_variables_nuevo_tipo fin_linea 
            {
              AST.SentenciasCuerpoNuevoTipo RESULT =null;
		int sscntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sscntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.SentenciasCuerpoNuevoTipo sscnt = (AST.SentenciasCuerpoNuevoTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dvntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.DeclaracionVariablesNuevoTipo dvnt = (AST.DeclaracionVariablesNuevoTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new SentenciasCuerpoNuevoTipo();
											for (int i = 0; i < sscnt.size(); i++) {
												RESULT.add(sscnt.getAt(i));
											}
											RESULT.add(dvnt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_nuevo_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // declaracion_variables_nuevo_tipo ::= IDENTIFICADOR AS tipo_dato 
            {
              AST.DeclaracionVariablesNuevoTipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.TipoDato td = (AST.TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new DeclaracionVariablesNuevoTipo(id, td);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables_nuevo_tipo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametros ::= PAR_IZQ PAR_DER 
            {
              AST.Parametros RESULT =null;
			RESULT = ast.new Parametros();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parametros ::= PAR_IZQ error 
            {
              AST.Parametros RESULT =null;
		parser.report_error("parametros: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parametros ::= PAR_IZQ lista_parametros PAR_DER 
            {
              AST.Parametros RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.ListaParametros lp = (AST.ListaParametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new Parametros(lp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parametros ::= PAR_IZQ lista_parametros error 
            {
              AST.Parametros RESULT =null;
		parser.report_error("parametros: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lista_parametros ::= IDENTIFICADOR AS tipo_dato 
            {
              AST.ListaParametros RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.TipoDato td = (AST.TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new ListaParametros();
											RESULT.add(ast.new Parametro(id, td));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lista_parametros ::= forma_de_paso IDENTIFICADOR AS tipo_dato 
            {
              AST.ListaParametros RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST.FormaPaso fp = (AST.FormaPaso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.TipoDato td = (AST.TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new ListaParametros();
											RESULT.add(ast.new Parametro(fp, id, td));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$22 ::= 
            {
              AST.ListaParametros RESULT =null;
parser.report_error("lista_parametros: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // lista_parametros ::= forma_de_paso error NT$22 AS tipo_dato 
            {
              AST.ListaParametros RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (AST.ListaParametros) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$23 ::= 
            {
              AST.ListaParametros RESULT =null;
parser.report_error("lista_parametros: Se esperaba AS", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // lista_parametros ::= forma_de_paso IDENTIFICADOR error NT$23 tipo_dato 
            {
              AST.ListaParametros RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (AST.ListaParametros) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // lista_parametros ::= lista_parametros COMA forma_de_paso IDENTIFICADOR AS tipo_dato 
            {
              AST.ListaParametros RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AST.ListaParametros lp = (AST.ListaParametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST.FormaPaso fp = (AST.FormaPaso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.TipoDato td = (AST.TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new ListaParametros();
											for (int i = 0; i < lp.size(); i++) {
												RESULT.add(lp.getAt(i));
											}
											RESULT.add(ast.new Parametro(fp, id, td));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$24 ::= 
            {
              AST.ListaParametros RESULT =null;
parser.report_error("lista_parametros: Se esperaba COMA", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // lista_parametros ::= lista_parametros error NT$24 forma_de_paso IDENTIFICADOR AS tipo_dato 
            {
              AST.ListaParametros RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (AST.ListaParametros) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$25 ::= 
            {
              AST.ListaParametros RESULT =null;
parser.report_error("lista_parametros: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // lista_parametros ::= lista_parametros COMA forma_de_paso error NT$25 AS tipo_dato 
            {
              AST.ListaParametros RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (AST.ListaParametros) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$26 ::= 
            {
              AST.ListaParametros RESULT =null;
parser.report_error("lista_parametros: Se esperaba AS", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // lista_parametros ::= lista_parametros COMA forma_de_paso IDENTIFICADOR error NT$26 tipo_dato 
            {
              AST.ListaParametros RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (AST.ListaParametros) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // forma_de_paso ::= BYVAL 
            {
              AST.FormaPaso RESULT =null;
			RESULT = ast.new FormaPaso("ByVal");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forma_de_paso",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // forma_de_paso ::= BYREF 
            {
              AST.FormaPaso RESULT =null;
			RESULT = ast.new FormaPaso("ByRef");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forma_de_paso",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencia_asignacion ::= receptor_asignacion OP_IGUAL expresion 
            {
              AST.SentenciaAsignacion RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int raright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.ReceptorAsignacion ra = (AST.ReceptorAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciaAsignacion(ra, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencia_asignacion ::= receptor_asignacion OP_IGUAL sentencia_consola 
            {
              AST.SentenciaAsignacion RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int raright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.ReceptorAsignacion ra = (AST.ReceptorAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciaConsola sc = (AST.SentenciaConsola)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciaAsignacion(ra, sc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentencia_asignacion ::= expresion OP_IGUAL expresion 
            {
              AST.SentenciaAsignacion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expresion e1 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expresion e2 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciaAsignacion(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // receptor_asignacion ::= IDENTIFICADOR 
            {
              AST.ReceptorAsignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new ReceptorAsignacion(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receptor_asignacion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // receptor_asignacion ::= propiedad 
            {
              AST.ReceptorAsignacion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Propiedad p = (AST.Propiedad)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new ReceptorAsignacion(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receptor_asignacion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencia_llamado_funcion ::= CALL llamado_funcion 
            {
              AST.SentenciaLlamadoFuncion RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.LlamadoFuncion lf = (AST.LlamadoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciaLlamadoFuncion(lf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_llamado_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentencia_llamado_funcion ::= CALL error 
            {
              AST.SentenciaLlamadoFuncion RESULT =null;
		parser.report_error("Sentencia llamado funcion: Se esperaba el llamado a la funcion", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_llamado_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // llamado_funcion ::= IDENTIFICADOR argumentos 
            {
              AST.LlamadoFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Argumentos a = (AST.Argumentos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new LlamadoFuncion(id, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // argumentos ::= PAR_IZQ PAR_DER 
            {
              AST.Argumentos RESULT =null;
			RESULT = ast.new Argumentos();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // argumentos ::= PAR_IZQ error 
            {
              AST.Argumentos RESULT =null;
		parser.report_error("Argumentos: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // argumentos ::= PAR_IZQ lista_argumentos PAR_DER 
            {
              AST.Argumentos RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.ListaArgumentos la = (AST.ListaArgumentos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new Argumentos(la);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // argumentos ::= PAR_IZQ lista_argumentos error 
            {
              AST.Argumentos RESULT =null;
		parser.report_error("Argumentos: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // lista_argumentos ::= expresion 
            {
              AST.ListaArgumentos RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new ListaArgumentos();
											RESULT.add(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_argumentos",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // lista_argumentos ::= lista_argumentos COMA expresion 
            {
              AST.ListaArgumentos RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.ListaArgumentos la = (AST.ListaArgumentos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new ListaArgumentos();
											for (int i = 0; i < la.size(); i++) {
												RESULT.add(la.getAt(i));
											}
											RESULT.add(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_argumentos",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expresion ::= expresion operador_aritmetico expresion 
            {
              AST.Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expresion e1 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expresion e2 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new Expresion(e1, o, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expresion ::= expresion operador_relacional expresion 
            {
              AST.Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expresion e1 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expresion e2 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new Expresion(e1, o, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expresion ::= expresion operador_logico expresion 
            {
              AST.Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expresion e1 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expresion e2 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new Expresion(e1, o, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              AST.Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new Expresion(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expresion ::= OP_NOT expresion 
            {
              AST.Expresion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new Expresion(e, "<>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expresion ::= operador_negacion expresion 
            {
              AST.Expresion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new Expresion(e, o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expresion ::= termino 
            {
              AST.Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Termino t = (AST.Termino)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new Expresion(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // operador_aritmetico ::= operador_aritmetico_suma 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // operador_aritmetico ::= operador_aritmetico_multiplicacion 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // operador_aritmetico_suma ::= OP_SUMA 
            {
              String RESULT =null;
			RESULT = "+";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_suma",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // operador_aritmetico_suma ::= OP_RESTA 
            {
              String RESULT =null;
			RESULT = "-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_suma",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // operador_aritmetico_multiplicacion ::= OP_POTENCIA 
            {
              String RESULT =null;
			RESULT = "^";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_multiplicacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // operador_aritmetico_multiplicacion ::= OP_MULTIPLICACION 
            {
              String RESULT =null;
			RESULT = "*";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_multiplicacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // operador_aritmetico_multiplicacion ::= OP_DIVISION 
            {
              String RESULT =null;
			RESULT = "/";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_multiplicacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // operador_relacional ::= OP_MAYOR_QUE 
            {
              String RESULT =null;
		 RESULT = ">";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // operador_relacional ::= OP_MENOR_QUE 
            {
              String RESULT =null;
		 RESULT = "<";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // operador_relacional ::= OP_MAYOR_IGUAL_QUE 
            {
              String RESULT =null;
		 RESULT = ">=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // operador_relacional ::= OP_MENOR_IGUAL_QUE 
            {
              String RESULT =null;
		 RESULT = "<=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // operador_relacional ::= OP_IGUAL 
            {
              String RESULT =null;
			RESULT = "=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // operador_relacional ::= operador_distinto 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // operador_logico ::= OP_AND 
            {
              String RESULT =null;
		 RESULT = "And";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // operador_logico ::= OP_OR 
            {
              String RESULT =null;
		 RESULT = "Or";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // operador_negacion ::= OP_RESTA 
            {
              String RESULT =null;
		 RESULT = "-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_negacion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // operador_distinto ::= OP_MENOR_QUE OP_MAYOR_QUE 
            {
              String RESULT =null;
		 RESULT = "<>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_distinto",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // operador_distinto ::= OP_MENOR_QUE error 
            {
              String RESULT =null;
		parser.report_error("operador_distinto: Se esperaba OP_MAYOR_QUE", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_distinto",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // propiedad ::= IDENTIFICADOR cadena_propiedades 
            {
              AST.Propiedad RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.CadenaPropiedades cp = (AST.CadenaPropiedades)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ast.new Propiedad(cp, id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propiedad",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // cadena_propiedades ::= PUNTO IDENTIFICADOR 
            {
              AST.CadenaPropiedades RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ast.new CadenaPropiedades();
											RESULT.add(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadena_propiedades",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // cadena_propiedades ::= cadena_propiedades PUNTO IDENTIFICADOR 
            {
              AST.CadenaPropiedades RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.CadenaPropiedades cp = (AST.CadenaPropiedades)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ast.new CadenaPropiedades();
											for (int i = 0; i < cp.size(); i++) {
												RESULT.add(cp.getAt(i));
											}
											RESULT.add(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadena_propiedades",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // fin_linea ::= FIN_LINEA fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_linea",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // fin_linea ::= FIN_LINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_linea",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // termino ::= receptor_asignacion 
            {
              AST.Termino RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int raright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.ReceptorAsignacion ra = (AST.ReceptorAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ast.new Termino(ra);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // termino ::= ENTERO_LITERAL 
            {
              AST.Termino RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new Termino(Integer.toString(n));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // termino ::= REAL_LITERAL 
            {
              AST.Termino RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new Termino(Double.toString(n));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // termino ::= CARACTER_LITERAL 
            {
              AST.Termino RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character n = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ast.new Termino(Character.toString(n));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // termino ::= CADENA_LITERAL 
            {
              AST.Termino RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ast.new Termino(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // termino ::= TRUE_LITERAL 
            {
              AST.Termino RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean n = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ast.new Termino("True");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // termino ::= FALSE_LITERAL 
            {
              AST.Termino RESULT =null;
		 RESULT = ast.new Termino("False");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // termino ::= llamado_funcion 
            {
              AST.Termino RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.LlamadoFuncion lf = (AST.LlamadoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ast.new Termino(lf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // tipo_dato ::= ENTERO 
            {
              AST.TipoDato RESULT =null;
		 RESULT = ast.new TipoDato("Integer");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // tipo_dato ::= REAL 
            {
              AST.TipoDato RESULT =null;
		 RESULT = ast.new TipoDato("Double");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // tipo_dato ::= CADENA 
            {
              AST.TipoDato RESULT =null;
		 RESULT = ast.new TipoDato("String");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // tipo_dato ::= CARACTER 
            {
              AST.TipoDato RESULT =null;
		 RESULT = ast.new TipoDato("Character");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // tipo_dato ::= BOOLEAN 
            {
              AST.TipoDato RESULT =null;
		 RESULT = ast.new TipoDato("Boolean");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // tipo_dato ::= IDENTIFICADOR 
            {
              AST.TipoDato RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ast.new TipoDato(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // visibilidad ::= PUBLIC 
            {
              AST.Visibilidad RESULT =null;
			RESULT = ast.new Visibilidad("Public");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // visibilidad ::= PRIVATE 
            {
              AST.Visibilidad RESULT =null;
			RESULT = ast.new Visibilidad("Private");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // visibilidad ::= 
            {
              AST.Visibilidad RESULT =null;
		RESULT = ast.new Visibilidad("");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // tipos_step ::= ENTERO_LITERAL 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = Integer.toString(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_step",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // tipos_step ::= REAL_LITERAL 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = Double.toString(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_step",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
