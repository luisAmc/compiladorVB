
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package VisualBasic;

import java.io.File;
import java.util.List;
import java.util.Stack;
import java.util.Arrays;
import abstractSyntaxTree.AST;
import symbolTable.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\245\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\002\000\002\003\003\000\002\003\005" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\007\000\002\005\010\000\002" +
    "\056\002\000\002\006\013\000\002\057\002\000\002\007" +
    "\013\000\002\060\002\000\002\010\012\000\002\011\003" +
    "\000\002\011\002\000\002\012\003\000\002\012\004\000" +
    "\002\013\005\000\002\013\007\000\002\013\010\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\014\016" +
    "\000\002\061\002\000\002\014\017\000\002\062\002\000" +
    "\002\014\017\000\002\063\002\000\002\014\017\000\002" +
    "\064\002\000\002\014\017\000\002\065\002\000\002\014" +
    "\017\000\002\066\002\000\002\014\017\000\002\014\016" +
    "\000\002\015\010\000\002\067\002\000\002\015\011\000" +
    "\002\070\002\000\002\015\011\000\002\071\002\000\002" +
    "\015\011\000\002\015\010\000\002\016\013\000\002\072" +
    "\002\000\002\016\014\000\002\073\002\000\002\016\014" +
    "\000\002\016\013\000\002\016\011\000\002\074\002\000" +
    "\002\016\012\000\002\016\011\000\002\016\012\000\002" +
    "\017\003\000\002\017\004\000\002\020\007\000\002\021" +
    "\005\000\002\022\005\000\002\022\006\000\002\075\002" +
    "\000\002\022\006\000\002\022\006\000\002\022\006\000" +
    "\002\022\005\000\002\076\002\000\002\022\007\000\002" +
    "\022\006\000\002\023\003\000\002\023\002\000\002\024" +
    "\004\000\002\024\005\000\002\025\005\000\002\026\004" +
    "\000\002\026\004\000\002\026\005\000\002\026\005\000" +
    "\002\027\005\000\002\027\006\000\002\077\002\000\002" +
    "\027\007\000\002\100\002\000\002\027\007\000\002\027" +
    "\010\000\002\101\002\000\002\027\011\000\002\102\002" +
    "\000\002\027\011\000\002\103\002\000\002\027\011\000" +
    "\002\030\003\000\002\030\003\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\032\003\000\002\032" +
    "\003\000\002\033\004\000\002\033\004\000\002\034\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\005\000" +
    "\002\035\005\000\002\036\003\000\002\036\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\004\000\002\037\004\000\002\037\003" +
    "\000\002\040\003\000\002\040\003\000\002\041\003\000" +
    "\002\041\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\043\003\000\002\043\003\000\002\045\003\000" +
    "\002\046\004\000\002\046\004\000\002\047\004\000\002" +
    "\050\004\000\002\050\005\000\002\051\004\000\002\051" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\002\000\002\055\003\000\002\055\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0152\000\022\002\ufffe\013\uff5f\014\uff5f\016\005\017" +
    "\014\021\uff5f\022\uff5f\063\017\001\002\000\004\002\u0154" +
    "\001\002\000\012\013\uff61\014\uff61\021\uff61\022\uff61\001" +
    "\002\000\006\002\ufff8\063\ufff8\001\002\000\006\002\ufffa" +
    "\063\ufffa\001\002\000\006\002\ufffd\063\ufffd\001\002\000" +
    "\006\002\ufff9\063\ufff9\001\002\000\006\002\ufffb\063\ufffb" +
    "\001\002\000\012\013\027\014\025\021\024\022\026\001" +
    "\002\000\012\013\uff60\014\uff60\021\uff60\022\uff60\001\002" +
    "\000\016\013\uff5f\014\uff5f\016\005\017\014\021\uff5f\022" +
    "\uff5f\001\002\000\006\002\uffff\063\017\001\002\000\074" +
    "\003\uff70\004\uff70\005\uff70\013\uff70\014\uff70\016\uff70\017" +
    "\uff70\021\uff70\022\uff70\024\uff70\035\uff70\037\uff70\044\uff70" +
    "\046\uff70\047\uff70\050\uff70\051\uff70\054\uff70\055\uff70\056" +
    "\uff70\063\017\064\uff70\066\uff70\067\uff70\070\uff70\071\uff70" +
    "\072\uff70\073\uff70\074\uff70\001\002\000\072\003\uff71\004" +
    "\uff71\005\uff71\013\uff71\014\uff71\016\uff71\017\uff71\021\uff71" +
    "\022\uff71\024\uff71\035\uff71\037\uff71\044\uff71\046\uff71\047" +
    "\uff71\050\uff71\051\uff71\054\uff71\055\uff71\056\uff71\064\uff71" +
    "\066\uff71\067\uff71\070\uff71\071\uff71\072\uff71\073\uff71\074" +
    "\uff71\001\002\000\016\013\uff5f\014\uff5f\016\005\017\014" +
    "\021\uff5f\022\uff5f\001\002\000\006\002\ufffc\063\ufffc\001" +
    "\002\000\006\002\001\063\017\001\002\000\004\072\u014d" +
    "\001\002\000\004\072\u0148\001\002\000\004\072\054\001" +
    "\002\000\004\072\030\001\002\000\004\063\ufff1\001\002" +
    "\000\004\063\017\001\002\000\006\050\uffb2\072\035\001" +
    "\002\000\004\063\017\001\002\000\006\050\uffb3\072\035" +
    "\001\002\000\004\015\041\001\002\000\004\050\037\001" +
    "\002\000\004\013\040\001\002\000\006\002\ufff0\063\ufff0" +
    "\001\002\000\016\006\047\007\043\010\046\011\045\012" +
    "\050\072\044\001\002\000\004\063\uffaf\001\002\000\014" +
    "\002\uff66\003\uff66\061\uff66\063\uff66\065\uff66\001\002\000" +
    "\014\002\uff62\003\uff62\061\uff62\063\uff62\065\uff62\001\002" +
    "\000\014\002\uff64\003\uff64\061\uff64\063\uff64\065\uff64\001" +
    "\002\000\014\002\uff63\003\uff63\061\uff63\063\uff63\065\uff63" +
    "\001\002\000\014\002\uff67\003\uff67\061\uff67\063\uff67\065" +
    "\uff67\001\002\000\014\002\uff65\003\uff65\061\uff65\063\uff65" +
    "\065\uff65\001\002\000\004\063\017\001\002\000\006\050" +
    "\uffb0\072\uffb0\001\002\000\006\050\uffb1\072\uffb1\001\002" +
    "\000\004\064\056\001\002\000\004\063\ufff3\001\002\000" +
    "\014\003\060\025\057\026\061\065\065\072\062\001\002" +
    "\000\006\003\uff9c\072\uff9c\001\002\000\004\063\uffad\001" +
    "\002\000\006\003\uff9d\072\uff9d\001\002\000\004\015\123" +
    "\001\002\000\010\003\101\061\100\065\102\001\002\000" +
    "\006\003\066\072\067\001\002\000\004\063\uffae\001\002" +
    "\000\004\015\uffa8\001\002\000\006\003\071\015\070\001" +
    "\002\000\016\006\047\007\043\010\046\011\045\012\050" +
    "\072\044\001\002\000\016\006\uffa6\007\uffa6\010\uffa6\011" +
    "\uffa6\012\uffa6\072\uffa6\001\002\000\016\006\047\007\043" +
    "\010\046\011\045\012\050\072\044\001\002\000\010\003" +
    "\uffa5\061\uffa5\065\uffa5\001\002\000\010\003\uffa9\061\uffa9" +
    "\065\uffa9\001\002\000\004\015\076\001\002\000\016\006" +
    "\047\007\043\010\046\011\045\012\050\072\044\001\002" +
    "\000\010\003\uffa7\061\uffa7\065\uffa7\001\002\000\006\025" +
    "\057\026\061\001\002\000\010\025\uffa3\026\uffa3\063\uffab" +
    "\001\002\000\004\063\uffac\001\002\000\006\025\057\026" +
    "\061\001\002\000\004\072\105\001\002\000\004\015\106" +
    "\001\002\000\016\006\047\007\043\010\046\011\045\012" +
    "\050\072\044\001\002\000\010\003\uffa2\061\uffa2\065\uffa2" +
    "\001\002\000\006\003\111\072\112\001\002\000\004\015" +
    "\uffa1\001\002\000\006\003\114\015\113\001\002\000\016" +
    "\006\047\007\043\010\046\011\045\012\050\072\044\001" +
    "\002\000\016\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f" +
    "\072\uff9f\001\002\000\016\006\047\007\043\010\046\011" +
    "\045\012\050\072\044\001\002\000\010\003\uff9e\061\uff9e" +
    "\065\uff9e\001\002\000\010\003\uffa4\061\uffa4\065\uffa4\001" +
    "\002\000\004\015\121\001\002\000\016\006\047\007\043" +
    "\010\046\011\045\012\050\072\044\001\002\000\010\003" +
    "\uffa0\061\uffa0\065\uffa0\001\002\000\016\006\047\007\043" +
    "\010\046\011\045\012\050\072\044\001\002\000\010\003" +
    "\uffaa\061\uffaa\065\uffaa\001\002\000\004\063\017\001\002" +
    "\000\046\004\146\005\130\014\164\024\134\035\142\037" +
    "\165\044\145\050\uffee\051\166\056\150\064\155\066\151" +
    "\067\141\070\162\071\131\072\157\073\160\074\132\001" +
    "\002\000\032\027\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f" +
    "\034\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f\043" +
    "\u0145\001\002\000\006\003\u013c\064\u013d\001\002\000\050" +
    "\003\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\033\uff6b\034" +
    "\uff6b\036\uff6b\037\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b" +
    "\045\uff6b\052\uff6b\053\uff6b\061\uff6b\063\uff6b\065\uff6b\001" +
    "\002\000\050\003\uff69\027\uff69\030\uff69\031\uff69\032\uff69" +
    "\033\uff69\034\uff69\036\uff69\037\uff69\040\uff69\041\uff69\042" +
    "\uff69\043\uff69\045\uff69\052\uff69\053\uff69\061\uff69\063\uff69" +
    "\065\uff69\001\002\000\060\003\uffed\004\uffed\005\uffed\014" +
    "\uffed\024\uffed\035\uffed\037\uffed\044\uffed\046\uffed\047\uffed" +
    "\050\uffed\051\uffed\054\uffed\055\uffed\056\uffed\064\uffed\066" +
    "\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074\uffed" +
    "\001\002\000\006\003\u013a\072\323\001\002\000\004\063" +
    "\017\001\002\000\032\027\210\030\214\031\206\032\207" +
    "\033\177\034\201\036\205\037\215\040\220\041\211\042" +
    "\212\043\u0137\001\002\000\004\063\017\001\002\000\004" +
    "\050\u0134\001\002\000\050\003\uff6d\027\uff6d\030\uff6d\031" +
    "\uff6d\032\uff6d\033\uff6d\034\uff6d\036\uff6d\037\uff6d\040\uff6d" +
    "\041\uff6d\042\uff6d\043\uff6d\045\uff6d\052\uff6d\053\uff6d\061" +
    "\uff6d\063\uff6d\065\uff6d\001\002\000\026\035\142\037\165" +
    "\064\155\066\151\067\141\070\162\071\131\072\157\073" +
    "\160\074\132\001\002\000\060\003\uffef\004\146\005\130" +
    "\014\164\024\134\035\142\037\165\044\145\046\uffef\047" +
    "\uffef\050\uffef\051\166\054\uffef\055\uffef\056\150\064\155" +
    "\066\151\067\141\070\162\071\131\072\157\073\160\074" +
    "\132\001\002\000\050\003\uff68\027\uff68\030\uff68\031\uff68" +
    "\032\uff68\033\uff68\034\uff68\036\uff68\037\uff68\040\uff68\041" +
    "\uff68\042\uff68\043\uff68\045\uff68\052\uff68\053\uff68\061\uff68" +
    "\063\uff68\065\uff68\001\002\000\026\035\142\037\165\064" +
    "\155\066\151\067\141\070\162\071\131\072\157\073\160" +
    "\074\132\001\002\000\006\003\u0103\064\u0104\001\002\000" +
    "\034\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97" +
    "\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\064" +
    "\327\001\002\000\006\003\354\057\355\001\002\000\050" +
    "\003\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e\034" +
    "\uff6e\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e" +
    "\045\uff6e\052\uff6e\053\uff6e\061\uff6e\063\uff6e\065\uff6e\001" +
    "\002\000\004\063\017\001\002\000\026\035\142\037\165" +
    "\064\155\066\151\067\141\070\162\071\131\072\157\073" +
    "\160\074\132\001\002\000\050\003\uff87\027\uff87\030\uff87" +
    "\031\uff87\032\uff87\033\uff87\034\uff87\036\uff87\037\uff87\040" +
    "\uff87\041\uff87\042\uff87\043\uff87\045\uff87\052\uff87\053\uff87" +
    "\061\uff87\063\uff87\065\uff87\001\002\000\026\035\142\037" +
    "\165\064\155\066\151\067\141\070\162\071\131\072\157" +
    "\073\160\074\132\001\002\000\004\063\017\001\002\000" +
    "\054\003\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98" +
    "\034\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043" +
    "\uff98\045\uff98\052\uff98\053\uff98\061\uff98\062\342\063\uff98" +
    "\064\327\065\uff98\001\002\000\050\003\uff6a\027\uff6a\030" +
    "\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a\036\uff6a\037\uff6a" +
    "\040\uff6a\041\uff6a\042\uff6a\043\uff6a\045\uff6a\052\uff6a\053" +
    "\uff6a\061\uff6a\063\uff6a\065\uff6a\001\002\000\004\063\017" +
    "\001\002\000\050\003\uff6c\027\uff6c\030\uff6c\031\uff6c\032" +
    "\uff6c\033\uff6c\034\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c" +
    "\042\uff6c\043\uff6c\045\uff6c\052\uff6c\053\uff6c\061\uff6c\063" +
    "\uff6c\065\uff6c\001\002\000\004\063\017\001\002\000\004" +
    "\072\316\001\002\000\026\035\uff77\037\uff77\064\uff77\066" +
    "\uff77\067\uff77\070\uff77\071\uff77\072\uff77\073\uff77\074\uff77" +
    "\001\002\000\006\003\167\072\170\001\002\000\004\043" +
    "\uffe1\001\002\000\006\003\171\043\172\001\002\000\026" +
    "\035\uffdf\037\uffdf\064\uffdf\066\uffdf\067\uffdf\070\uffdf\071" +
    "\uffdf\072\uffdf\073\uffdf\074\uffdf\001\002\000\026\035\142" +
    "\037\165\064\155\066\151\067\141\070\162\071\131\072" +
    "\157\073\160\074\132\001\002\000\036\003\213\027\210" +
    "\030\214\031\206\032\207\033\177\034\201\036\205\037" +
    "\215\040\220\041\211\042\212\043\176\052\217\001\002" +
    "\000\050\003\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033" +
    "\uff97\034\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97" +
    "\043\uff97\045\uff97\052\uff97\053\uff97\061\uff97\063\uff97\065" +
    "\uff97\001\002\000\050\003\uff6f\027\uff6f\030\uff6f\031\uff6f" +
    "\032\uff6f\033\uff6f\034\uff6f\036\uff6f\037\uff6f\040\uff6f\041" +
    "\uff6f\042\uff6f\043\uff6f\045\uff6f\052\uff6f\053\uff6f\061\uff6f" +
    "\063\uff6f\065\uff6f\001\002\000\026\035\uff7b\037\uff7b\064" +
    "\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b\073\uff7b" +
    "\074\uff7b\001\002\000\026\035\uff79\037\uff79\064\uff79\066" +
    "\uff79\067\uff79\070\uff79\071\uff79\072\uff79\073\uff79\074\uff79" +
    "\001\002\000\026\035\uff85\037\uff85\064\uff85\066\uff85\067" +
    "\uff85\070\uff85\071\uff85\072\uff85\073\uff85\074\uff85\001\002" +
    "\000\026\035\uff78\037\uff78\064\uff78\066\uff78\067\uff78\070" +
    "\uff78\071\uff78\072\uff78\073\uff78\074\uff78\001\002\000\026" +
    "\035\142\037\165\064\155\066\151\067\141\070\162\071" +
    "\131\072\157\073\160\074\132\001\002\000\026\035\uff86" +
    "\037\uff86\064\uff86\066\uff86\067\uff86\070\uff86\071\uff86\072" +
    "\uff86\073\uff86\074\uff86\001\002\000\026\035\142\037\165" +
    "\064\155\066\151\067\141\070\162\071\131\072\157\073" +
    "\160\074\132\001\002\000\026\035\uff84\037\uff84\064\uff84" +
    "\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84\073\uff84\074" +
    "\uff84\001\002\000\026\035\uff7d\037\uff7d\064\uff7d\066\uff7d" +
    "\067\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d\001" +
    "\002\000\026\035\uff7c\037\uff7c\064\uff7c\066\uff7c\067\uff7c" +
    "\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c\001\002\000" +
    "\026\035\uff7f\037\uff7f\064\uff7f\066\uff7f\067\uff7f\070\uff7f" +
    "\071\uff7f\072\uff7f\073\uff7f\074\uff7f\001\002\000\026\035" +
    "\uff80\037\uff80\064\uff80\066\uff80\067\uff80\070\uff80\071\uff80" +
    "\072\uff80\073\uff80\074\uff80\001\002\000\026\035\uff82\037" +
    "\uff82\064\uff82\066\uff82\067\uff82\070\uff82\071\uff82\072\uff82" +
    "\073\uff82\074\uff82\001\002\000\026\035\uffdd\037\uffdd\064" +
    "\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd" +
    "\074\uffdd\001\002\000\032\003\256\027\255\035\uff7e\037" +
    "\uff7e\064\uff7e\066\uff7e\067\uff7e\070\uff7e\071\uff7e\072\uff7e" +
    "\073\uff7e\074\uff7e\001\002\000\026\035\uff83\037\uff83\064" +
    "\uff83\066\uff83\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83" +
    "\074\uff83\001\002\000\026\035\uff7a\037\uff7a\064\uff7a\066" +
    "\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a\073\uff7a\074\uff7a" +
    "\001\002\000\026\035\142\037\165\064\155\066\151\067" +
    "\141\070\162\071\131\072\157\073\160\074\132\001\002" +
    "\000\026\035\uff81\037\uff81\064\uff81\066\uff81\067\uff81\070" +
    "\uff81\071\uff81\072\uff81\073\uff81\074\uff81\001\002\000\026" +
    "\035\142\037\165\064\155\066\151\067\141\070\162\071" +
    "\131\072\157\073\160\074\132\001\002\000\050\003\uff8b" +
    "\027\210\030\214\031\206\032\207\033\177\034\201\036" +
    "\205\037\215\040\220\041\211\042\212\043\176\045\uff8b" +
    "\052\uff8b\053\uff8b\061\uff8b\063\uff8b\065\uff8b\001\002\000" +
    "\036\003\225\027\210\030\214\031\206\032\207\033\177" +
    "\034\201\036\205\037\215\040\220\041\211\042\212\043" +
    "\176\053\224\001\002\000\010\003\236\066\230\067\227" +
    "\001\002\000\006\066\uffdb\067\uffdb\001\002\000\006\066" +
    "\230\067\227\001\002\000\004\063\uff5d\001\002\000\004" +
    "\063\uff5e\001\002\000\004\063\017\001\002\000\046\004" +
    "\146\005\130\014\164\024\134\035\142\037\165\044\145" +
    "\051\166\054\uffee\056\150\064\155\066\151\067\141\070" +
    "\162\071\131\072\157\073\160\074\132\001\002\000\004" +
    "\054\234\001\002\000\004\072\235\001\002\000\004\063" +
    "\uffda\001\002\000\004\063\uffd9\001\002\000\004\063\017" +
    "\001\002\000\050\003\uffee\004\146\005\130\014\164\024" +
    "\134\035\142\037\165\044\145\051\166\054\uffee\056\150" +
    "\064\155\066\151\067\141\070\162\071\131\072\157\073" +
    "\160\074\132\001\002\000\006\003\242\054\243\001\002" +
    "\000\004\072\uffd7\001\002\000\006\003\244\072\245\001" +
    "\002\000\004\063\uffd5\001\002\000\004\063\uffe2\001\002" +
    "\000\004\072\247\001\002\000\004\063\uffd6\001\002\000" +
    "\004\063\017\001\002\000\046\004\146\005\130\014\164" +
    "\024\134\035\142\037\165\044\145\051\166\054\uffee\056" +
    "\150\064\155\066\151\067\141\070\162\071\131\072\157" +
    "\073\160\074\132\001\002\000\004\054\253\001\002\000" +
    "\004\072\254\001\002\000\004\063\uffd8\001\002\000\026" +
    "\035\uff76\037\uff76\064\uff76\066\uff76\067\uff76\070\uff76\071" +
    "\uff76\072\uff76\073\uff76\074\uff76\001\002\000\026\035\uff75" +
    "\037\uff75\064\uff75\066\uff75\067\uff75\070\uff75\071\uff75\072" +
    "\uff75\073\uff75\074\uff75\001\002\000\026\035\142\037\165" +
    "\064\155\066\151\067\141\070\162\071\131\072\157\073" +
    "\160\074\132\001\002\000\034\027\210\030\214\031\206" +
    "\032\207\033\177\034\201\036\205\037\215\040\220\041" +
    "\211\042\212\043\176\053\261\001\002\000\006\066\230" +
    "\067\227\001\002\000\004\063\017\001\002\000\046\004" +
    "\146\005\130\014\164\024\134\035\142\037\165\044\145" +
    "\051\166\054\uffee\056\150\064\155\066\151\067\141\070" +
    "\162\071\131\072\157\073\160\074\132\001\002\000\004" +
    "\054\265\001\002\000\004\072\266\001\002\000\004\063" +
    "\uffdc\001\002\000\050\003\uff8c\027\210\030\214\031\206" +
    "\032\207\033\177\034\201\036\205\037\215\040\220\041" +
    "\211\042\212\043\176\045\uff8c\052\uff8c\053\uff8c\061\uff8c" +
    "\063\uff8c\065\uff8c\001\002\000\050\003\uff8d\027\210\030" +
    "\214\031\206\032\207\033\177\034\201\036\205\037\215" +
    "\040\220\041\211\042\212\043\176\045\uff8d\052\uff8d\053" +
    "\uff8d\061\uff8d\063\uff8d\065\uff8d\001\002\000\026\035\142" +
    "\037\165\064\155\066\151\067\141\070\162\071\131\072" +
    "\157\073\160\074\132\001\002\000\034\027\210\030\214" +
    "\031\206\032\207\033\177\034\201\036\205\037\215\040" +
    "\220\041\211\042\212\043\176\052\273\001\002\000\026" +
    "\035\142\037\165\064\155\066\151\067\141\070\162\071" +
    "\131\072\157\073\160\074\132\001\002\000\034\027\210" +
    "\030\214\031\206\032\207\033\177\034\201\036\205\037" +
    "\215\040\220\041\211\042\212\043\176\053\275\001\002" +
    "\000\006\066\230\067\227\001\002\000\004\063\017\001" +
    "\002\000\046\004\146\005\130\014\164\024\134\035\142" +
    "\037\165\044\145\051\166\054\uffee\056\150\064\155\066" +
    "\151\067\141\070\162\071\131\072\157\073\160\074\132" +
    "\001\002\000\004\054\301\001\002\000\004\072\302\001" +
    "\002\000\004\063\uffde\001\002\000\004\043\304\001\002" +
    "\000\026\035\142\037\165\064\155\066\151\067\141\070" +
    "\162\071\131\072\157\073\160\074\132\001\002\000\034" +
    "\027\210\030\214\031\206\032\207\033\177\034\201\036" +
    "\205\037\215\040\220\041\211\042\212\043\176\052\306" +
    "\001\002\000\026\035\142\037\165\064\155\066\151\067" +
    "\141\070\162\071\131\072\157\073\160\074\132\001\002" +
    "\000\034\027\210\030\214\031\206\032\207\033\177\034" +
    "\201\036\205\037\215\040\220\041\211\042\212\043\176" +
    "\053\310\001\002\000\006\066\230\067\227\001\002\000" +
    "\004\063\017\001\002\000\046\004\146\005\130\014\164" +
    "\024\134\035\142\037\165\044\145\051\166\054\uffee\056" +
    "\150\064\155\066\151\067\141\070\162\071\131\072\157" +
    "\073\160\074\132\001\002\000\004\054\314\001\002\000" +
    "\004\072\315\001\002\000\004\063\uffe0\001\002\000\004" +
    "\015\317\001\002\000\020\006\047\007\043\010\046\011" +
    "\045\012\050\020\320\072\044\001\002\000\004\072\323" +
    "\001\002\000\004\063\017\001\002\000\060\003\uffea\004" +
    "\uffea\005\uffea\014\uffea\024\uffea\035\uffea\037\uffea\044\uffea" +
    "\046\uffea\047\uffea\050\uffea\051\uffea\054\uffea\055\uffea\056" +
    "\uffea\064\uffea\066\uffea\067\uffea\070\uffea\071\uffea\072\uffea" +
    "\073\uffea\074\uffea\001\002\000\004\064\327\001\002\000" +
    "\004\063\017\001\002\000\060\003\uffe9\004\uffe9\005\uffe9" +
    "\014\uffe9\024\uffe9\035\uffe9\037\uffe9\044\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\054\uffe9\055\uffe9\056\uffe9\064\uffe9" +
    "\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074" +
    "\uffe9\001\002\000\052\002\uff94\003\uff94\027\uff94\030\uff94" +
    "\031\uff94\032\uff94\033\uff94\034\uff94\036\uff94\037\uff94\040" +
    "\uff94\041\uff94\042\uff94\043\uff94\045\uff94\052\uff94\053\uff94" +
    "\061\uff94\063\uff94\065\uff94\001\002\000\032\003\332\035" +
    "\142\037\165\064\155\065\333\066\151\067\141\070\162" +
    "\071\131\072\157\073\160\074\132\001\002\000\040\003" +
    "\uff8f\027\210\030\214\031\206\032\207\033\177\034\201" +
    "\036\205\037\215\040\220\041\211\042\212\043\176\061" +
    "\uff8f\065\uff8f\001\002\000\010\003\335\061\334\065\336" +
    "\001\002\000\052\002\uff92\003\uff92\027\uff92\030\uff92\031" +
    "\uff92\032\uff92\033\uff92\034\uff92\036\uff92\037\uff92\040\uff92" +
    "\041\uff92\042\uff92\043\uff92\045\uff92\052\uff92\053\uff92\061" +
    "\uff92\063\uff92\065\uff92\001\002\000\052\002\uff93\003\uff93" +
    "\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93\036" +
    "\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\045\uff93" +
    "\052\uff93\053\uff93\061\uff93\063\uff93\065\uff93\001\002\000" +
    "\026\035\142\037\165\064\155\066\151\067\141\070\162" +
    "\071\131\072\157\073\160\074\132\001\002\000\052\002" +
    "\uff90\003\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90" +
    "\034\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043" +
    "\uff90\045\uff90\052\uff90\053\uff90\061\uff90\063\uff90\065\uff90" +
    "\001\002\000\052\002\uff91\003\uff91\027\uff91\030\uff91\031" +
    "\uff91\032\uff91\033\uff91\034\uff91\036\uff91\037\uff91\040\uff91" +
    "\041\uff91\042\uff91\043\uff91\045\uff91\052\uff91\053\uff91\061" +
    "\uff91\063\uff91\065\uff91\001\002\000\040\003\uff8e\027\210" +
    "\030\214\031\206\032\207\033\177\034\201\036\205\037" +
    "\215\040\220\041\211\042\212\043\176\061\uff8e\065\uff8e" +
    "\001\002\000\060\003\uffe7\004\uffe7\005\uffe7\014\uffe7\024" +
    "\uffe7\035\uffe7\037\uffe7\044\uffe7\046\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\054\uffe7\055\uffe7\056\uffe7\064\uffe7\066\uffe7\067" +
    "\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\001\002" +
    "\000\060\003\uffe5\004\uffe5\005\uffe5\014\uffe5\024\uffe5\035" +
    "\uffe5\037\uffe5\044\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\064\uffe5\066\uffe5\067\uffe5\070" +
    "\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\001\002\000\004" +
    "\072\346\001\002\000\054\003\uff74\027\uff74\030\uff74\031" +
    "\uff74\032\uff74\033\uff74\034\uff74\036\uff74\037\uff74\040\uff74" +
    "\041\uff74\042\uff74\043\uff74\045\uff74\052\uff74\053\uff74\061" +
    "\uff74\062\344\063\uff74\064\uff74\065\uff74\001\002\000\004" +
    "\072\345\001\002\000\054\003\uff72\027\uff72\030\uff72\031" +
    "\uff72\032\uff72\033\uff72\034\uff72\036\uff72\037\uff72\040\uff72" +
    "\041\uff72\042\uff72\043\uff72\045\uff72\052\uff72\053\uff72\061" +
    "\uff72\062\uff72\063\uff72\064\uff72\065\uff72\001\002\000\054" +
    "\003\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034" +
    "\uff73\036\uff73\037\uff73\040\uff73\041\uff73\042\uff73\043\uff73" +
    "\045\uff73\052\uff73\053\uff73\061\uff73\062\uff73\063\uff73\064" +
    "\uff73\065\uff73\001\002\000\060\003\uffe3\004\uffe3\005\uffe3" +
    "\014\uffe3\024\uffe3\035\uffe3\037\uffe3\044\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\054\uffe3\055\uffe3\056\uffe3\064\uffe3" +
    "\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074" +
    "\uffe3\001\002\000\034\027\210\030\214\031\206\032\207" +
    "\033\177\034\201\036\205\037\215\040\220\041\211\042" +
    "\212\043\176\065\351\001\002\000\050\003\uff8a\027\uff8a" +
    "\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\036\uff8a\037" +
    "\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\045\uff8a\052\uff8a" +
    "\053\uff8a\061\uff8a\063\uff8a\065\uff8a\001\002\000\050\003" +
    "\uff88\027\210\030\214\031\206\032\207\033\177\034\201" +
    "\036\205\037\215\040\220\041\211\042\212\043\176\045" +
    "\uff88\052\uff88\053\uff88\061\uff88\063\uff88\065\uff88\001\002" +
    "\000\060\003\uffe8\004\uffe8\005\uffe8\014\uffe8\024\uffe8\035" +
    "\uffe8\037\uffe8\044\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8" +
    "\054\uffe8\055\uffe8\056\uffe8\064\uffe8\066\uffe8\067\uffe8\070" +
    "\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\001\002\000\026" +
    "\035\uffd3\037\uffd3\064\uffd3\066\uffd3\067\uffd3\070\uffd3\071" +
    "\uffd3\072\uffd3\073\uffd3\074\uffd3\001\002\000\030\003\357" +
    "\035\142\037\165\064\155\066\151\067\141\070\162\071" +
    "\131\072\157\073\160\074\132\001\002\000\036\003\365" +
    "\027\210\030\214\031\206\032\207\033\177\034\201\036" +
    "\205\037\215\040\220\041\211\042\212\043\176\063\017" +
    "\001\002\000\004\063\uffd1\001\002\000\004\063\017\001" +
    "\002\000\046\004\146\005\130\014\164\024\134\035\142" +
    "\037\165\044\145\051\166\055\uffee\056\150\064\155\066" +
    "\151\067\141\070\162\071\131\072\157\073\160\074\132" +
    "\001\002\000\004\055\363\001\002\000\004\063\uffd0\001" +
    "\002\000\050\003\uffee\004\146\005\130\014\164\024\134" +
    "\035\142\037\165\044\145\051\166\055\uffee\056\150\064" +
    "\155\066\151\067\141\070\162\071\131\072\157\073\160" +
    "\074\132\001\002\000\046\004\uffcf\005\uffcf\014\uffcf\024" +
    "\uffcf\035\uffcf\037\uffcf\044\uffcf\051\uffcf\055\uffcf\056\uffcf" +
    "\064\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073" +
    "\uffcf\074\uffcf\001\002\000\046\004\146\005\130\014\164" +
    "\024\134\035\142\037\165\044\145\051\166\055\uffee\056" +
    "\150\064\155\066\151\067\141\070\162\071\131\072\157" +
    "\073\160\074\132\001\002\000\004\055\370\001\002\000" +
    "\004\063\uffce\001\002\000\006\003\372\055\373\001\002" +
    "\000\004\063\uffcd\001\002\000\004\063\uffd4\001\002\000" +
    "\026\035\142\037\165\064\155\066\151\067\141\070\162" +
    "\071\131\072\157\073\160\074\132\001\002\000\034\027" +
    "\210\030\214\031\206\032\207\033\177\034\201\036\205" +
    "\037\215\040\220\041\211\042\212\043\176\063\017\001" +
    "\002\000\046\004\146\005\130\014\164\024\134\035\142" +
    "\037\165\044\145\051\166\055\uffee\056\150\064\155\066" +
    "\151\067\141\070\162\071\131\072\157\073\160\074\132" +
    "\001\002\000\004\055\u0100\001\002\000\004\063\uffd2\001" +
    "\002\000\004\063\017\001\002\000\060\003\uffeb\004\uffeb" +
    "\005\uffeb\014\uffeb\024\uffeb\035\uffeb\037\uffeb\044\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\064\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073" +
    "\uffeb\074\uffeb\001\002\000\004\065\uffbb\001\002\000\022" +
    "\065\u0106\066\151\067\141\070\162\071\131\072\157\073" +
    "\160\074\132\001\002\000\006\003\u0107\065\u0108\001\002" +
    "\000\004\063\uffbd\001\002\000\004\063\uffb9\001\002\000" +
    "\004\063\uffbc\001\002\000\004\065\u010a\001\002\000\004" +
    "\063\uffba\001\002\000\036\003\u010d\027\210\030\214\031" +
    "\206\032\207\033\177\034\201\036\205\037\215\040\220" +
    "\041\211\042\212\043\176\045\u010c\001\002\000\004\063" +
    "\017\001\002\000\004\063\uffcb\001\002\000\004\063\017" +
    "\001\002\000\046\004\146\005\130\014\164\024\134\035" +
    "\142\037\165\044\145\047\uffee\051\166\056\150\064\155" +
    "\066\151\067\141\070\162\071\131\072\157\073\160\074" +
    "\132\001\002\000\004\047\u0112\001\002\000\004\046\u0117" +
    "\001\002\000\026\035\142\037\165\064\155\066\151\067" +
    "\141\070\162\071\131\072\157\073\160\074\132\001\002" +
    "\000\034\027\210\030\214\031\206\032\207\033\177\034" +
    "\201\036\205\037\215\040\220\041\211\042\212\043\176" +
    "\045\u0114\001\002\000\004\063\017\001\002\000\050\004" +
    "\146\005\130\014\164\024\134\035\142\037\165\044\145" +
    "\046\uffee\047\uffee\051\166\056\150\064\155\066\151\067" +
    "\141\070\162\071\131\072\157\073\160\074\132\001\002" +
    "\000\006\046\uffbf\047\uffbf\001\002\000\004\063\017\001" +
    "\002\000\004\050\u0119\001\002\000\004\044\u011a\001\002" +
    "\000\004\063\uffca\001\002\000\050\003\uffee\004\146\005" +
    "\130\014\164\024\134\035\142\037\165\044\145\050\uffee" +
    "\051\166\056\150\064\155\066\151\067\141\070\162\071" +
    "\131\072\157\073\160\074\132\001\002\000\006\003\uffbe" +
    "\050\uffbe\001\002\000\054\003\uffee\004\146\005\130\014" +
    "\164\024\134\035\142\037\165\044\145\046\uffee\047\uffee" +
    "\050\uffee\051\166\056\150\064\155\066\151\067\141\070" +
    "\162\071\131\072\157\073\160\074\132\001\002\000\012" +
    "\003\u0120\046\u0117\047\u0112\050\u0123\001\002\000\004\050" +
    "\u0130\001\002\000\004\044\uffc5\001\002\000\006\046\uffc1" +
    "\047\uffc1\001\002\000\006\046\u0117\047\u0112\001\002\000" +
    "\006\003\u0124\044\u0125\001\002\000\004\063\uffc3\001\002" +
    "\000\004\063\uffc6\001\002\000\006\003\u0128\050\u0129\001" +
    "\002\000\006\046\uffc0\047\uffc0\001\002\000\004\044\uffc9" +
    "\001\002\000\006\003\u012a\044\u012b\001\002\000\004\063" +
    "\uffc7\001\002\000\004\063\uffcc\001\002\000\004\044\u012d" +
    "\001\002\000\004\063\uffc8\001\002\000\004\044\u012f\001" +
    "\002\000\004\063\uffc4\001\002\000\004\044\u0131\001\002" +
    "\000\004\063\uffc2\001\002\000\060\003\uffec\004\uffec\005" +
    "\uffec\014\uffec\024\uffec\035\uffec\037\uffec\044\uffec\046\uffec" +
    "\047\uffec\050\uffec\051\uffec\054\uffec\055\uffec\056\uffec\064" +
    "\uffec\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec\073\uffec" +
    "\074\uffec\001\002\000\050\003\uff89\027\210\030\214\031" +
    "\206\032\207\033\177\034\201\036\205\037\215\040\220" +
    "\041\211\042\212\043\176\045\uff89\052\uff89\053\uff89\061" +
    "\uff89\063\uff89\065\uff89\001\002\000\004\022\u0135\001\002" +
    "\000\006\002\ufff2\063\ufff2\001\002\000\060\003\uffe6\004" +
    "\uffe6\005\uffe6\014\uffe6\024\uffe6\035\uffe6\037\uffe6\044\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\051\uffe6\054\uffe6\055\uffe6\056" +
    "\uffe6\064\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6" +
    "\073\uffe6\074\uffe6\001\002\000\026\035\uff7b\037\uff7b\064" +
    "\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b\073\uff7b" +
    "\074\uff7b\001\002\000\034\027\210\030\214\031\206\032" +
    "\207\033\177\034\201\036\205\037\215\040\220\041\211" +
    "\042\212\043\176\063\uff99\001\002\000\060\003\uffe4\004" +
    "\uffe4\005\uffe4\014\uffe4\024\uffe4\035\uffe4\037\uffe4\044\uffe4" +
    "\046\uffe4\047\uffe4\050\uffe4\051\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\064\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4\072\uffe4" +
    "\073\uffe4\074\uffe4\001\002\000\004\063\uff95\001\002\000" +
    "\004\063\uff96\001\002\000\020\066\uffb6\067\uffb6\070\uffb6" +
    "\071\uffb6\072\uffb6\073\uffb6\074\uffb6\001\002\000\022\065" +
    "\u013f\066\151\067\141\070\162\071\131\072\157\073\160" +
    "\074\132\001\002\000\006\003\u0140\065\u0141\001\002\000" +
    "\004\063\uffb7\001\002\000\004\063\uffb4\001\002\000\004" +
    "\063\uffb8\001\002\000\020\066\151\067\141\070\162\071" +
    "\131\072\157\073\160\074\132\001\002\000\004\065\u0144" +
    "\001\002\000\004\063\uffb5\001\002\000\032\004\146\005" +
    "\130\035\142\037\165\064\155\066\151\067\141\070\162" +
    "\071\131\072\157\073\160\074\132\001\002\000\034\027" +
    "\210\030\214\031\206\032\207\033\177\034\201\036\205" +
    "\037\215\040\220\041\211\042\212\043\176\063\uff9b\001" +
    "\002\000\004\063\uff9a\001\002\000\004\015\u0149\001\002" +
    "\000\020\006\047\007\043\010\046\011\045\012\050\020" +
    "\u014a\072\044\001\002\000\004\072\323\001\002\000\006" +
    "\002\ufff7\063\ufff7\001\002\000\006\002\ufff6\063\ufff6\001" +
    "\002\000\004\064\056\001\002\000\004\063\ufff5\001\002" +
    "\000\004\063\017\001\002\000\046\004\146\005\130\014" +
    "\164\024\134\035\142\037\165\044\145\050\uffee\051\166" +
    "\056\150\064\155\066\151\067\141\070\162\071\131\072" +
    "\157\073\160\074\132\001\002\000\004\050\u0152\001\002" +
    "\000\004\021\u0153\001\002\000\006\002\ufff4\063\ufff4\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0152\000\024\002\003\003\015\004\007\005\011\006" +
    "\006\007\010\010\005\051\014\054\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\022\004" +
    "\007\005\011\006\006\007\010\010\005\054\012\001\001" +
    "\000\004\051\020\001\001\000\004\051\017\001\001\000" +
    "\002\001\001\000\016\004\021\005\011\006\006\007\010" +
    "\010\005\054\012\001\001\000\002\001\001\000\004\051" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\030\001\001\000" +
    "\004\051\031\001\001\000\010\023\035\024\033\025\032" +
    "\001\001\000\004\051\052\001\001\000\004\025\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\054\001\001\000\004\057\124\001\001\000" +
    "\006\027\062\030\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\077\074" +
    "\001\001\000\002\001\001\000\004\053\073\001\001\000" +
    "\004\100\071\001\001\000\004\053\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\076\001\001\000\002\001\001\000\004\030\107\001\001" +
    "\000\004\101\102\001\001\000\002\001\001\000\004\030" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\102\117\001\001\000\002\001\001\000\004\053\116" +
    "\001\001\000\004\103\114\001\001\000\004\053\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\121\001\001\000\002\001\001\000\004\053" +
    "\123\001\001\000\002\001\001\000\004\051\125\001\001" +
    "\000\040\011\137\012\142\013\132\014\151\015\162\016" +
    "\136\022\160\031\155\032\126\033\134\034\143\037\135" +
    "\045\152\047\146\052\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\u013a\001\001\000\004\051\u0138\001" +
    "\001\000\016\040\201\041\202\042\177\043\220\044\203" +
    "\046\215\001\001\000\004\051\u0135\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\032\174\034\143\037\u0132" +
    "\045\152\047\173\052\153\001\001\000\034\013\u0131\014" +
    "\151\015\162\016\136\022\160\031\155\032\126\033\134" +
    "\034\143\037\135\045\152\047\146\052\153\001\001\000" +
    "\002\001\001\000\016\032\174\034\143\037\u010a\045\152" +
    "\047\173\052\153\001\001\000\002\001\001\000\004\035" +
    "\u0100\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\352\001\001\000\016\032\174\034\143\037\351\045" +
    "\152\047\173\052\153\001\001\000\002\001\001\000\016" +
    "\032\174\034\143\037\347\045\152\047\173\052\153\001" +
    "\001\000\004\051\346\001\001\000\006\035\325\050\342" +
    "\001\001\000\002\001\001\000\004\051\340\001\001\000" +
    "\002\001\001\000\004\051\337\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\302\001" +
    "\001\000\002\001\001\000\004\062\270\001\001\000\016" +
    "\032\174\034\143\037\172\045\152\047\173\052\153\001" +
    "\001\000\016\040\201\041\202\042\177\043\220\044\203" +
    "\046\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\032\174\034\143\037\267\045\152\047" +
    "\173\052\153\001\001\000\002\001\001\000\016\032\174" +
    "\034\143\037\266\045\152\047\173\052\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\032\174\034\143\037\222\045\152\047" +
    "\173\052\153\001\001\000\002\001\001\000\016\032\174" +
    "\034\143\037\221\045\152\047\173\052\153\001\001\000" +
    "\016\040\201\041\202\042\177\043\220\044\203\046\215" +
    "\001\001\000\016\040\201\041\202\042\177\043\220\044" +
    "\203\046\215\001\001\000\004\055\236\001\001\000\004" +
    "\064\225\001\001\000\004\055\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\231\001\001\000\040" +
    "\011\232\012\142\013\132\014\151\015\162\016\136\022" +
    "\160\031\155\032\126\033\134\034\143\037\135\045\152" +
    "\047\146\052\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\247\001\001\000\004" +
    "\051\237\001\001\000\040\011\240\012\142\013\132\014" +
    "\151\015\162\016\136\022\160\031\155\032\126\033\134" +
    "\034\143\037\135\045\152\047\146\052\153\001\001\000" +
    "\002\001\001\000\004\066\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\250\001\001\000\040\011\251" +
    "\012\142\013\132\014\151\015\162\016\136\022\160\031" +
    "\155\032\126\033\134\034\143\037\135\045\152\047\146" +
    "\052\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\032\174\034\143\037\257\045\152\047\173\052\153\001" +
    "\001\000\016\040\201\041\202\042\177\043\220\044\203" +
    "\046\215\001\001\000\004\055\261\001\001\000\004\051" +
    "\262\001\001\000\040\011\263\012\142\013\132\014\151" +
    "\015\162\016\136\022\160\031\155\032\126\033\134\034" +
    "\143\037\135\045\152\047\146\052\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\040" +
    "\201\041\202\042\177\043\220\044\203\046\215\001\001" +
    "\000\016\040\201\041\202\042\177\043\220\044\203\046" +
    "\215\001\001\000\016\032\174\034\143\037\271\045\152" +
    "\047\173\052\153\001\001\000\016\040\201\041\202\042" +
    "\177\043\220\044\203\046\215\001\001\000\016\032\174" +
    "\034\143\037\273\045\152\047\173\052\153\001\001\000" +
    "\016\040\201\041\202\042\177\043\220\044\203\046\215" +
    "\001\001\000\004\055\275\001\001\000\004\051\276\001" +
    "\001\000\040\011\277\012\142\013\132\014\151\015\162" +
    "\016\136\022\160\031\155\032\126\033\134\034\143\037" +
    "\135\045\152\047\146\052\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\032\174\034\143\037\304\045\152\047\173\052\153" +
    "\001\001\000\016\040\201\041\202\042\177\043\220\044" +
    "\203\046\215\001\001\000\016\032\174\034\143\037\306" +
    "\045\152\047\173\052\153\001\001\000\016\040\201\041" +
    "\202\042\177\043\220\044\203\046\215\001\001\000\004" +
    "\055\310\001\001\000\004\051\311\001\001\000\040\011" +
    "\312\012\142\013\132\014\151\015\162\016\136\022\160" +
    "\031\155\032\126\033\134\034\143\037\135\045\152\047" +
    "\146\052\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\320\001" +
    "\001\000\004\034\323\001\001\000\004\051\321\001\001" +
    "\000\002\001\001\000\004\035\325\001\001\000\004\051" +
    "\324\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\032\174\034\143\036\330\037\327\045\152\047\173\052" +
    "\153\001\001\000\016\040\201\041\202\042\177\043\220" +
    "\044\203\046\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\032\174\034\143\037\336" +
    "\045\152\047\173\052\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\040\201\041\202\042\177\043\220" +
    "\044\203\046\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\040\201\041\202\042\177\043\220\044\203\046\215" +
    "\001\001\000\002\001\001\000\016\040\201\041\202\042" +
    "\177\043\220\044\203\046\215\001\001\000\002\001\001" +
    "\000\004\067\373\001\001\000\016\032\174\034\143\037" +
    "\355\045\152\047\173\052\153\001\001\000\020\040\201" +
    "\041\202\042\177\043\220\044\203\046\215\051\363\001" +
    "\001\000\004\070\357\001\001\000\004\051\360\001\001" +
    "\000\040\011\361\012\142\013\132\014\151\015\162\016" +
    "\136\022\160\031\155\032\126\033\134\034\143\037\135" +
    "\045\152\047\146\052\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\011\370\012\142\013\132\014\151" +
    "\015\162\016\136\022\160\031\155\032\126\033\134\034" +
    "\143\037\135\045\152\047\146\052\153\001\001\000\004" +
    "\071\365\001\001\000\040\011\366\012\142\013\132\014" +
    "\151\015\162\016\136\022\160\031\155\032\126\033\134" +
    "\034\143\037\135\045\152\047\146\052\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\032\174\034\143\037" +
    "\374\045\152\047\173\052\153\001\001\000\020\040\201" +
    "\041\202\042\177\043\220\044\203\046\215\051\375\001" +
    "\001\000\040\011\376\012\142\013\132\014\151\015\162" +
    "\016\136\022\160\031\155\032\126\033\134\034\143\037" +
    "\135\045\152\047\146\052\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\u0101\001\001\000\002\001" +
    "\001\000\004\075\u0108\001\001\000\012\032\174\034\143" +
    "\047\173\052\u0104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\040\201\041\202\042\177\043" +
    "\220\044\203\046\215\001\001\000\004\051\u011c\001\001" +
    "\000\004\072\u010d\001\001\000\004\051\u010e\001\001\000" +
    "\040\011\u010f\012\142\013\132\014\151\015\162\016\136" +
    "\022\160\031\155\032\126\033\134\034\143\037\135\045" +
    "\152\047\146\052\153\001\001\000\004\020\u0110\001\001" +
    "\000\004\021\u0117\001\001\000\016\032\174\034\143\037" +
    "\u0112\045\152\047\173\052\153\001\001\000\016\040\201" +
    "\041\202\042\177\043\220\044\203\046\215\001\001\000" +
    "\004\051\u0114\001\001\000\040\011\u0115\012\142\013\132" +
    "\014\151\015\162\016\136\022\160\031\155\032\126\033" +
    "\134\034\143\037\135\045\152\047\146\052\153\001\001" +
    "\000\002\001\001\000\004\051\u011a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\011\u011b" +
    "\012\142\013\132\014\151\015\162\016\136\022\160\031" +
    "\155\032\126\033\134\034\143\037\135\045\152\047\146" +
    "\052\153\001\001\000\002\001\001\000\040\011\u011d\012" +
    "\142\013\132\014\151\015\162\016\136\022\160\031\155" +
    "\032\126\033\134\034\143\037\135\045\152\047\146\052" +
    "\153\001\001\000\010\017\u0121\020\u0120\021\u011e\001\001" +
    "\000\002\001\001\000\004\074\u012d\001\001\000\002\001" +
    "\001\000\006\020\u0126\021\u0125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\073\u012b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\040" +
    "\201\041\202\042\177\043\220\044\203\046\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\032\174\034\143\037\u0137\045\152\047\173\052\153" +
    "\001\001\000\016\040\201\041\202\042\177\043\220\044" +
    "\203\046\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\076\u0141\001\001\000\012\032" +
    "\174\034\143\047\173\052\u013d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\032\174\034\143\047\173\052\u0142\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\022\u0146\032\174\034" +
    "\143\037\u0145\045\152\047\173\052\153\001\001\000\016" +
    "\040\201\041\202\042\177\043\220\044\203\046\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\u014a" +
    "\001\001\000\004\034\u014b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\u014d\001\001\000\004\056\u014e" +
    "\001\001\000\004\051\u014f\001\001\000\040\011\u0150\012" +
    "\142\013\132\014\151\015\162\016\136\022\160\031\155" +
    "\032\126\033\134\034\143\037\135\045\152\047\146\052" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	@Override
	public void report_error(String message, Object info) {
		// if (!((Symbol)info).value.toString().equals("null")){
			if (info instanceof String)
				System.err.println(" " + info + " " + message + "\n");
			else {
				StringBuffer m = new StringBuffer("Error ");
				if (info instanceof java_cup.runtime.Symbol) {
					m.append(("(Se ha encontrado el token \"" + ((java_cup.runtime.Symbol)info).value + "\" en la linea "
						+ ((java_cup.runtime.Symbol)info).left + 1 + ", columna " + ((java_cup.runtime.Symbol)info).right + 1) + ")");
				}
				if (message.equals("Couldn't repair and continue parse"))
					m.append(" : No existe una regla por los momentos para este token.");
				else
					m.append(" : " + message);
				System.err.println(m);
			}
		// }
	}
	@Override
	public void syntax_error(java_cup.runtime.Symbol s){
		System.err.println( "(Se ha encontrado el token \"" + sym.terminalNames[s.sym] + "\" en la linea " + (s.left+1) + ", columna" + (s.right+1) + ")" ); 
        expected();
	}

	public void expected(){
		List<Integer> token_list = this.expected_token_ids();
		if (token_list.size() <= 0){
			token_list = this.expected_token_ids();
		}
		String expected_tokens = "";
		for (int i = 0 ; i < token_list.size(); i++){
			int id = token_list.get(i);
			if (id == 1){
				continue;
			}
			String terminal_name = sym.terminalNames[id];
			if (i == token_list.size() - 1){
				expected_tokens += terminal_name;
			}else{
				expected_tokens += terminal_name + " , ";
			}
		}
		System.err.println("Se esperaba alguno de los siguientes tokens:" + expected_tokens);
	};

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new RuntimeException("Fatal Syntax Error");
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	AST ast = new AST();
	Stack<SymbolTable> scopes = new Stack();
	SymbolTable current_scope = new SymbolTable("global");

	Stack<Integer> offsets = new Stack();
	int current_offset = 0;

	public void printScopeStack() {
		String values = Arrays.toString(scopes.toArray());
		System.out.println(values);
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio_programa ::= fin_linea sentencias_principales 
            {
              AST.Programa RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciasPrincipales sp = (AST.SentenciasPrincipales)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
											System.out.println("\n" + current_scope.toString());
											RESULT = ast.new Programa(sp);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio_programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.Programa start_val = (AST.Programa)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio_programa ::= sentencias_principales 
            {
              AST.Programa RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciasPrincipales sp = (AST.SentenciasPrincipales)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
											System.out.println("\n" + current_scope.toString());
											RESULT = ast.new Programa(sp);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio_programa ::= 
            {
              AST.Programa RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias_principales ::= sentencia_principal 
            {
              AST.SentenciasPrincipales RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciaPrincipal sp = (AST.SentenciaPrincipal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciasPrincipales();
											RESULT.add(sp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_principales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias_principales ::= sentencias_principales fin_linea sentencia_principal 
            {
              AST.SentenciasPrincipales RESULT =null;
		int sspleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sspright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.SentenciasPrincipales ssp = (AST.SentenciasPrincipales)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciaPrincipal sp = (AST.SentenciaPrincipal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciasPrincipales();
											for (int i = 0; i < ssp.size(); i++)
												RESULT.add(ssp.getAt(i));
											RESULT.add(sp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_principales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia_principal ::= declaracion_variables 
            {
              AST.SentenciaPrincipal RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.DeclaracionVariables dv = (AST.DeclaracionVariables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = dv;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia_principal ::= declaracion_sub 
            {
              AST.SentenciaPrincipal RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.DeclaracionSub ds = (AST.DeclaracionSub)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ds;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia_principal ::= declaracion_funcion 
            {
              AST.SentenciaPrincipal RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.DeclaracionFuncion df = (AST.DeclaracionFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = df;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia_principal ::= declaracion_type 
            {
              AST.SentenciaPrincipal RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.DeclaracionType dt = (AST.DeclaracionType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = dt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_variables ::= visibilidad DIM IDENTIFICADOR AS tipo_dato 
            {
              AST.DeclaracionVariables RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST.Visibilidad v = (AST.Visibilidad)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.TipoDato td = (AST.TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
											if (td.getTipoDato().equals("Integer"))
												current_scope.add(id, new Symbol(new IntegerType(id)));
											else if (td.getTipoDato().equals("Double"))
												current_scope.add(id, new Symbol(new DoubleType(id)));
											else if (td.getTipoDato().equals("Character"))
												current_scope.add(id, new Symbol(new CharacterType(id)));
											else if (td.getTipoDato().equals("Boolean"))
												current_scope.add(id, new Symbol(new BooleanType(id)));

											RESULT = ast.new DeclaracionVariables(v, id, td);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_variables ::= visibilidad DIM IDENTIFICADOR AS NEW llamado_funcion 
            {
              AST.DeclaracionVariables RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AST.Visibilidad v = (AST.Visibilidad)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String lv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.LlamadoFuncion lf = (AST.LlamadoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new DeclaracionVariables(v, lv, lf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$0 ::= 
            {
              AST.DeclaracionSub RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST.Visibilidad v = (AST.Visibilidad)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Parametros p = (AST.Parametros)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
	
											SymbolTable sub_scope = new SymbolTable(current_scope, id);
											scopes.push(current_scope);
											current_scope = sub_scope;

											System.out.println("\nCAMBIO DE AMBITO (" + id + ")");
											
											offsets.push(current_offset);
											current_offset = 0;

										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_sub ::= visibilidad SUB IDENTIFICADOR parametros NT$0 fin_linea cuerpo_funcion END SUB 
            {
              AST.DeclaracionSub RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (AST.DeclaracionSub) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		AST.Visibilidad v = (AST.Visibilidad)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AST.Parametros p = (AST.Parametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.CuerpoFuncion cf = (AST.CuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			
											System.out.println(current_scope.toString());
											current_scope = scopes.pop();
											current_offset = offsets.pop();
											RESULT = ast.new DeclaracionSub(v, p, cf);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_sub",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              AST.DeclaracionFuncion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST.Visibilidad v = (AST.Visibilidad)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Parametros p = (AST.Parametros)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

											SymbolTable function_scope = new SymbolTable(current_scope, id);
											scopes.push(current_scope);
											current_scope = function_scope;

											System.out.println("\nCAMBIO DE AMBITO (" + id + ")");

											offsets.push(current_offset);
											current_offset = 0;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_funcion ::= visibilidad FUNCTION IDENTIFICADOR parametros NT$1 fin_linea cuerpo_funcion END FUNCTION 
            {
              AST.DeclaracionFuncion RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (AST.DeclaracionFuncion) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		AST.Visibilidad v = (AST.Visibilidad)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AST.Parametros p = (AST.Parametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.CuerpoFuncion cf = (AST.CuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			
											System.out.println(current_scope.toString());
											current_scope = scopes.pop();
											current_offset = offsets.pop();
											RESULT = ast.new DeclaracionFuncion(v, p, cf);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              AST.DeclaracionType RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Visibilidad v = (AST.Visibilidad)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion_type ::= visibilidad TYPE IDENTIFICADOR NT$2 fin_linea cuerpo_nuevo_tipo END TYPE 
            {
              AST.DeclaracionType RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (AST.DeclaracionType) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		AST.Visibilidad v = (AST.Visibilidad)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.CuerpoNuevoTipo cnt = (AST.CuerpoNuevoTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = ast.new DeclaracionType(v, id, cnt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpo_funcion ::= sentencias_cuerpo_funcion 
            {
              AST.CuerpoFuncion RESULT =null;
		int scfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciasCuerpoFuncion scf = (AST.SentenciasCuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new CuerpoFuncion(scf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpo_funcion ::= 
            {
              AST.CuerpoFuncion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencias_cuerpo_funcion ::= sentencia_cuerpo_funcion 
            {
              AST.SentenciasCuerpoFuncion RESULT =null;
		int scfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciaCuerpoFuncion scf = (AST.SentenciaCuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciasCuerpoFuncion();
											RESULT.add(scf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencias_cuerpo_funcion ::= sentencias_cuerpo_funcion sentencia_cuerpo_funcion 
            {
              AST.SentenciasCuerpoFuncion RESULT =null;
		int sscfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sscfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.SentenciasCuerpoFuncion sscf = (AST.SentenciasCuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int scfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciaCuerpoFuncion scf = (AST.SentenciaCuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciasCuerpoFuncion();
											for (int i = 0; i < sscf.size(); i++)
												RESULT.add(sscf.getAt(i));
											RESULT.add(scf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia_cuerpo_funcion ::= propiedad argumentos fin_linea 
            {
              AST.SentenciaCuerpoFuncion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Propiedad p = (AST.Propiedad)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.Argumentos a = (AST.Argumentos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new SentenciaLlamadoFuncionPropiedad(p, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia_cuerpo_funcion ::= DIM IDENTIFICADOR AS tipo_dato fin_linea 
            {
              AST.SentenciaCuerpoFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.TipoDato td = (AST.TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											if (td.getTipoDato().equals("Integer"))
												current_scope.add(id, new Symbol(new IntegerType(id)));
											else if (td.getTipoDato().equals("Double"))
												current_scope.add(id, new Symbol(new DoubleType(id)));
											else if (td.getTipoDato().equals("Character"))
												current_scope.add(id, new Symbol(new CharacterType(id)));
											else if (td.getTipoDato().equals("Boolean"))
												current_scope.add(id, new Symbol(new BooleanType(id)));

											RESULT = ast.new DeclaracionVariablesCuerpoFuncion(id, td);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia_cuerpo_funcion ::= DIM IDENTIFICADOR AS NEW llamado_funcion fin_linea 
            {
              AST.SentenciaCuerpoFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.LlamadoFuncion lf = (AST.LlamadoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
											current_scope.add(id, new Symbol(new TypeType(lf.getId())));
											RESULT = ast.new DeclaracionVariablesCuerpoFuncion(id, lf);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia_cuerpo_funcion ::= sentencia_for_step fin_linea 
            {
              AST.SentenciaCuerpoFuncion RESULT =null;
		int sftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.SentenciaForStep sft = (AST.SentenciaForStep)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = sft;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia_cuerpo_funcion ::= sentencia_do_while fin_linea 
            {
              AST.SentenciaCuerpoFuncion RESULT =null;
		int sdwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdwright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.SentenciaDoWhile sdw = (AST.SentenciaDoWhile)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = sdw;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia_cuerpo_funcion ::= sentencia_if fin_linea 
            {
              AST.SentenciaCuerpoFuncion RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.SentenciaIf si = (AST.SentenciaIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = si;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia_cuerpo_funcion ::= sentencia_consola fin_linea 
            {
              AST.SentenciaCuerpoFuncion RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.SentenciaConsola sc = (AST.SentenciaConsola)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = sc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia_cuerpo_funcion ::= sentencia_llamado_funcion fin_linea 
            {
              AST.SentenciaCuerpoFuncion RESULT =null;
		int slfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.SentenciaLlamadoFuncion slf = (AST.SentenciaLlamadoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = slf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia_cuerpo_funcion ::= sentencia_asignacion fin_linea 
            {
              AST.SentenciaCuerpoFuncion RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.SentenciaAsignacion sa = (AST.SentenciaAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = sa;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_cuerpo_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion STEP tipos_step fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              AST.SentenciaForStep RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		AST.Expresion e1 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AST.Expresion e2 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.CuerpoFuncion cf = (AST.CuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = ast.new SentenciaForStep(id, e1, e2, ts, cf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$3 ::= 
            {
              AST.SentenciaForStep RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia_for_step ::= FOR error NT$3 OP_IGUAL expresion TO expresion STEP tipos_step fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              AST.SentenciaForStep RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (AST.SentenciaForStep) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$4 ::= 
            {
              AST.SentenciaForStep RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba OP_IGUAL", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia_for_step ::= FOR IDENTIFICADOR error NT$4 expresion TO expresion STEP tipos_step fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              AST.SentenciaForStep RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (AST.SentenciaForStep) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$5 ::= 
            {
              AST.SentenciaForStep RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba TO", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion error NT$5 expresion STEP tipos_step fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              AST.SentenciaForStep RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (AST.SentenciaForStep) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$6 ::= 
            {
              AST.SentenciaForStep RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba STEP", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion error NT$6 tipos_step fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              AST.SentenciaForStep RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (AST.SentenciaForStep) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$7 ::= 
            {
              AST.SentenciaForStep RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba tipos_step", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion STEP error NT$7 fin_linea cuerpo_funcion NEXT IDENTIFICADOR 
            {
              AST.SentenciaForStep RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (AST.SentenciaForStep) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$8 ::= 
            {
              AST.SentenciaForStep RESULT =null;
parser.report_error("sentencia_for_step: Se esperaba NEXT", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion STEP tipos_step fin_linea cuerpo_funcion error NT$8 IDENTIFICADOR 
            {
              AST.SentenciaForStep RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (AST.SentenciaForStep) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia_for_step ::= FOR IDENTIFICADOR OP_IGUAL expresion TO expresion STEP tipos_step fin_linea cuerpo_funcion NEXT error 
            {
              AST.SentenciaForStep RESULT =null;
		parser.report_error("sentencia_for_step: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for_step",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia_do_while ::= DO WHILE expresion fin_linea cuerpo_funcion LOOP 
            {
              AST.SentenciaDoWhile RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.CuerpoFuncion cf = (AST.CuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new SentenciaDoWhile(e, cf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$9 ::= 
            {
              AST.SentenciaDoWhile RESULT =null;
parser.report_error("sentencia_do_while: Se esperaba WHILE", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia_do_while ::= DO error NT$9 expresion fin_linea cuerpo_funcion LOOP 
            {
              AST.SentenciaDoWhile RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (AST.SentenciaDoWhile) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$10 ::= 
            {
              AST.SentenciaDoWhile RESULT =null;
parser.report_error("sentencia_do_while: Se esperaba expresion", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia_do_while ::= DO WHILE error NT$10 fin_linea cuerpo_funcion LOOP 
            {
              AST.SentenciaDoWhile RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (AST.SentenciaDoWhile) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$11 ::= 
            {
              AST.SentenciaDoWhile RESULT =null;
parser.report_error("sentencia_do_while: Se esperaba fin_linea", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia_do_while ::= DO WHILE expresion error NT$11 cuerpo_funcion LOOP 
            {
              AST.SentenciaDoWhile RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (AST.SentenciaDoWhile) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia_do_while ::= DO WHILE expresion fin_linea cuerpo_funcion error 
            {
              AST.SentenciaDoWhile RESULT =null;
		parser.report_error("sentencia_do_while: Se esperaba LOOP", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion sentencias_else_if sentencia_else END IF 
            {
              AST.SentenciaIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST.CuerpoFuncion cf = (AST.CuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sseileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sseiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST.SentenciasElseIf ssei = (AST.SentenciasElseIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.SentenciaElse se = (AST.SentenciaElse)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = ast.new SentenciaIf(e, cf, ssei, se);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$12 ::= 
            {
              AST.SentenciaIf RESULT =null;
parser.report_error("sentencia_if: Se esperaba THEN", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia_if ::= IF expresion error NT$12 fin_linea cuerpo_funcion sentencia_else_if sentencia_else END IF 
            {
              AST.SentenciaIf RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (AST.SentenciaIf) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$13 ::= 
            {
              AST.SentenciaIf RESULT =null;
parser.report_error("sentencia_if: Se esperaba END", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion sentencias_else_if sentencia_else error NT$13 IF 
            {
              AST.SentenciaIf RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (AST.SentenciaIf) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion sentencias_else_if sentencia_else END error 
            {
              AST.SentenciaIf RESULT =null;
		parser.report_error("sentencia_if: Se esperaba IF", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion END IF 
            {
              AST.SentenciaIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.CuerpoFuncion cf = (AST.CuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = ast.new SentenciaIf(e, cf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$14 ::= 
            {
              AST.SentenciaIf RESULT =null;
parser.report_error("sentencia_if: Se esperaba END", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion error NT$14 IF 
            {
              AST.SentenciaIf RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (AST.SentenciaIf) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion END error 
            {
              AST.SentenciaIf RESULT =null;
		parser.report_error("sentencia_if: Se esperaba IF", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia_if ::= IF expresion THEN fin_linea cuerpo_funcion sentencia_else END IF 
            {
              AST.SentenciaIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST.CuerpoFuncion cf = (AST.CuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.SentenciaElse se = (AST.SentenciaElse)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = ast.new SentenciaIf(e, cf, se);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencias_else_if ::= sentencia_else_if 
            {
              AST.SentenciasElseIf RESULT =null;
		int seileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciaElseIf sei = (AST.SentenciaElseIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciasElseIf();
											RESULT.add(sei);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_else_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencias_else_if ::= sentencias_else_if sentencia_else_if 
            {
              AST.SentenciasElseIf RESULT =null;
		int sseileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sseiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.SentenciasElseIf ssei = (AST.SentenciasElseIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int seileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciaElseIf sei = (AST.SentenciaElseIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ssei.add(sei);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_else_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia_else_if ::= ELSE_IF expresion THEN fin_linea cuerpo_funcion 
            {
              AST.SentenciaElseIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.CuerpoFuncion cf = (AST.CuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciaElseIf(e, cf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia_else ::= ELSE fin_linea cuerpo_funcion 
            {
              AST.SentenciaElse RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.CuerpoFuncion cf = (AST.CuerpoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciaElse(cf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia_consola ::= WRITE PAR_IZQ PAR_DER 
            {
              AST.SentenciaConsola RESULT =null;
			RESULT = ast.new SentenciaConsola("Console.Write", ast.new Termino(""));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia_consola ::= WRITE PAR_IZQ termino PAR_DER 
            {
              AST.SentenciaConsola RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.Termino t = (AST.Termino)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new SentenciaConsola("Console.Write", t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$15 ::= 
            {
              AST.SentenciaConsola RESULT =null;
parser.report_error("sentencia_consola WRITE: Se esperaba \"(\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia_consola ::= WRITE error NT$15 PAR_DER 
            {
              AST.SentenciaConsola RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (AST.SentenciaConsola) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia_consola ::= WRITE PAR_IZQ termino error 
            {
              AST.SentenciaConsola RESULT =null;
		parser.report_error("sentencia_consola WRITE: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia_consola ::= READ PAR_IZQ termino PAR_DER 
            {
              AST.SentenciaConsola RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.Termino t = (AST.Termino)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new SentenciaConsola("Console.In", t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia_consola ::= READ PAR_IZQ PAR_DER 
            {
              AST.SentenciaConsola RESULT =null;
			RESULT = ast.new SentenciaConsola("Console.In", ast.new Termino(""));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$16 ::= 
            {
              AST.SentenciaConsola RESULT =null;
parser.report_error("sentencia_consola READ: Se esperaba \"(\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia_consola ::= READ error NT$16 termino PAR_DER 
            {
              AST.SentenciaConsola RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (AST.SentenciaConsola) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia_consola ::= READ PAR_IZQ termino error 
            {
              AST.SentenciaConsola RESULT =null;
		parser.report_error("sentencia_consola READ: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_consola",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cuerpo_nuevo_tipo ::= sentencias_cuerpo_nuevo_tipo 
            {
              AST.CuerpoNuevoTipo RESULT =null;
		int scntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciasCuerpoNuevoTipo scnt = (AST.SentenciasCuerpoNuevoTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new CuerpoNuevoTipo(scnt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_nuevo_tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cuerpo_nuevo_tipo ::= 
            {
              AST.CuerpoNuevoTipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_nuevo_tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencias_cuerpo_nuevo_tipo ::= declaracion_variables_nuevo_tipo fin_linea 
            {
              AST.SentenciasCuerpoNuevoTipo RESULT =null;
		int dvntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.DeclaracionVariablesNuevoTipo dvnt = (AST.DeclaracionVariablesNuevoTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new SentenciasCuerpoNuevoTipo();
											RESULT.add(dvnt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_nuevo_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencias_cuerpo_nuevo_tipo ::= sentencias_cuerpo_nuevo_tipo declaracion_variables_nuevo_tipo fin_linea 
            {
              AST.SentenciasCuerpoNuevoTipo RESULT =null;
		int sscntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sscntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.SentenciasCuerpoNuevoTipo sscnt = (AST.SentenciasCuerpoNuevoTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dvntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.DeclaracionVariablesNuevoTipo dvnt = (AST.DeclaracionVariablesNuevoTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new SentenciasCuerpoNuevoTipo();
											for (int i = 0; i < sscnt.size(); i++) {
												RESULT.add(sscnt.getAt(i));
											}
											RESULT.add(dvnt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_cuerpo_nuevo_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declaracion_variables_nuevo_tipo ::= IDENTIFICADOR AS tipo_dato 
            {
              AST.DeclaracionVariablesNuevoTipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.TipoDato td = (AST.TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
											if (td.getTipoDato().equals("Integer"))
												current_scope.add(id, new Symbol(new IntegerType(id)));
											else if (td.getTipoDato().equals("Double"))
												current_scope.add(id, new Symbol(new DoubleType(id)));
											else if (td.getTipoDato().equals("Character"))
												current_scope.add(id, new Symbol(new CharacterType(id)));
											else if (td.getTipoDato().equals("Boolean"))
												current_scope.add(id, new Symbol(new BooleanType(id)));


											RESULT = ast.new DeclaracionVariablesNuevoTipo(id, td);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables_nuevo_tipo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametros ::= PAR_IZQ PAR_DER 
            {
              AST.Parametros RESULT =null;
			RESULT = ast.new Parametros();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametros ::= PAR_IZQ error 
            {
              AST.Parametros RESULT =null;
		parser.report_error("parametros: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametros ::= PAR_IZQ lista_parametros PAR_DER 
            {
              AST.Parametros RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.ListaParametros lp = (AST.ListaParametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new Parametros(lp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametros ::= PAR_IZQ lista_parametros error 
            {
              AST.Parametros RESULT =null;
		parser.report_error("parametros: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lista_parametros ::= IDENTIFICADOR AS tipo_dato 
            {
              AST.ListaParametros RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.TipoDato td = (AST.TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new ListaParametros();
											RESULT.add(ast.new Parametro(id, td));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lista_parametros ::= forma_de_paso IDENTIFICADOR AS tipo_dato 
            {
              AST.ListaParametros RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST.FormaPaso fp = (AST.FormaPaso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.TipoDato td = (AST.TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new ListaParametros();
											RESULT.add(ast.new Parametro(fp, id, td));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$17 ::= 
            {
              AST.ListaParametros RESULT =null;
parser.report_error("lista_parametros: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // lista_parametros ::= forma_de_paso error NT$17 AS tipo_dato 
            {
              AST.ListaParametros RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (AST.ListaParametros) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$18 ::= 
            {
              AST.ListaParametros RESULT =null;
parser.report_error("lista_parametros: Se esperaba AS", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // lista_parametros ::= forma_de_paso IDENTIFICADOR error NT$18 tipo_dato 
            {
              AST.ListaParametros RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (AST.ListaParametros) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // lista_parametros ::= lista_parametros COMA forma_de_paso IDENTIFICADOR AS tipo_dato 
            {
              AST.ListaParametros RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AST.ListaParametros lp = (AST.ListaParametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST.FormaPaso fp = (AST.FormaPaso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.TipoDato td = (AST.TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new ListaParametros();
											for (int i = 0; i < lp.size(); i++) {
												RESULT.add(lp.getAt(i));
											}
											RESULT.add(ast.new Parametro(fp, id, td));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$19 ::= 
            {
              AST.ListaParametros RESULT =null;
parser.report_error("lista_parametros: Se esperaba COMA", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // lista_parametros ::= lista_parametros error NT$19 forma_de_paso IDENTIFICADOR AS tipo_dato 
            {
              AST.ListaParametros RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (AST.ListaParametros) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$20 ::= 
            {
              AST.ListaParametros RESULT =null;
parser.report_error("lista_parametros: Se esperaba IDENTIFICADOR", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // lista_parametros ::= lista_parametros COMA forma_de_paso error NT$20 AS tipo_dato 
            {
              AST.ListaParametros RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (AST.ListaParametros) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$21 ::= 
            {
              AST.ListaParametros RESULT =null;
parser.report_error("lista_parametros: Se esperaba AS", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lista_parametros ::= lista_parametros COMA forma_de_paso IDENTIFICADOR error NT$21 tipo_dato 
            {
              AST.ListaParametros RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (AST.ListaParametros) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // forma_de_paso ::= BYVAL 
            {
              AST.FormaPaso RESULT =null;
			RESULT = ast.new FormaPaso("ByVal");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forma_de_paso",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // forma_de_paso ::= BYREF 
            {
              AST.FormaPaso RESULT =null;
			RESULT = ast.new FormaPaso("ByRef");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forma_de_paso",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentencia_asignacion ::= receptor_asignacion OP_IGUAL expresion 
            {
              AST.SentenciaAsignacion RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int raright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.ReceptorAsignacion ra = (AST.ReceptorAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciaAsignacion(ra, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentencia_asignacion ::= receptor_asignacion OP_IGUAL sentencia_consola 
            {
              AST.SentenciaAsignacion RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int raright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.ReceptorAsignacion ra = (AST.ReceptorAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.SentenciaConsola sc = (AST.SentenciaConsola)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciaAsignacion(ra, sc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencia_asignacion ::= expresion OP_IGUAL expresion 
            {
              AST.SentenciaAsignacion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expresion e1 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expresion e2 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciaAsignacion(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // receptor_asignacion ::= IDENTIFICADOR 
            {
              AST.ReceptorAsignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new ReceptorAsignacion(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receptor_asignacion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // receptor_asignacion ::= propiedad 
            {
              AST.ReceptorAsignacion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Propiedad p = (AST.Propiedad)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new ReceptorAsignacion(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receptor_asignacion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentencia_llamado_funcion ::= CALL llamado_funcion 
            {
              AST.SentenciaLlamadoFuncion RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.LlamadoFuncion lf = (AST.LlamadoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new SentenciaLlamadoFuncion(lf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_llamado_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentencia_llamado_funcion ::= CALL error 
            {
              AST.SentenciaLlamadoFuncion RESULT =null;
		parser.report_error("Sentencia llamado funcion: Se esperaba el llamado a la funcion", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_llamado_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // llamado_funcion ::= IDENTIFICADOR argumentos 
            {
              AST.LlamadoFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Argumentos a = (AST.Argumentos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new LlamadoFuncion(id, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // argumentos ::= PAR_IZQ PAR_DER 
            {
              AST.Argumentos RESULT =null;
			RESULT = ast.new Argumentos();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // argumentos ::= PAR_IZQ error 
            {
              AST.Argumentos RESULT =null;
		parser.report_error("Argumentos: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // argumentos ::= PAR_IZQ lista_argumentos PAR_DER 
            {
              AST.Argumentos RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.ListaArgumentos la = (AST.ListaArgumentos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new Argumentos(la);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // argumentos ::= PAR_IZQ lista_argumentos error 
            {
              AST.Argumentos RESULT =null;
		parser.report_error("Argumentos: Se esperaba \")\"", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // lista_argumentos ::= expresion 
            {
              AST.ListaArgumentos RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new ListaArgumentos();
											RESULT.add(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_argumentos",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // lista_argumentos ::= lista_argumentos COMA expresion 
            {
              AST.ListaArgumentos RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.ListaArgumentos la = (AST.ListaArgumentos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new ListaArgumentos();
											for (int i = 0; i < la.size(); i++) {
												RESULT.add(la.getAt(i));
											}
											RESULT.add(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_argumentos",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresion ::= expresion operador_aritmetico expresion 
            {
              AST.Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expresion e1 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expresion e2 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new Expresion(e1, o, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresion ::= expresion operador_relacional expresion 
            {
              AST.Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expresion e1 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expresion e2 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new Expresion(e1, o, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresion ::= expresion operador_logico expresion 
            {
              AST.Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.Expresion e1 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expresion e2 = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new Expresion(e1, o, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              AST.Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = ast.new Expresion(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresion ::= OP_NOT expresion 
            {
              AST.Expresion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new Expresion(e, "<>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresion ::= operador_negacion expresion 
            {
              AST.Expresion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Expresion e = (AST.Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new Expresion(e, o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expresion ::= termino 
            {
              AST.Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.Termino t = (AST.Termino)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new Expresion(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operador_aritmetico ::= operador_aritmetico_suma 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operador_aritmetico ::= operador_aritmetico_multiplicacion 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operador_aritmetico_suma ::= OP_SUMA 
            {
              String RESULT =null;
			RESULT = "+";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_suma",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operador_aritmetico_suma ::= OP_RESTA 
            {
              String RESULT =null;
			RESULT = "-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_suma",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operador_aritmetico_multiplicacion ::= OP_POTENCIA 
            {
              String RESULT =null;
			RESULT = "^";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_multiplicacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operador_aritmetico_multiplicacion ::= OP_MULTIPLICACION 
            {
              String RESULT =null;
			RESULT = "*";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_multiplicacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operador_aritmetico_multiplicacion ::= OP_DIVISION 
            {
              String RESULT =null;
			RESULT = "/";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_multiplicacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operador_relacional ::= OP_MAYOR_QUE 
            {
              String RESULT =null;
		 RESULT = ">";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // operador_relacional ::= OP_MENOR_QUE 
            {
              String RESULT =null;
		 RESULT = "<";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // operador_relacional ::= OP_MAYOR_IGUAL_QUE 
            {
              String RESULT =null;
		 RESULT = ">=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // operador_relacional ::= OP_MENOR_IGUAL_QUE 
            {
              String RESULT =null;
		 RESULT = "<=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // operador_relacional ::= OP_IGUAL 
            {
              String RESULT =null;
			RESULT = "=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // operador_relacional ::= operador_distinto 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // operador_logico ::= OP_AND 
            {
              String RESULT =null;
		 RESULT = "And";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // operador_logico ::= OP_OR 
            {
              String RESULT =null;
		 RESULT = "Or";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // operador_negacion ::= OP_RESTA 
            {
              String RESULT =null;
		 RESULT = "-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_negacion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // operador_distinto ::= OP_MENOR_QUE OP_MAYOR_QUE 
            {
              String RESULT =null;
		 RESULT = "<>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_distinto",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // operador_distinto ::= OP_MENOR_QUE error 
            {
              String RESULT =null;
		parser.report_error("operador_distinto: Se esperaba OP_MAYOR_QUE", "\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_distinto",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // propiedad ::= IDENTIFICADOR cadena_propiedades 
            {
              AST.Propiedad RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.CadenaPropiedades cp = (AST.CadenaPropiedades)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ast.new Propiedad(cp, id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propiedad",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // cadena_propiedades ::= PUNTO IDENTIFICADOR 
            {
              AST.CadenaPropiedades RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ast.new CadenaPropiedades();
											RESULT.add(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadena_propiedades",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // cadena_propiedades ::= cadena_propiedades PUNTO IDENTIFICADOR 
            {
              AST.CadenaPropiedades RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST.CadenaPropiedades cp = (AST.CadenaPropiedades)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ast.new CadenaPropiedades();
											for (int i = 0; i < cp.size(); i++) {
												RESULT.add(cp.getAt(i));
											}
											RESULT.add(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadena_propiedades",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // fin_linea ::= FIN_LINEA fin_linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_linea",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // fin_linea ::= FIN_LINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_linea",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // termino ::= receptor_asignacion 
            {
              AST.Termino RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int raright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.ReceptorAsignacion ra = (AST.ReceptorAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ast.new Termino(ra);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // termino ::= ENTERO_LITERAL 
            {
              AST.Termino RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new Termino(Integer.toString(n));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // termino ::= REAL_LITERAL 
            {
              AST.Termino RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = ast.new Termino(Double.toString(n));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // termino ::= CARACTER_LITERAL 
            {
              AST.Termino RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character n = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ast.new Termino(Character.toString(n));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // termino ::= CADENA_LITERAL 
            {
              AST.Termino RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ast.new Termino(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // termino ::= TRUE_LITERAL 
            {
              AST.Termino RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean n = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ast.new Termino("True");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // termino ::= FALSE_LITERAL 
            {
              AST.Termino RESULT =null;
		 RESULT = ast.new Termino("False");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // termino ::= llamado_funcion 
            {
              AST.Termino RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST.LlamadoFuncion lf = (AST.LlamadoFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ast.new Termino(lf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // tipo_dato ::= ENTERO 
            {
              AST.TipoDato RESULT =null;
		 RESULT = ast.new TipoDato("Integer");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // tipo_dato ::= REAL 
            {
              AST.TipoDato RESULT =null;
		 RESULT = ast.new TipoDato("Double");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // tipo_dato ::= CADENA 
            {
              AST.TipoDato RESULT =null;
		 RESULT = ast.new TipoDato("String");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // tipo_dato ::= CARACTER 
            {
              AST.TipoDato RESULT =null;
		 RESULT = ast.new TipoDato("Character");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // tipo_dato ::= BOOLEAN 
            {
              AST.TipoDato RESULT =null;
		 RESULT = ast.new TipoDato("Boolean");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // tipo_dato ::= IDENTIFICADOR 
            {
              AST.TipoDato RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ast.new TipoDato(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // visibilidad ::= PUBLIC 
            {
              AST.Visibilidad RESULT =null;
			RESULT = ast.new Visibilidad("Public");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // visibilidad ::= PRIVATE 
            {
              AST.Visibilidad RESULT =null;
			RESULT = ast.new Visibilidad("Private");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // visibilidad ::= 
            {
              AST.Visibilidad RESULT =null;
		RESULT = ast.new Visibilidad("");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // tipos_step ::= ENTERO_LITERAL 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = Integer.toString(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_step",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // tipos_step ::= REAL_LITERAL 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = Double.toString(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_step",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
